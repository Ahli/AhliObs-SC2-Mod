include "TriggerLibs/NativeLib"

include "LibAHLI_h"

//--------------------------------------------------------------------------------------------------
// Library: AhliObs
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAHLI_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libAHLI_InitVariables_completed = false;

void libAHLI_InitVariables () {
    int init_i;
    int init_i1;

    if (libAHLI_InitVariables_completed) {
        return;
    }

    libAHLI_InitVariables_completed = true;

    libAHLI_gv_all_Players = PlayerGroupAll();
    libAHLI_gv_initial_Active_Players = PlayerGroupActive();
    libAHLI_gv_obsID = CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny);
    libAHLI_gv_obs = PlayerGroupSingle(libAHLI_gv_obsID);
    libAHLI_gv_gameSpeedFactor = GameGetSpeed();
    libAHLI_gv_productionTabGeneral.lv_selectionIndexRaw = -1;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS; init_i1 += 1) {
            libAHLI_gv_productionTabPlayer[init_i].lv_slotImage[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS; init_i1 += 1) {
            libAHLI_gv_productionTabPlayer[init_i].lv_slotCountLabel[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS; init_i1 += 1) {
            libAHLI_gv_productionTabPlayer[init_i].lv_slotProgressBar[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS; init_i1 += 1) {
            libAHLI_gv_productionTabPlayer[init_i].lv_slotUnitTargetFrame[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS; init_i1 += 1) {
            libAHLI_gv_productionTabPlayer[init_i].lv_slotPanel[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS; init_i1 += 1) {
            libAHLI_gv_productionTabPlayer[init_i].lv_slotChronoBoosted[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS; init_i1 += 1) {
            libAHLI_gv_productionTabPlayer[init_i].lv_slotContaminated[init_i1] = c_invalidDialogControlId;
        }
        libAHLI_gv_productionTabPlayer[init_i].lv_moreSlotsLabel = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= libAHLI_gv_productionTabMAX_SLOTS; init_i1 += 1) {
            libAHLI_gv_productionTabPlayer[init_i].lv_slotCategory[init_i1] = libAHLI_ge_ProductionTabCategory_Upgrade;
        }
        libAHLI_gv_productionTabPlayer[init_i].lv_lastUsedSlot = -1;
    }
    libAHLI_gv_productionTabMAX_VISIBLE_SLOTS__1 = (libAHLI_gv_productionTabMAX_VISIBLE_SLOTS + 1);
    libAHLI_gv_graphsGeneral.lv_container = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libAHLI_gv_graphsMaxGraphId; init_i += 1) {
        libAHLI_gv_graphsData[init_i].lv_graph = c_invalidDialogControlId;
        libAHLI_gv_graphsData[init_i].lv_title = c_invalidDialogControlId;
        libAHLI_gv_graphsData[init_i].lv_averageValues = true;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_itemIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_itemName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_itemPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_itemPlayerIdLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_itemProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_itemUnitTargetFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_timerDestruction[init_i1] = TimerCreate();
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_upgradeNotifications.lv_slotStatus[init_i1] = libAHLI_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
    }
    libAHLI_gv_upgradeNotifications.lv_slotLastUsed = -1;
    libAHLI_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread = -1;
    for (init_i1 = 0; init_i1 <= libAHLI_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_workersKilledNotifications.lv_itemPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_workersKilledNotifications.lv_itemKillerPlayerIdLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_workersKilledNotifications.lv_itemWorkerPlayerIdLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_workersKilledNotifications.lv_itemIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_workersKilledNotifications.lv_itemCountLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libAHLI_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libAHLI_gv_workersKilledNotifications.lv_timerDestruction[init_i1] = TimerCreate();
    }
    libAHLI_gv_workersKilledNotifications.lv_slotLastUsed = -1;
    libAHLI_gv_workersKilledNotificationsVisibleGameTime = (20.0 * GameGetSpeed());
    libAHLI_gv_mapNotifications.lv_minimumPickupSpacing = 10.0;
    libAHLI_gv_mapNotifications.lv_scannerSweepDuration = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ScannerSweep", "ExpireDelay", c_playerAny)) / libAHLI_gv_gameSpeedFactor);
    libAHLI_gv_mapNotifications.lv_pingDuration = 8.0;
    libAHLI_gv_mapNotifications.lv_mostRecentTimer = TimerCreate();
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libAHLI_gv_minimapFrustum.lv_ping[init_i1] = c_invalidPingId;
    }
    libAHLI_gv_battleReport.lv_uiBattleDurationLabel = c_invalidDialogControlId;
    libAHLI_gv_battleReport.lv_uiBattleActiveIndicator = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libAHLI_gv_battleReportSideData[init_i].lv_killedUnitTypeLastUsedSlot = -1;
        libAHLI_gv_battleReportSideData[init_i].lv_abilitiesCastedLastUsedSlot = -1;
        for (init_i1 = 0; init_i1 <= libAHLI_gv_battleReportMaxKilledUnitTypeSlot; init_i1 += 1) {
            libAHLI_gv_battleReportSideData[init_i].lv_uiUnitTypeButton[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libAHLI_gv_battleReportMaxAbilitySlot; init_i1 += 1) {
            libAHLI_gv_battleReportSideData[init_i].lv_uiAbilityButton[init_i1] = c_invalidDialogControlId;
        }
        libAHLI_gv_battleReportSideData[init_i].lv_uiDamageLabel = c_invalidDialogControlId;
        libAHLI_gv_battleReportSideData[init_i].lv_uiMineralsLabel = c_invalidDialogControlId;
        libAHLI_gv_battleReportSideData[init_i].lv_uiVespeneLabel = c_invalidDialogControlId;
    }
}

// Presets
// Functions
string libAHLI_gf_IconofProduction (string lp_item, bool lp_isUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isUnit == true)) {
        return libAHLI_gf_IconofUnit((lp_item), lp_player);
    }
    else {
        if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lp_item) == true)) {
            return libAHLI_gf_IconofUpgrade((lp_item), lp_player);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_AHLI_DD90EB18", "A", StringToText(lp_item));
            TriggerDebugOutput(2, TextExpressionAssemble("Param/Expression/lib_AHLI_DD90EB18"), false);
            return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
        }
    }
}

string libAHLI_gf_IconofUnit (string lp_unitType, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogButton, lp_unitType) == true)) {
        return (CatalogFieldValueGet(c_gameCatalogButton, lp_unitType, "Icon", lp_player));
    }
    else {
        if ((CatalogEntryIsValid(c_gameCatalogActor, lp_unitType) == true)) {
            return (CatalogFieldValueGet(c_gameCatalogActor, lp_unitType, "UnitIcon", lp_player));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_AHLI_DCC6FE9D", "A", StringToText((lp_unitType)));
            TriggerDebugOutput(2, TextExpressionAssemble("Param/Expression/lib_AHLI_DCC6FE9D"), false);
            return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
        }
    }
}

string libAHLI_gf_IconofUpgrade (string lp_upgrade, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Icon", lp_player));
}

text libAHLI_gf_NameofProduction (string lp_item, bool lp_isUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isUnit == true)) {
        return UnitTypeGetName((lp_item));
    }
    else {
        if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lp_item) == true)) {
            return StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lp_item, "Name", lp_player));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_AHLI_611EC01F", "A", StringToText(lp_item));
            TriggerDebugOutput(2, TextExpressionAssemble("Param/Expression/lib_AHLI_611EC01F"), false);
            return StringToText(lp_item);
        }
    }
}

void libAHLI_gf_RegisterCameraMoveEvent (trigger lp_trigger, int lp_playerId, int lp_cameraMoveReason) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventCameraMove(lp_trigger, lp_playerId, lp_cameraMoveReason);
}

void libAHLI_gf_RegisterPeriodicEvent (trigger lp_trigger, fixed lp_interval, int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventTimePeriodic(lp_trigger, lp_interval, lp_time);
}

void libAHLI_gf_RegisterTimerRunsOutEvent (trigger lp_trigger, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventTimer(lp_trigger, lp_timer);
}

void libAHLI_gf_RegisterUnitCreatedEvent (trigger lp_trigger, unit lp_unit, string lp_ability, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitCreated(lp_trigger,UnitRefFromUnit(lp_unit),lp_ability,lp_behavior);
}

void libAHLI_gf_RegisterUnitTrainingProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitTrainProgress(lp_trigger,UnitRefFromUnit(lp_unit),lp_progressStage);
}

void libAHLI_gf_RegisterUnitArmingProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitArmMagazineProgress(lp_trigger,UnitRefFromUnit(lp_unit),lp_progressStage);
}

void libAHLI_gf_RegisterUnitResearchProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitResearchProgress(lp_trigger,UnitRefFromUnit(lp_unit),lp_progressStage);
}

void libAHLI_gf_RegisterUnitDiesEvent (trigger lp_trigger, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitDied(lp_trigger,UnitRefFromUnit(lp_unit));
}

void libAHLI_gf_RegisterPlayerLeavesEvent (trigger lp_trigger, int lp_player, int lp_gameResult) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventPlayerLeft(lp_trigger,lp_player,lp_gameResult);
}

void libAHLI_gf_RegisterAbilityUsedEvent (trigger lp_trigger, unit lp_unit, abilcmd lp_abilityCommand, int lp_stage, bool lp_includeSharedAbilities) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitAbility(lp_trigger, UnitRefFromUnit(lp_unit), lp_abilityCommand, lp_stage, lp_includeSharedAbilities);
}

void libAHLI_gf_RegisterUnitTakesDamageEvent (trigger lp_trigger, unit lp_unit, int lp_damageType, int lp_fatal, string lp_effect) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitDamaged(lp_trigger, UnitRefFromUnit(lp_unit), lp_damageType, lp_fatal, lp_effect);
}

void libAHLI_gf_RegisterTimerExpiresEvent (trigger lp_trigger, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventTimer(lp_trigger, lp_timer);
}

void libAHLI_gf_ProductionTabRegisterProduction (int lp_player, string lp_item, int lp_productionCategory, unit lp_relatedUnit, bool lp_useCurrentOrderProgress, bool lp_isMorphAbility, string lp_constructorUnitTypeonlyForConstructionsLikeProbe, abilcmd lp_morphAbilCmd) {
    // Variable Declarations
    int lv_slot;
    bool lv_isUnit;
    string lv_itemAlias;
    int lv_queueIndex;

    // Automatic Variable Declarations
    const int auto98AE4297_ae = libAHLI_gv_productionTabMAX_SLOTS;
    const int auto98AE4297_ai = 1;
    int autoBFAAAB5D_ae;
    const int autoBFAAAB5D_ai = 1;

    // Variable Initialization
    lv_isUnit = (lp_productionCategory != libAHLI_ge_ProductionTabCategory_Upgrade);
    lv_itemAlias = lp_item;

    // Implementation
    if ((lv_isUnit == true)) {
        lv_itemAlias = CatalogFieldValueGet(c_gameCatalogUnit, lp_item, "LeaderAlias", c_playerAny);
        if ((lv_itemAlias == null)) {
            return ;
        }

    }

    lv_slot = 0;
    for ( ; ( (auto98AE4297_ai >= 0 && lv_slot <= auto98AE4297_ae) || (auto98AE4297_ai < 0 && lv_slot >= auto98AE4297_ae) ) ; lv_slot += auto98AE4297_ai ) {
        if ((libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lv_slot] == lv_itemAlias) && (libAHLI_gv_productionTabPlayer[lp_player].lv_slotCategory[lv_slot] == lp_productionCategory)) {
            libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lv_slot] += 1;
            UnitGroupAdd(libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_slot], lp_relatedUnit);
            libNtve_gf_SetDialogItemText(libAHLI_gv_productionTabPlayer[lp_player].lv_slotCountLabel[lv_slot], IntToText(libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lv_slot]), libAHLI_gv_obs);
            if ((UnitGroupHasUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_chronoBoosted, lp_relatedUnit) == true) && (DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obsID) == false)) {
                DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obs, true);
            }

            return ;
        }

    }
    if ((libAHLI_gv_productionTabPlayer[lp_player].lv_lastUsedSlot < libAHLI_gv_productionTabMAX_SLOTS)) {
        libAHLI_gv_productionTabPlayer[lp_player].lv_lastUsedSlot += 1;
        lv_slot = libAHLI_gv_productionTabPlayer[lp_player].lv_lastUsedSlot;
        libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lv_slot] = lv_itemAlias;
        libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lv_slot] = 1;
        libAHLI_gv_productionTabPlayer[lp_player].lv_slotIconFile[lv_slot] = libAHLI_gf_IconofProduction(lv_itemAlias, lv_isUnit, lp_player);
        libAHLI_gv_productionTabPlayer[lp_player].lv_slotName[lv_slot] = libAHLI_gf_NameofProduction(lv_itemAlias, lv_isUnit, lp_player);
        if ((libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_slot] != null)) {
            UnitGroupAdd(libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_slot], lp_relatedUnit);
        }
        else {
            libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_slot] = libNtve_gf_ConvertUnitToUnitGroup(lp_relatedUnit);
        }
        libAHLI_gv_productionTabPlayer[lp_player].lv_slotUseCurrentOrderProgress[lv_slot] = lp_useCurrentOrderProgress;
        libAHLI_gv_productionTabPlayer[lp_player].lv_slotCategory[lv_slot] = lp_productionCategory;
        if ((lp_useCurrentOrderProgress == true)) {
            if ((lp_isMorphAbility == true)) {
                libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lv_slot] = libAHLI_gf_ProductionTabGetMaxDurationOfMorph(lp_morphAbilCmd, lp_player);
            }
            else {
                libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lv_slot] = libAHLI_gf_ProductionTabGetMaxDurationOfConstruction(lp_constructorUnitTypeonlyForConstructionsLikeProbe, (lp_item), lp_player);
            }
        }
        else {
            autoBFAAAB5D_ae = UnitQueueGetProperty(lp_relatedUnit, c_unitQueuePropertyCount);
            lv_queueIndex = 1;
            for ( ; ( (autoBFAAAB5D_ai >= 0 && lv_queueIndex <= autoBFAAAB5D_ae) || (autoBFAAAB5D_ai < 0 && lv_queueIndex >= autoBFAAAB5D_ae) ) ; lv_queueIndex += autoBFAAAB5D_ai ) {
                if ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lp_relatedUnit, lv_queueIndex, 1) == (lp_item))) {
                    libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lv_slot] = UnitQueueItemTime(lp_relatedUnit, c_unitQueueTimeTotal, lv_queueIndex);
                    break;
                }

            }
        }
        libNtve_gf_SetDialogItemText(libAHLI_gv_productionTabPlayer[lp_player].lv_slotCountLabel[lv_slot], IntToText(libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lv_slot]), libAHLI_gv_obs);
        libNtve_gf_SetDialogItemImage(libAHLI_gv_productionTabPlayer[lp_player].lv_slotImage[lv_slot], libAHLI_gv_productionTabPlayer[lp_player].lv_slotIconFile[lv_slot], libAHLI_gv_obs);
        libNtve_gf_SetDialogItemUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_slotUnitTargetFrame[lv_slot], lp_relatedUnit, libAHLI_gv_obs);
        libAHLI_gf_ProductionTabUpdateUICurrentProgressPercentAndTooltip(lp_player, lv_slot);
        if ((lv_slot <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS)) {
            DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotPanel[lv_slot], libAHLI_gv_obs, true);
        }
        else {
            if ((lv_slot == libAHLI_gv_productionTabMAX_VISIBLE_SLOTS__1)) {
                DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_moreSlotsLabel, libAHLI_gv_obs, true);
            }

        }
        if ((UnitGroupHasUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_chronoBoosted, lp_relatedUnit) == true) && (DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obsID) == false)) {
            DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obs, true);
        }

    }
    else {
        TextExpressionSetToken("Param/Expression/lib_AHLI_B1281E8F", "A", StringToText(lp_item));
        TriggerDebugOutput(2, TextExpressionAssemble("Param/Expression/lib_AHLI_B1281E8F"), false);
    }
}

void libAHLI_gf_ProductionTabRemoveProduction (int lp_player, string lp_item, int lp_productionType, unit lp_relatedUnit) {
    // Variable Declarations
    int lv_slot;
    int lv_foundSlot;
    bool lv_productionIsUnit;
    string lv_itemAlias;
    unit lv_unit;
    bool lv_visibleChrono;
    bool lv_visibleContaminate;
    int lv_slot1;

    // Automatic Variable Declarations
    int auto8F3ABC0D_ae;
    const int auto8F3ABC0D_ai = 1;
    int autoE66D4B06_ae;
    const int autoE66D4B06_ai = 1;
    unitgroup auto6237CDFF_g;
    int auto6237CDFF_u;
    unitgroup auto204DDE52_g;
    int auto204DDE52_u;

    // Variable Initialization
    lv_foundSlot = -1;
    lv_productionIsUnit = (lp_productionType != libAHLI_ge_ProductionTabCategory_Upgrade);
    lv_itemAlias = lp_item;

    // Implementation
    if ((lv_productionIsUnit == true)) {
        lv_itemAlias = CatalogFieldValueGet(c_gameCatalogUnit, lp_item, "LeaderAlias", c_playerAny);
        if ((lv_itemAlias == null)) {
            return ;
        }

    }

    auto8F3ABC0D_ae = libAHLI_gv_productionTabPlayer[lp_player].lv_lastUsedSlot;
    lv_slot = 0;
    for ( ; ( (auto8F3ABC0D_ai >= 0 && lv_slot <= auto8F3ABC0D_ae) || (auto8F3ABC0D_ai < 0 && lv_slot >= auto8F3ABC0D_ae) ) ; lv_slot += auto8F3ABC0D_ai ) {
        if ((libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lv_slot] == lv_itemAlias) && (libAHLI_gv_productionTabPlayer[lp_player].lv_slotCategory[lv_slot] == lp_productionType)) {
            lv_foundSlot = lv_slot;
            break;
        }

    }
    if ((lv_foundSlot >= 0)) {
        if ((libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lv_foundSlot] > 1)) {
            libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lv_foundSlot] -= 1;
            libNtve_gf_SetDialogItemText(libAHLI_gv_productionTabPlayer[lp_player].lv_slotCountLabel[lv_foundSlot], IntToText(libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lv_foundSlot]), libAHLI_gv_obs);
            if (((UnitQueueGetProperty(lp_relatedUnit, c_unitQueuePropertyCount) < 2) || ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lp_relatedUnit, 1, 1) != (lp_item)) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lp_relatedUnit, 2, 1) != (lp_item))))) {
                UnitGroupRemove(libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_foundSlot], lp_relatedUnit);
                libNtve_gf_SetDialogItemUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_slotUnitTargetFrame[lv_foundSlot], UnitGroupUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_foundSlot], (ModI(libAHLI_gv_productionTabGeneral.lv_selectionIndexTimed, UnitGroupCount(libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_foundSlot], c_unitCountAll)) + 1)), libAHLI_gv_obs);
            }

            if ((UnitGroupHasUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_chronoBoosted, lp_relatedUnit) == true)) {
                lv_visibleChrono = false;
                auto6237CDFF_g = libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_foundSlot];
                auto6237CDFF_u = UnitGroupCount(auto6237CDFF_g, c_unitCountAll);
                for (;; auto6237CDFF_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(auto6237CDFF_g, auto6237CDFF_u);
                    if (lv_unit == null) { break; }
                    if ((UnitGroupHasUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_chronoBoosted, lv_unit) == true)) {
                        lv_visibleChrono = true;
                        break;
                    }

                }
                if ((lv_visibleChrono == false)) {
                    DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obs, false);
                }

            }

            if ((UnitGroupHasUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_contanimated, lp_relatedUnit) == true)) {
                lv_visibleContaminate = false;
                auto204DDE52_g = libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_foundSlot];
                auto204DDE52_u = UnitGroupCount(auto204DDE52_g, c_unitCountAll);
                for (;; auto204DDE52_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(auto204DDE52_g, auto204DDE52_u);
                    if (lv_unit == null) { break; }
                    if ((UnitGroupHasUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_contanimated, lv_unit) == true)) {
                        lv_visibleContaminate = true;
                        break;
                    }

                }
                if ((lv_visibleContaminate == false)) {
                    DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotContaminated[lv_slot], libAHLI_gv_obs, false);
                }

            }

        }
        else {
            autoE66D4B06_ae = (libAHLI_gv_productionTabPlayer[lp_player].lv_lastUsedSlot - 1);
            lv_slot = lv_foundSlot;
            for ( ; ( (autoE66D4B06_ai >= 0 && lv_slot <= autoE66D4B06_ae) || (autoE66D4B06_ai < 0 && lv_slot >= autoE66D4B06_ae) ) ; lv_slot += autoE66D4B06_ai ) {
                lv_slot1 = (lv_slot + 1);
                libAHLI_gf_ProductionTabSwapSlots(lp_player, lv_slot, lv_slot1);
                if ((lv_slot <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS)) {
                    libNtve_gf_SetDialogItemText(libAHLI_gv_productionTabPlayer[lp_player].lv_slotCountLabel[lv_slot], IntToText(libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lv_slot]), libAHLI_gv_obs);
                    libNtve_gf_SetDialogItemImage(libAHLI_gv_productionTabPlayer[lp_player].lv_slotImage[lv_slot], libAHLI_gv_productionTabPlayer[lp_player].lv_slotIconFile[lv_slot], libAHLI_gv_obs);
                    libNtve_gf_SetDialogItemUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_slotUnitTargetFrame[lv_slot], UnitGroupUnit(libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_slot], (ModI(libAHLI_gv_productionTabGeneral.lv_selectionIndexTimed, UnitGroupCount(libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_slot], c_unitCountAll)) + 1)), libAHLI_gv_obs);
                    libAHLI_gf_ProductionTabUpdateUICurrentProgressPercentAndTooltip(lp_player, lv_slot);
                    if ((lv_slot < libAHLI_gv_productionTabMAX_VISIBLE_SLOTS)) {
                        lv_visibleChrono = DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obsID);
                        lv_visibleContaminate = DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotContaminated[lv_slot], libAHLI_gv_obsID);
                        DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obs, (DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot1], libAHLI_gv_obsID)));
                        DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotContaminated[lv_slot], libAHLI_gv_obs, (DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotContaminated[lv_slot1], libAHLI_gv_obsID)));
                        DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot1], libAHLI_gv_obs, (lv_visibleChrono));
                        DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotContaminated[lv_slot1], libAHLI_gv_obs, (lv_visibleContaminate));
                    }
                    else {
                        DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obs, (DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot1], libAHLI_gv_obsID)));
                        DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotContaminated[lv_slot], libAHLI_gv_obs, (DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotContaminated[lv_slot1], libAHLI_gv_obsID)));
                    }
                }

            }
            lv_slot = libAHLI_gv_productionTabPlayer[lp_player].lv_lastUsedSlot;
            libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lv_slot] = null;
            libAHLI_gv_productionTabPlayer[lp_player].lv_slotIconFile[lv_slot] = null;
            libAHLI_gv_productionTabPlayer[lp_player].lv_slotName[lv_slot] = null;
            libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lv_slot] = 0.0;
            UnitGroupClear(libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lv_slot]);
            libAHLI_gv_productionTabPlayer[lp_player].lv_lastUsedSlot -= 1;
            if ((lv_slot <= libAHLI_gv_productionTabMAX_VISIBLE_SLOTS)) {
                DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotPanel[lv_slot], libAHLI_gv_obs, false);
                DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obs, false);
                DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_slotContaminated[lv_slot], libAHLI_gv_obs, false);
            }
            else {
                if ((lv_slot == libAHLI_gv_productionTabMAX_VISIBLE_SLOTS__1)) {
                    DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lp_player].lv_moreSlotsLabel, libAHLI_gv_obs, false);
                }

            }
        }
    }

}

void libAHLI_gf_ProductionTabSwapSlots (int lp_player, int lp_slotA, int lp_slotB) {
    // Variable Declarations
    string lv_slotContent;
    string lv_slotIcon;
    int lv_slotCount;
    text lv_slotName;
    unitgroup lv_slotSelection;
    bool lv_slotUseCurrentOrderProgress;
    int lv_slotCategory;
    fixed lv_slotBuildDurationMax;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_slotContent = libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lp_slotA];
    lv_slotIcon = libAHLI_gv_productionTabPlayer[lp_player].lv_slotIconFile[lp_slotA];
    lv_slotCount = libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lp_slotA];
    lv_slotName = libAHLI_gv_productionTabPlayer[lp_player].lv_slotName[lp_slotA];
    lv_slotSelection = libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lp_slotA];
    lv_slotUseCurrentOrderProgress = libAHLI_gv_productionTabPlayer[lp_player].lv_slotUseCurrentOrderProgress[lp_slotA];
    lv_slotCategory = libAHLI_gv_productionTabPlayer[lp_player].lv_slotCategory[lp_slotA];
    lv_slotBuildDurationMax = libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lp_slotA];

    // Implementation
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lp_slotA] = libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lp_slotB];
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotIconFile[lp_slotA] = libAHLI_gv_productionTabPlayer[lp_player].lv_slotIconFile[lp_slotB];
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lp_slotA] = libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lp_slotB];
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotName[lp_slotA] = libAHLI_gv_productionTabPlayer[lp_player].lv_slotName[lp_slotB];
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lp_slotA] = libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lp_slotB];
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotUseCurrentOrderProgress[lp_slotA] = libAHLI_gv_productionTabPlayer[lp_player].lv_slotUseCurrentOrderProgress[lp_slotB];
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotCategory[lp_slotA] = libAHLI_gv_productionTabPlayer[lp_player].lv_slotCategory[lp_slotB];
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lp_slotA] = libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lp_slotB];
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lp_slotB] = lv_slotContent;
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotIconFile[lp_slotB] = lv_slotIcon;
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotCount[lp_slotB] = lv_slotCount;
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotName[lp_slotB] = lv_slotName;
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lp_slotB] = lv_slotSelection;
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotUseCurrentOrderProgress[lp_slotB] = lv_slotUseCurrentOrderProgress;
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotCategory[lp_slotB] = lv_slotCategory;
    libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lp_slotB] = lv_slotBuildDurationMax;
}

fixed libAHLI_gf_ProductionTabGetMaxDurationOfConstruction (string lp_constructor, string lp_constructed, int lp_player) {
    // Variable Declarations
    int lv_slot;
    string lv_catalogEntry;

    // Automatic Variable Declarations
    const int autoFAD7A9A9_ae = 29;
    const int autoFAD7A9A9_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_constructor == "WarpGate")) {
        lv_catalogEntry = ("WarpGateTrain");
    }
    else {
        if ((lp_constructor == "SCV")) {
            lv_catalogEntry = ("TerranBuild");
        }
        else {
            if ((lp_constructor == "Probe")) {
                lv_catalogEntry = ("ProtossBuild");
            }
            else {
                if ((lp_constructor == "Drone")) {
                    lv_catalogEntry = ("ZergBuild");
                }
                else {
                    if ((lp_constructor == "CreepTumorBurrowed")) {
                        lv_catalogEntry = ("CreepTumorBuild");
                    }
                    else {
                        if ((lp_constructor == "Queen")) {
                            lv_catalogEntry = ("QueenBuild");
                        }
                        else {
                            if ((lp_constructor == "NydusNetwork")) {
                                lv_catalogEntry = ("BuildNydusCanal");
                            }
                            else {
                                if ((lp_constructed == "Archon")) {
                                    return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "ArchonWarp", "Info.Time", lp_player);
                                }
                                else {
                                    if (((lp_constructed == "BarracksTechLab") || (lp_constructed == "BarracksReactor"))) {
                                        lv_catalogEntry = ("BarracksAddOns");
                                    }
                                    else {
                                        if (((lp_constructed == "FactoryTechLab") || (lp_constructed == "FactoryReactor"))) {
                                            lv_catalogEntry = ("FactoryAddOns");
                                        }
                                        else {
                                            if (((lp_constructed == "StarportTechLab") || (lp_constructed == "StarportReactor"))) {
                                                lv_catalogEntry = ("StarportAddOns");
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((lv_catalogEntry != null)) {
        lv_slot = 0;
        for ( ; ( (autoFAD7A9A9_ai >= 0 && lv_slot <= autoFAD7A9A9_ae) || (autoFAD7A9A9_ai < 0 && lv_slot >= autoFAD7A9A9_ae) ) ; lv_slot += autoFAD7A9A9_ai ) {
            if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_catalogEntry, "InfoArray[" + IntToString(lv_slot) + "].Unit", lp_player) == (lp_constructed))) {
                return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_catalogEntry, "InfoArray[" + IntToString(lv_slot) + "].Time", lp_player);
            }

        }
    }

    TextExpressionSetToken("Param/Expression/lib_AHLI_6FB00989", "A", StringToText((lp_constructed)));
    TextExpressionSetToken("Param/Expression/lib_AHLI_6FB00989", "B", StringToText((lp_constructor)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AHLI_6FB00989"), false);
    return 0.0;
}

fixed libAHLI_gf_ProductionTabGetMaxDurationOfMorph (abilcmd lp_abilCmd, int lp_player) {
    // Variable Declarations
    string lv_ability;
    int lv_infoArrayIndex;
    int lv_sectionIndex;
    fixed lv_maxSectionTime;
    fixed lv_maxDurationTime;
    fixed lv_accumulatedTime;

    // Automatic Variable Declarations
    int auto7C0C384E_ae;
    const int auto7C0C384E_ai = 1;
    const int auto9BF94CC2_ae = 5;
    const int auto9BF94CC2_ai = 1;

    // Variable Initialization
    lv_ability = AbilityCommandGetAbility(lp_abilCmd);

    // Implementation
    auto7C0C384E_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lp_player) - 1);
    lv_infoArrayIndex = 0;
    for ( ; ( (auto7C0C384E_ai >= 0 && lv_infoArrayIndex <= auto7C0C384E_ae) || (auto7C0C384E_ai < 0 && lv_infoArrayIndex >= auto7C0C384E_ae) ) ; lv_infoArrayIndex += auto7C0C384E_ai ) {
        lv_maxSectionTime = 0.0;
        lv_sectionIndex = 0;
        for ( ; ( (auto9BF94CC2_ai >= 0 && lv_sectionIndex <= auto9BF94CC2_ae) || (auto9BF94CC2_ai < 0 && lv_sectionIndex >= auto9BF94CC2_ae) ) ; lv_sectionIndex += auto9BF94CC2_ai ) {
            lv_maxDurationTime = MaxF(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_infoArrayIndex) + "].SectionArray[" + IntToString(lv_sectionIndex) + "].DurationArray[" + IntToString(0) + "]", lp_player), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_infoArrayIndex) + "].SectionArray[" + IntToString(lv_sectionIndex) + "].DurationArray[" + IntToString(1) + "]", lp_player));
            if ((lv_maxDurationTime > lv_maxSectionTime)) {
                lv_maxSectionTime = lv_maxDurationTime;
            }

        }
        lv_accumulatedTime += lv_maxSectionTime;
    }
    return lv_accumulatedTime;
}

trigger auto_libAHLI_gf_ProductionTabUpdateUIProgressSelectionthreadedinfinite_Trigger = null;

void libAHLI_gf_ProductionTabUpdateUIProgressSelectionthreadedinfinite () {
    if (auto_libAHLI_gf_ProductionTabUpdateUIProgressSelectionthreadedinfinite_Trigger == null) {
        auto_libAHLI_gf_ProductionTabUpdateUIProgressSelectionthreadedinfinite_Trigger = TriggerCreate("auto_libAHLI_gf_ProductionTabUpdateUIProgressSelectionthreadedinfinite_TriggerFunc");
    }

    TriggerExecute(auto_libAHLI_gf_ProductionTabUpdateUIProgressSelectionthreadedinfinite_Trigger, false, false);
}

bool auto_libAHLI_gf_ProductionTabUpdateUIProgressSelectionthreadedinfinite_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_slot;

    // Automatic Variable Declarations
    playergroup auto6F237BA6_g;
    int auto468EFED4_ae;
    const int auto468EFED4_ai = 1;

    // Variable Initialization

    // Implementation
    while (true) {
        Wait(0.0625, c_timeGame);
        if ((libAHLI_gv_productionTabGeneral.lv_selectionIndexRaw == 4095)) {
            libAHLI_gv_productionTabGeneral.lv_selectionIndexRaw = 0;
        }
        else {
            libAHLI_gv_productionTabGeneral.lv_selectionIndexRaw += 1;
        }
        libAHLI_gv_productionTabGeneral.lv_selectionIndexTimed = (libAHLI_gv_productionTabGeneral.lv_selectionIndexRaw / 4);
        auto6F237BA6_g = libAHLI_gv_initial_Active_Players;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto6F237BA6_g, lv_player);
            if (lv_player < 0) { break; }
            if ((libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot >= 0)) {
                auto468EFED4_ae = MinI(libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot, libAHLI_gv_productionTabMAX_VISIBLE_SLOTS);
                lv_slot = 0;
                for ( ; ( (auto468EFED4_ai >= 0 && lv_slot <= auto468EFED4_ae) || (auto468EFED4_ai < 0 && lv_slot >= auto468EFED4_ae) ) ; lv_slot += auto468EFED4_ai ) {
                    libNtve_gf_SetDialogItemUnit(libAHLI_gv_productionTabPlayer[lv_player].lv_slotUnitTargetFrame[lv_slot], UnitGroupUnit(libAHLI_gv_productionTabPlayer[lv_player].lv_slotSelection[lv_slot], (ModI(libAHLI_gv_productionTabGeneral.lv_selectionIndexTimed, UnitGroupCount(libAHLI_gv_productionTabPlayer[lv_player].lv_slotSelection[lv_slot], c_unitCountAll)) + 1)), libAHLI_gv_obs);
                    libAHLI_gf_ProductionTabUpdateUICurrentProgressPercentAndTooltip(lv_player, lv_slot);
                }
            }

        }
    }
    return true;
}

void libAHLI_gf_ProductionTabUpdateUICurrentProgressPercentAndTooltip (int lp_player, int lp_slot) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_maxProgressPercent;
    fixed lv_curProgressPercent;
    int lv_queueIndex;
    fixed lv_elapsed;
    fixed lv_total;

    // Automatic Variable Declarations
    unitgroup auto4A08C1CA_g;
    int auto4A08C1CA_u;
    unitgroup auto937889DA_g;
    int auto937889DA_u;
    int auto1BB8275C_ae;
    const int auto1BB8275C_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libAHLI_gv_productionTabPlayer[lp_player].lv_slotUseCurrentOrderProgress[lp_slot] == false)) {
        auto937889DA_g = libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lp_slot];
        auto937889DA_u = UnitGroupCount(auto937889DA_g, c_unitCountAll);
        for (;; auto937889DA_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto937889DA_g, auto937889DA_u);
            if (lv_unit == null) { break; }
            auto1BB8275C_ae = UnitQueueGetProperty(lv_unit, c_unitQueuePropertyCount);
            lv_queueIndex = 1;
            for ( ; ( (auto1BB8275C_ai >= 0 && lv_queueIndex <= auto1BB8275C_ae) || (auto1BB8275C_ai < 0 && lv_queueIndex >= auto1BB8275C_ae) ) ; lv_queueIndex += auto1BB8275C_ai ) {
                lv_curProgressPercent = UnitGetProgressComplete(lv_unit, lv_queueIndex);
                if ((lv_curProgressPercent > lv_maxProgressPercent) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_unit, lv_queueIndex, 1) == (libAHLI_gv_productionTabPlayer[lp_player].lv_slotContent[lp_slot]))) {
                    lv_maxProgressPercent = lv_curProgressPercent;
                }

            }
        }
    }
    else {
        auto4A08C1CA_g = libAHLI_gv_productionTabPlayer[lp_player].lv_slotSelection[lp_slot];
        auto4A08C1CA_u = UnitGroupCount(auto4A08C1CA_g, c_unitCountAll);
        for (;; auto4A08C1CA_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto4A08C1CA_g, auto4A08C1CA_u);
            if (lv_unit == null) { break; }
            lv_curProgressPercent = UnitOrderGetProgress(lv_unit);
            if ((lv_curProgressPercent > lv_maxProgressPercent)) {
                lv_maxProgressPercent = lv_curProgressPercent;
            }

        }
    }
    lv_total = libAHLI_gv_productionTabPlayer[lp_player].lv_slotBuildDurationMax[lp_slot];
    lv_elapsed = ((lv_maxProgressPercent * lv_total) / 100.0);
    libNtve_gf_SetDialogItemCurrentValue(libAHLI_gv_productionTabPlayer[lp_player].lv_slotProgressBar[lp_slot], lv_maxProgressPercent, libAHLI_gv_obs);
    if ((lv_total > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_AHLI_0ABE02E7", "A", libAHLI_gv_productionTabPlayer[lp_player].lv_slotName[lp_slot]);
        TextExpressionSetToken("Param/Expression/lib_AHLI_0ABE02E7", "B", FixedToText(Round((lv_elapsed / libAHLI_gv_gameSpeedFactor)), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_AHLI_0ABE02E7", "C", FixedToText(Round((lv_total / libAHLI_gv_gameSpeedFactor)), c_fixedPrecisionAny));
        libNtve_gf_SetDialogItemTooltip(libAHLI_gv_productionTabPlayer[lp_player].lv_slotUnitTargetFrame[lp_slot], TextExpressionAssemble("Param/Expression/lib_AHLI_0ABE02E7"), libAHLI_gv_obs);
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libAHLI_gv_productionTabPlayer[lp_player].lv_slotUnitTargetFrame[lp_slot], libAHLI_gv_productionTabPlayer[lp_player].lv_slotName[lp_slot], libAHLI_gv_obs);
    }
}

void libAHLI_gf_ProductionTabRegisterChronoBoost (unit lp_structure) {
    // Variable Declarations
    int lv_slot;
    int lv_player;
    string lv_boostedUpgradeOrUnit;

    // Automatic Variable Declarations
    int autoA86411E9_ae;
    const int autoA86411E9_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_structure);

    // Implementation
    UnitGroupAdd(libAHLI_gv_productionTabPlayer[lv_player].lv_chronoBoosted, lp_structure);
    if ((libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot >= 0)) {
        lv_boostedUpgradeOrUnit = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lp_structure, 1, 1);
        if ((lv_boostedUpgradeOrUnit != null)) {
            autoA86411E9_ae = libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot;
            lv_slot = 0;
            for ( ; ( (autoA86411E9_ai >= 0 && lv_slot <= autoA86411E9_ae) || (autoA86411E9_ai < 0 && lv_slot >= autoA86411E9_ae) ) ; lv_slot += autoA86411E9_ai ) {
                if ((libAHLI_gv_productionTabPlayer[lv_player].lv_slotContent[lv_slot] == (lv_boostedUpgradeOrUnit))) {
                    if ((DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lv_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obsID) == false)) {
                        DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lv_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obs, true);
                    }

                    return ;
                }

            }
        }

    }

}

void libAHLI_gf_ProductionTabUnregisterChronoBoost (unit lp_boostedStructure) {
    // Variable Declarations
    unit lv_unit;
    int lv_slot;
    int lv_player;
    string lv_boostedUpgradeOrUnit;

    // Automatic Variable Declarations
    unitgroup auto43863427_g;
    int auto43863427_u;
    int autoB4BA23C9_ae;
    const int autoB4BA23C9_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_boostedStructure);

    // Implementation
    UnitGroupRemove(libAHLI_gv_productionTabPlayer[lv_player].lv_chronoBoosted, lp_boostedStructure);
    lv_boostedUpgradeOrUnit = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lp_boostedStructure, 1, 1);
    if ((lv_boostedUpgradeOrUnit != null)) {
        auto43863427_g = libAHLI_gv_productionTabPlayer[lv_player].lv_chronoBoosted;
        auto43863427_u = UnitGroupCount(auto43863427_g, c_unitCountAll);
        for (;; auto43863427_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto43863427_g, auto43863427_u);
            if (lv_unit == null) { break; }
            if ((lv_boostedUpgradeOrUnit == libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lv_unit, 1, 1))) {
                return ;
            }

        }
        if ((libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot >= 0)) {
            autoB4BA23C9_ae = libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot;
            lv_slot = 0;
            for ( ; ( (autoB4BA23C9_ai >= 0 && lv_slot <= autoB4BA23C9_ae) || (autoB4BA23C9_ai < 0 && lv_slot >= autoB4BA23C9_ae) ) ; lv_slot += autoB4BA23C9_ai ) {
                if ((libAHLI_gv_productionTabPlayer[lv_player].lv_slotContent[lv_slot] == (lv_boostedUpgradeOrUnit))) {
                    if ((DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lv_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obsID) == true)) {
                        DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lv_player].lv_slotChronoBoosted[lv_slot], libAHLI_gv_obs, false);
                        return ;
                    }

                }

            }
        }

    }

}

void libAHLI_gf_ProductionTabRegisterContaminate (unit lp_haltedStructure) {
    // Variable Declarations
    int lv_slot;
    int lv_player;
    string lv_haltedUpgradeOrUnit;
    int lv_queue;
    int lv_queueCount;

    // Automatic Variable Declarations
    int auto972802AB_ae;
    const int auto972802AB_ai = 1;
    int autoCE209592_ae;
    const int autoCE209592_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_haltedStructure);

    // Implementation
    UnitGroupAdd(libAHLI_gv_productionTabPlayer[lv_player].lv_contanimated, lp_haltedStructure);
    if ((libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot >= 0)) {
        lv_queueCount = UnitQueueGetProperty(lp_haltedStructure, c_unitQueuePropertyCount);
        if ((lv_queueCount > 0)) {
            auto972802AB_ae = UnitQueueGetProperty(lp_haltedStructure, c_unitQueuePropertyCount);
            lv_queue = 1;
            for ( ; ( (auto972802AB_ai >= 0 && lv_queue <= auto972802AB_ae) || (auto972802AB_ai < 0 && lv_queue >= auto972802AB_ae) ) ; lv_queue += auto972802AB_ai ) {
                lv_haltedUpgradeOrUnit = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lp_haltedStructure, lv_queue, 1);
                if ((lv_haltedUpgradeOrUnit != null)) {
                    autoCE209592_ae = libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot;
                    lv_slot = 0;
                    for ( ; ( (autoCE209592_ai >= 0 && lv_slot <= autoCE209592_ae) || (autoCE209592_ai < 0 && lv_slot >= autoCE209592_ae) ) ; lv_slot += autoCE209592_ai ) {
                        if ((libAHLI_gv_productionTabPlayer[lv_player].lv_slotContent[lv_slot] == (lv_haltedUpgradeOrUnit))) {
                            if ((DialogControlIsVisible(libAHLI_gv_productionTabPlayer[lv_player].lv_slotContaminated[lv_slot], libAHLI_gv_obsID) == false)) {
                                DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lv_player].lv_slotContaminated[lv_slot], libAHLI_gv_obs, true);
                            }

                            break;
                        }

                    }
                }

            }
        }

    }

}

void libAHLI_gf_ProductionTabUnregisterContaminate (unit lp_haltedStructure) {
    // Variable Declarations
    unit lv_unit;
    int lv_slot;
    int lv_player;
    string lv_haltedUpgradeOrUnit;
    int lv_queue;
    int lv_queueCount;
    bool lv_usedByOther;

    // Automatic Variable Declarations
    int auto1621C4A7_ae;
    const int auto1621C4A7_ai = 1;
    unitgroup auto3DBE4EFE_g;
    int auto3DBE4EFE_u;
    int autoE8A8AE26_ae;
    const int autoE8A8AE26_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_haltedStructure);

    // Implementation
    UnitGroupRemove(libAHLI_gv_productionTabPlayer[lv_player].lv_contanimated, lp_haltedStructure);
    lv_queueCount = UnitQueueGetProperty(lp_haltedStructure, c_unitQueuePropertyCount);
    if ((libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot >= 0) && (lv_queueCount > 0)) {
        auto1621C4A7_ae = lv_queueCount;
        lv_queue = 1;
        for ( ; ( (auto1621C4A7_ai >= 0 && lv_queue <= auto1621C4A7_ae) || (auto1621C4A7_ai < 0 && lv_queue >= auto1621C4A7_ae) ) ; lv_queue += auto1621C4A7_ai ) {
            lv_haltedUpgradeOrUnit = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lp_haltedStructure, lv_queue, 1);
            lv_usedByOther = false;
            if ((lv_haltedUpgradeOrUnit != null)) {
                auto3DBE4EFE_g = libAHLI_gv_productionTabPlayer[lv_player].lv_contanimated;
                auto3DBE4EFE_u = UnitGroupCount(auto3DBE4EFE_g, c_unitCountAll);
                for (;; auto3DBE4EFE_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(auto3DBE4EFE_g, auto3DBE4EFE_u);
                    if (lv_unit == null) { break; }
                    if ((lv_haltedUpgradeOrUnit == libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lv_unit, 1, 1))) {
                        lv_usedByOther = true;
                        break;
                    }

                }
                if ((lv_usedByOther == false)) {
                    autoE8A8AE26_ae = libAHLI_gv_productionTabPlayer[lv_player].lv_lastUsedSlot;
                    lv_slot = 0;
                    for ( ; ( (autoE8A8AE26_ai >= 0 && lv_slot <= autoE8A8AE26_ae) || (autoE8A8AE26_ai < 0 && lv_slot >= autoE8A8AE26_ae) ) ; lv_slot += autoE8A8AE26_ai ) {
                        if ((libAHLI_gv_productionTabPlayer[lv_player].lv_slotContent[lv_slot] == (lv_haltedUpgradeOrUnit))) {
                            DialogControlSetVisible(libAHLI_gv_productionTabPlayer[lv_player].lv_slotContaminated[lv_slot], libAHLI_gv_obs, false);
                            return ;
                        }

                    }
                }

            }

        }
    }

}

void libAHLI_gf_ObserverUiAssistSetPlayerIdScore (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueSetFromInt(lp_player, "PlayerId", lp_player);
}

void libAHLI_gf_ObserverUiAssistSetPlayerStatusScore (int lp_player, int lp_status) {
    // Automatic Variable Declarations
    int autoD1011202_val;

    // Implementation
    autoD1011202_val = lp_status;
    if (autoD1011202_val == libAHLI_ge_PlayerStatusScoreValue_Playing) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 1);
    }
    else if (autoD1011202_val == libAHLI_ge_PlayerStatusScoreValue_LeftGameinDefeat) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 4);
    }
    else if (autoD1011202_val == libAHLI_ge_PlayerStatusScoreValue_LeftGameinVictory) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 2);
    }
    else if (autoD1011202_val == libAHLI_ge_PlayerStatusScoreValue_LeftGameinTie) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 3);
    }
    else if (autoD1011202_val == libAHLI_ge_PlayerStatusScoreValue_DroppedbeforeMapInitialization) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 5);
    }
    else {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 0);
    }
}

int libAHLI_gf_GetFixedUnitResourceCost (unit lp_unit, int lp_resource, int lp_player) {
    // Variable Declarations
    string lv_unitType;
    int lv_resourceCostIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    if ((lv_unitType == "Archon")) {
        if ((UnitHasBehavior2(lp_unit, "AHLI_fixUnitLostResourcesOfArchonHTHT") == true)) {
            if ((lp_resource == c_unitCostVespene)) {
                lv_resourceCostIndex = 1;
            }

            return (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "HighTemplar", "CostResource[" + IntToString(lv_resourceCostIndex) + "]", lp_player) * 2);
        }
        else {
            if ((UnitHasBehavior2(lp_unit, "AHLI_fixUnitLostResourcesOfArchonDTDT") == true)) {
                if ((lp_resource == c_unitCostVespene)) {
                    lv_resourceCostIndex = 1;
                }

                return (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "DarkTemplar", "CostResource[" + IntToString(lv_resourceCostIndex) + "]", lp_player) * 2);
            }

        }
    }
    else {
        if ((((lv_unitType == "Overseer") && (UnitHasBehavior2(lp_unit, "AHLI_fixUnitLostResourcesOfOverlordTransport") == true)) || (lv_unitType == "OverlordTransport"))) {
            if ((lp_resource == c_unitCostVespene)) {
                lv_resourceCostIndex = 1;
            }

            return (UnitTypeGetCost(lv_unitType, lp_resource) + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MorphToTransportOverlord", "Cost.Resource[" + IntToString(lv_resourceCostIndex) + "]", lp_player));
        }

        if ((lv_unitType == "BanelingCocoon")) {
            return UnitTypeGetCost("Zergling", lp_resource);
        }

        if ((lv_unitType == "BroodLordCocoon")) {
            return UnitTypeGetCost("BroodLordCocoon", lp_resource);
        }

        if ((lv_unitType == "LurkerMPEgg")) {
            return UnitTypeGetCost("Hydralisk", lp_resource);
        }

        if ((lv_unitType == "TransportOverlordCocoon")) {
            return UnitTypeGetCost("Overlord", lp_resource);
        }

        if ((lv_unitType == "OverlordCocoon")) {
            if ((lp_resource == c_unitCostVespene)) {
                lv_resourceCostIndex = 1;
            }

            if ((UnitHasBehavior2(lp_unit, "AHLI_fixUnitLostResourcesOfOverlordTransport") == true)) {
                return (UnitTypeGetCost(lv_unitType, lp_resource) + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MorphToTransportOverlord", "Cost.Resource[" + IntToString(lv_resourceCostIndex) + "]", lp_player));
            }
            else {
                return UnitTypeGetCost("Overlord", lp_resource);
            }
        }

        if ((lv_unitType == "Carrier")) {
            return (UnitTypeGetCost("Carrier", lp_resource) - (CatalogFieldValueGetAsInt(c_gameCatalogAbil, "CarrierHangar", "InfoArray[" + IntToString(0) + "].CountStart", lp_player) * CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Interceptor", "CostResource[" + IntToString(lv_resourceCostIndex) + "]", lp_player)));
        }

    }
    return UnitTypeGetCost(lv_unitType, lp_resource);
}

void libAHLI_gf_GraphsDefineGraph (int lp_id, text lp_title, string lp_frameName, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement, bool lp_averageValues) {
    // Variable Declarations
    int lv_graph;
    int lv_count;

    // Automatic Variable Declarations
    const int auto236CE7AF_ae = 0;
    const int auto236CE7AF_ai = 1;

    // Variable Initialization
    lv_graph = lp_id;

    // Implementation
    libAHLI_gv_graphsData[lv_graph].lv_scoreType = lp_scoreType;
    libAHLI_gv_graphsData[lv_graph].lv_style = lp_style;
    libAHLI_gv_graphsData[lv_graph].lv_minimumValue = lp_minimumValue;
    libAHLI_gv_graphsData[lv_graph].lv_rangeBase = lp_rangeBase;
    libAHLI_gv_graphsData[lv_graph].lv_rangeIncrement = lp_rangeIncrement;
    libAHLI_gv_graphsData[lv_graph].lv_averageValues = lp_averageValues;
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_frameName));
    DialogControlSetEnabled(DialogControlLastCreated(), libAHLI_gv_obs, true);
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_frameName + "/Graph/GraphFrame"));
    libAHLI_gv_graphsData[lv_graph].lv_graph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_frameName + "/Graph/Title"));
    libAHLI_gv_graphsData[lv_graph].lv_title = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libAHLI_gv_graphsData[lv_graph].lv_title, lp_title, libAHLI_gv_obs);
    lv_count = (0 - libAHLI_gv_graphsMaxNode);
    for ( ; ( (auto236CE7AF_ai >= 0 && lv_count <= auto236CE7AF_ae) || (auto236CE7AF_ai < 0 && lv_count >= auto236CE7AF_ae) ) ; lv_count += auto236CE7AF_ai ) {
        DialogControlAddDataPoint(libAHLI_gv_graphsData[lv_graph].lv_graph, libAHLI_gv_obs, lv_count, 0.0, 1);
        DialogControlAddDataPoint(libAHLI_gv_graphsData[lv_graph].lv_graph, libAHLI_gv_obs, lv_count, 0.0, 2);
    }
}

void libAHLI_gf_GraphsUpdateDataDifferential (int lp_graphIndex) {
    // Variable Declarations
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    fixed lv_differential;

    // Automatic Variable Declarations
    const int auto826A55D7_ae = libAHLI_gv_graphsIntervalLength;
    const int auto826A55D7_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libAHLI_gv_graphsData[lp_graphIndex].lv_averageValues == true)) {
        lv_count = 1;
        for ( ; ( (auto826A55D7_ai >= 0 && lv_count <= auto826A55D7_ae) || (auto826A55D7_ai < 0 && lv_count >= auto826A55D7_ae) ) ; lv_count += auto826A55D7_ai ) {
            lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamLeft]+libAHLI_gv_graphsData[lp_graphIndex].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamLeft][lv_count]));
            lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamRight]+libAHLI_gv_graphsData[lp_graphIndex].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamRight][lv_count]));
        }
        lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamLeft]/libAHLI_gv_graphsIntervalLength);
        lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamRight]/libAHLI_gv_graphsIntervalLength);
    }
    else {
        lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamLeft] = libAHLI_gv_graphsData[lp_graphIndex].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamLeft][libAHLI_gv_graphsIntervalLength];
        lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamRight] = libAHLI_gv_graphsData[lp_graphIndex].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamRight][libAHLI_gv_graphsIntervalLength];
    }
    lv_difference = ((lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamRight]));
    if ((lv_difference == 0)) {
        libAHLI_gv_graphsData[lp_graphIndex].lv_team = 0;
        libAHLI_gv_graphsData[lp_graphIndex].lv_value[0] = 0;
    }
    else if ((lv_difference > 0)) {
        libAHLI_gv_graphsData[lp_graphIndex].lv_team = libAHLI_gv_graphsGeneral.lv_teamLeft;
        libAHLI_gv_graphsData[lp_graphIndex].lv_value[0] = (lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamRight]);
    }
    else if ((lv_difference < 0)) {
        libAHLI_gv_graphsData[lp_graphIndex].lv_team = libAHLI_gv_graphsGeneral.lv_teamRight;
        libAHLI_gv_graphsData[lp_graphIndex].lv_value[0] = (lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamRight]-lv_teamAverage[libAHLI_gv_graphsGeneral.lv_teamLeft]);
    }
    if ((libAHLI_gv_graphsData[lp_graphIndex].lv_team == libAHLI_gv_graphsGeneral.lv_teamLeft)) {
        DialogControlAddDataPoint(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsGeneral.lv_currentNode, libAHLI_gv_graphsData[lp_graphIndex].lv_value[0], 1);
        DialogControlAddDataPoint(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsGeneral.lv_currentNode, (0 - libAHLI_gv_graphsData[lp_graphIndex].lv_value[0]), 2);
    }
    else {
        DialogControlAddDataPoint(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsGeneral.lv_currentNode, (0 - libAHLI_gv_graphsData[lp_graphIndex].lv_value[0]), 1);
        DialogControlAddDataPoint(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsGeneral.lv_currentNode, libAHLI_gv_graphsData[lp_graphIndex].lv_value[0], 2);
    }
    if ((DialogControlGetMinYValue(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs) <= (0.0 - DialogControlGetMaxYValue(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs)))) {
        lv_differential = AbsF(DialogControlGetMinYValue(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs));
    }
    else {
        lv_differential = DialogControlGetMaxYValue(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs);
    }
    if ((lv_differential < libAHLI_gv_graphsData[lp_graphIndex].lv_minimumValue)) {
        lv_differential = libAHLI_gv_graphsData[lp_graphIndex].lv_rangeBase;
    }
    else {
        lv_differential = (lv_differential * 1.15);
        lv_differential = (Ceiling((lv_differential / libAHLI_gv_graphsData[lp_graphIndex].lv_rangeIncrement)) * libAHLI_gv_graphsData[lp_graphIndex].lv_rangeIncrement);
    }
    DialogControlSetMaxYVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, lv_differential);
    DialogControlSetMinYVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, (0.0 - lv_differential));
    DialogControlSetMinXVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, (libAHLI_gv_graphsGeneral.lv_currentNode - libAHLI_gv_graphsMaxNode));
    DialogControlSetMaxXVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsGeneral.lv_currentNode);
}

void libAHLI_gf_GraphsUpdateDataComparative (int lp_graphIndex) {
    // Variable Declarations
    int lv_count;
    int[3] lv_teamTotal;
    fixed lv_maxValue;

    // Automatic Variable Declarations
    const int auto2C209F5F_ae = libAHLI_gv_graphsIntervalLength;
    const int auto2C209F5F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libAHLI_gv_graphsData[lp_graphIndex].lv_averageValues == true)) {
        lv_count = 1;
        for ( ; ( (auto2C209F5F_ai >= 0 && lv_count <= auto2C209F5F_ae) || (auto2C209F5F_ai < 0 && lv_count >= auto2C209F5F_ae) ) ; lv_count += auto2C209F5F_ai ) {
            lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamLeft]+libAHLI_gv_graphsData[lp_graphIndex].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamLeft][lv_count]));
            lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamRight]+libAHLI_gv_graphsData[lp_graphIndex].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamRight][lv_count]));
        }
    }
    else {
        lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamLeft] = libAHLI_gv_graphsData[lp_graphIndex].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamLeft][libAHLI_gv_graphsIntervalLength];
        lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamRight] = libAHLI_gv_graphsData[lp_graphIndex].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamRight][libAHLI_gv_graphsIntervalLength];
    }
    libAHLI_gv_graphsData[lp_graphIndex].lv_value[libAHLI_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamLeft]/libAHLI_gv_graphsIntervalLength);
    libAHLI_gv_graphsData[lp_graphIndex].lv_value[libAHLI_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libAHLI_gv_graphsGeneral.lv_teamRight]/libAHLI_gv_graphsIntervalLength);
    DialogControlAddDataPoint(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsGeneral.lv_currentNode, libAHLI_gv_graphsData[lp_graphIndex].lv_value[libAHLI_gv_graphsGeneral.lv_teamLeft], 1);
    DialogControlAddDataPoint(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsGeneral.lv_currentNode, libAHLI_gv_graphsData[lp_graphIndex].lv_value[libAHLI_gv_graphsGeneral.lv_teamRight], 2);
    DialogControlSetMinXVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, (libAHLI_gv_graphsGeneral.lv_currentNode - libAHLI_gv_graphsMaxNode));
    DialogControlSetMaxXVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsGeneral.lv_currentNode);
    DialogControlSetMinYVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, 0.0);
    if ((DialogControlGetMaxYValue(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs) <= libAHLI_gv_graphsData[lp_graphIndex].lv_minimumValue)) {
        DialogControlSetMaxYVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, libAHLI_gv_graphsData[lp_graphIndex].lv_rangeBase);
    }
    else {
        lv_maxValue = (DialogControlGetMaxYValue(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs) * 1.15);
        lv_maxValue = (Ceiling((lv_maxValue / libAHLI_gv_graphsData[lp_graphIndex].lv_rangeIncrement)) * libAHLI_gv_graphsData[lp_graphIndex].lv_rangeIncrement);
        DialogControlSetMaxYVisible(libAHLI_gv_graphsData[lp_graphIndex].lv_graph, libAHLI_gv_obs, lv_maxValue);
    }
}

bool libAHLI_gf_LabelsUnitUsesCustomStatusBarforProduction (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_unitType == "Larva") || (lp_unitType == "Egg") || (lp_unitType == "Gateway") || (lp_unitType == "Barracks") || (lp_unitType == "Nexus") || (lp_unitType == "Hatchery") || (lp_unitType == "CommandCenter") || (lp_unitType == "TechLab") || (lp_unitType == "BarracksTechLab") || (lp_unitType == "FactoryTechLab") || (lp_unitType == "StarportTechLab") || (lp_unitType == "Factory") || (lp_unitType == "Starport") || (lp_unitType == "Stargate") || (lp_unitType == "RoboticsBay") || (lp_unitType == "Forge") || (lp_unitType == "EngineeringBay") || (lp_unitType == "Armory") || (lp_unitType == "EvolutionChamber") || (lp_unitType == "Spire") || (lp_unitType == "CyberneticsCore") || (lp_unitType == "OrbitalCommand") || (lp_unitType == "PlanetaryFortress") || (lp_unitType == "FleetBeacon") || (lp_unitType == "RoboticsFacility") || (lp_unitType == "TemplarArchive") || (lp_unitType == "TwilightCouncil") || (lp_unitType == "FusionCore") || (lp_unitType == "SpawningPool") || (lp_unitType == "RoachWarren") || (lp_unitType == "BanelingNest") || (lp_unitType == "LurkerDenMP") || (lp_unitType == "GhostAcademy") || (lp_unitType == "GreaterSpire") || (lp_unitType == "Lair") || (lp_unitType == "Hive") || (lp_unitType == "HydraliskDen") || (lp_unitType == "InfestationPit") || (lp_unitType == "UltraliskCavern") || (lp_unitType == "DarkShrine") || (lp_unitType == "WarpGate"))) {
        return true;
    }

    return false;
}

bool libAHLI_gf_LabelsUnitCanEffectivelyBeContaminated (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_unitType == "Gateway") || (lp_unitType == "Barracks") || (lp_unitType == "Nexus") || (lp_unitType == "Hatchery") || (lp_unitType == "CommandCenter") || (lp_unitType == "TechLab") || (lp_unitType == "BarracksTechLab") || (lp_unitType == "FactoryTechLab") || (lp_unitType == "StarportTechLab") || (lp_unitType == "Factory") || (lp_unitType == "Starport") || (lp_unitType == "Stargate") || (lp_unitType == "RoboticsBay") || (lp_unitType == "Forge") || (lp_unitType == "EngineeringBay") || (lp_unitType == "Armory") || (lp_unitType == "EvolutionChamber") || (lp_unitType == "Spire") || (lp_unitType == "CyberneticsCore") || (lp_unitType == "OrbitalCommand") || (lp_unitType == "PlanetaryFortress") || (lp_unitType == "FleetBeacon") || (lp_unitType == "RoboticsFacility") || (lp_unitType == "TemplarArchive") || (lp_unitType == "TwilightCouncil") || (lp_unitType == "FusionCore") || (lp_unitType == "SpawningPool") || (lp_unitType == "RoachWarren") || (lp_unitType == "BanelingNest") || (lp_unitType == "LurkerDenMP") || (lp_unitType == "GhostAcademy") || (lp_unitType == "GreaterSpire") || (lp_unitType == "Lair") || (lp_unitType == "Hive") || (lp_unitType == "HydraliskDen") || (lp_unitType == "InfestationPit") || (lp_unitType == "UltraliskCavern") || (lp_unitType == "DarkShrine") || (lp_unitType == "WarpGate"))) {
        return true;
    }

    return false;
}

void libAHLI_gf_LabelsPylonPowerSetPoweredDown (unit lp_unit) {
    // Variable Declarations
    int lv_dialogItem;
    string lv_unitTagString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_unitTagString = IntToString(UnitGetTag(lp_unit));

    // Implementation
    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIconBG1 + lv_unitTagString));
    if ((lv_dialogItem == c_invalidDialogControlId)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DisruptIcon1\\Icon", lp_unit);
        lv_dialogItem = DialogControlLastCreated();
        DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
        libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsDisruptIcon1 + lv_unitTagString), lv_dialogItem);
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DisruptIcon1\\IconBG", lp_unit);
        lv_dialogItem = DialogControlLastCreated();
        DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
        libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsDisruptIconBG1 + lv_unitTagString), lv_dialogItem);
    }

    DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIcon1 + lv_unitTagString));
    libNtve_gf_SetDialogItemImage(lv_dialogItem, "_Assets\\Textures\\ui_hots_shared_icon_stat_energy.dds", libAHLI_gv_obs);
    DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
}

void libAHLI_gf_UpgradeNotificationsRemoveRunningUpgrade (int lp_slot) {
    // Variable Declarations
    int lv_count;
    string lv_upgrade;
    int lv_sLOT_MAX_INDEX1;
    int lv_count1;
    bool lv_visible;
    int lv_player;

    // Automatic Variable Declarations
    int auto85411229_ae;
    const int auto85411229_ai = 1;

    // Variable Initialization
    lv_sLOT_MAX_INDEX1 = (libAHLI_gv_upgradeNotificationsMaxUISlots + 1);

    // Implementation
    auto85411229_ae = libAHLI_gv_upgradeNotifications.lv_slotLastUsed;
    lv_count = (lp_slot + 1);
    for ( ; ( (auto85411229_ai >= 0 && lv_count <= auto85411229_ae) || (auto85411229_ai < 0 && lv_count >= auto85411229_ae) ) ; lv_count += auto85411229_ai ) {
        if ((lv_count <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
            lv_count1 = (lv_count - 1);
            libAHLI_gf_UpgradeNotificationsSetSlotData(lv_count1, libNtve_gf_DialogItemText(libAHLI_gv_upgradeNotifications.lv_itemName[lv_count], libAHLI_gv_obsID), (libNtve_gf_DialogItemImage(libAHLI_gv_upgradeNotifications.lv_itemIcon[lv_count], libAHLI_gv_obsID)), UnitGetOwner(libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count]), DialogControlIsVisible(libAHLI_gv_upgradeNotifications.lv_itemPanel[lv_count], libAHLI_gv_obsID), libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count]);
            libAHLI_gv_upgradeNotifications.lv_timerDestruction[lv_count1] = libAHLI_gv_upgradeNotifications.lv_timerDestruction[lv_count];
            libNtve_gf_SetDialogItemCurrentValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lv_count1], libNtve_gf_DialogItemValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lv_count], libAHLI_gv_obsID), libAHLI_gv_obs);
            libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_count1] = libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_count];
            libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lv_count1], libNtve_gf_DialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lv_count], libAHLI_gv_obsID), libAHLI_gv_obs);
            libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lv_count1], libNtve_gf_DialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], libAHLI_gv_obsID), libAHLI_gv_obs);
            lv_visible = DialogControlIsVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lv_count], libAHLI_gv_obsID);
            DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lv_count1], libAHLI_gv_obs, lv_visible);
            lv_visible = !(lv_visible);
            DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lv_count1], libAHLI_gv_obs, lv_visible);
        }
        else {
            if ((lv_count == lv_sLOT_MAX_INDEX1)) {
                lv_count1 = (lv_count - 1);
                lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count], 1, 1);
                lv_player = UnitGetOwner(libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count]);
                libAHLI_gf_UpgradeNotificationsSetSlotData(lv_count1, libAHLI_gf_UpgradeNotificationsUpgradeName(lv_upgrade), libAHLI_gf_IconofUpgrade(lv_upgrade, lv_player), lv_player, ((UnitQueueItemTime(libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count], c_unitQueueTimeRemaining, 1) / libAHLI_gv_gameSpeedFactor) <= libAHLI_gv_upgradeNotificationsVisibleTime), libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count]);
                libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_count1] = libAHLI_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
                libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lv_count1], StringToText(""), libAHLI_gv_obs);
                DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lv_count1], libAHLI_gv_obs, true);
                DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lv_count1], libAHLI_gv_obs, false);
                libAHLI_gv_upgradeNotifications.lv_timerDestruction[lv_count1] = TimerCreate();
            }

        }
        libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count1] = libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count];
    }
    libAHLI_gv_upgradeNotifications.lv_slotFacility[libAHLI_gv_upgradeNotifications.lv_slotLastUsed] = null;
    if ((libAHLI_gv_upgradeNotifications.lv_slotLastUsed <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
        libAHLI_gf_UpgradeNotificationsSetSlotData(libAHLI_gv_upgradeNotifications.lv_slotLastUsed, StringToText(""), "Assets\\Textures\\black.dds", libAHLI_gv_obsID, false, null);
        libAHLI_gv_upgradeNotifications.lv_slotStatus[libAHLI_gv_upgradeNotifications.lv_slotLastUsed] = libAHLI_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
        libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[libAHLI_gv_upgradeNotifications.lv_slotLastUsed], StringToText(""), libAHLI_gv_obs);
        libNtve_gf_SetDialogItemCurrentValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[libAHLI_gv_upgradeNotifications.lv_slotLastUsed], 0.0, libAHLI_gv_obs);
        libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[libAHLI_gv_upgradeNotifications.lv_slotLastUsed], StringToText(""), libAHLI_gv_obs);
        libAHLI_gv_upgradeNotifications.lv_timerDestruction[libAHLI_gv_upgradeNotifications.lv_slotLastUsed] = TimerCreate();
    }

    libAHLI_gv_upgradeNotifications.lv_slotLastUsed -= 1;
}

int libAHLI_gf_UpgradeNotificationsSearchFacilitySlot (unit lp_facility) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    int autoF6314835_ae;
    const int autoF6314835_ai = 1;

    // Variable Initialization

    // Implementation
    autoF6314835_ae = libAHLI_gv_upgradeNotifications.lv_slotLastUsed;
    lv_count = 0;
    for ( ; ( (autoF6314835_ai >= 0 && lv_count <= autoF6314835_ae) || (autoF6314835_ai < 0 && lv_count >= autoF6314835_ae) ) ; lv_count += autoF6314835_ai ) {
        if ((libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_count] == lp_facility) && ((lv_count > libAHLI_gv_upgradeNotificationsMaxUISlots) || (libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_count] == libAHLI_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade) || (libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_count] == libAHLI_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade))) {
            return lv_count;
        }

    }
    return -1;
}

text libAHLI_gf_UpgradeNotificationsUpgradeName (string lp_upgrade) {
    // Automatic Variable Declarations
    string autoCE61EBE2_val;
    string auto4FCB9578_val;

    // Implementation
    autoCE61EBE2_val = lp_upgrade;
    if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_141E0913");
    }
    else if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_701F2322");
    }
    else if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_E2743571");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_96B69A6D");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_0CBA1085");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_31C40A3F");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_C6B716E5");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_E81B983F");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_C60B48C7");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_DE31BCE5");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_5AA2CCE9");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_B8264F5F");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_087849CE");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_9209B1AF");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_7DDACA58");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_F4FDF319");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_2A6C4E76");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_2A50C857");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_29F77874");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_1F979E83");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_9B504B17");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_52112F4B");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_B5F759AB");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_FE6B18DF");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_BA3355B7");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_98A592CE");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_FD235555");
    }
    else if (autoCE61EBE2_val == "BansheeCloak") {
        return StringExternal("Param/Value/lib_AHLI_25348DDA");
    }
    else if (autoCE61EBE2_val == "PersonalCloaking") {
        return StringExternal("Param/Value/lib_AHLI_E15F370F");
    }
    else if (autoCE61EBE2_val == "TerranBuildingArmor") {
        return StringExternal("Param/Value/lib_AHLI_F70F87FB");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_034F71BF");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_D985C2E8");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_0B7D27AD");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_8F85CCDB");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_878C5739");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_546C78B1");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_9A47772A");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_304F7AF9");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_7E847181");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_5243C095");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_4F2FC09D");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_8B1D7D0E");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_0C7878FC");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_A9CE0D56");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_3726C408");
    }
    else {
    }
    auto4FCB9578_val = (lp_upgrade);
    if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel1") {
        return StringExternal("Param/Value/lib_AHLI_4D4D6280");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel2") {
        return StringExternal("Param/Value/lib_AHLI_0DB5DBE7");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel3") {
        return StringExternal("Param/Value/lib_AHLI_AE1A3D18");
    }
    else {
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Name", libAHLI_gv_obsID));
}

bool libAHLI_gf_UpgradeNotificationsUpgradeNeedsToBeVisible (fixed lp_remainingTime) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_remainingTime / libAHLI_gv_gameSpeedFactor) <= libAHLI_gv_upgradeNotificationsVisibleTime);
}

trigger auto_libAHLI_gf_UpgradeNotificationsUpdateUIthreaded_Trigger = null;

void libAHLI_gf_UpgradeNotificationsUpdateUIthreaded () {
    if (auto_libAHLI_gf_UpgradeNotificationsUpdateUIthreaded_Trigger == null) {
        auto_libAHLI_gf_UpgradeNotificationsUpdateUIthreaded_Trigger = TriggerCreate("auto_libAHLI_gf_UpgradeNotificationsUpdateUIthreaded_TriggerFunc");
    }

    TriggerExecute(auto_libAHLI_gf_UpgradeNotificationsUpdateUIthreaded_Trigger, false, false);
}

bool auto_libAHLI_gf_UpgradeNotificationsUpdateUIthreaded_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    int lv_swapTarget;

    // Automatic Variable Declarations
    int auto520A35AB_ae;
    const int auto520A35AB_ai = 1;

    // Variable Initialization
    lv_swapTarget = -1;

    // Implementation
    while ((libAHLI_gv_upgradeNotifications.lv_slotLastUsed >= 0)) {
        auto520A35AB_ae = libAHLI_gv_upgradeNotifications.lv_slotLastUsed;
        lv_slot = 0;
        for ( ; ( (auto520A35AB_ai >= 0 && lv_slot <= auto520A35AB_ae) || (auto520A35AB_ai < 0 && lv_slot >= auto520A35AB_ae) ) ; lv_slot += auto520A35AB_ai ) {
            if (((lv_slot > libAHLI_gv_upgradeNotificationsMaxUISlots) || (libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_slot] == libAHLI_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade)) && (((UnitQueueItemTime(libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_slot], c_unitQueueTimeRemaining, 1) / libAHLI_gv_gameSpeedFactor) <= libAHLI_gv_upgradeNotificationsVisibleTime) == true)) {
                if ((lv_slot <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
                    DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemPanel[lv_slot], libAHLI_gv_obs, true);
                    libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libAHLI_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade;
                }

                if ((lv_slot > 0) && (lv_slot > (lv_swapTarget + 1))) {
                    lv_swapTarget = libAHLI_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne((lv_swapTarget + 1), lv_slot);
                    if ((lv_swapTarget >= 0)) {
                        if ((lv_swapTarget <= libAHLI_gv_upgradeNotificationsMaxUISlots) && (lv_slot > libAHLI_gv_upgradeNotificationsMaxUISlots)) {
                            DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemPanel[lv_swapTarget], libAHLI_gv_obs, true);
                            libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_swapTarget] = libAHLI_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade;
                        }

                    }

                }

            }

            if ((lv_slot <= libAHLI_gv_upgradeNotificationsMaxUISlots) && (libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_slot] == libAHLI_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade)) {
                libAHLI_gf_UpgradeNotificationsUpdateProgressData(lv_slot);
            }

        }
        Wait(0.0625, c_timeGame);
        if ((libAHLI_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread >= 0)) {
            lv_swapTarget = (libAHLI_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread - 1);
            libAHLI_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread = -1;
        }

        Wait(0.0, c_timeGame);
    }
    libAHLI_gv_upgradeNotifications.lv_updateThreadRunning = false;
    return true;
}

void libAHLI_gf_UpgradeNotificationsSetStatusLabel (int lp_slot, text lp_status) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], libAHLI_gv_obs, false);
    DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], libAHLI_gv_obs, true);
    libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], lp_status, libAHLI_gv_obs);
}

void libAHLI_gf_UpgradeNotificationsSetSlotData (int lp_slot, text lp_name, string lp_icon, int lp_player, bool lp_visible, unit lp_facility) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemName[lp_slot], lp_name, libAHLI_gv_obs);
    libNtve_gf_SetDialogItemImage(libAHLI_gv_upgradeNotifications.lv_itemIcon[lp_slot], lp_icon, libAHLI_gv_obs);
    libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemPlayerIdLabel[lp_slot], IntToText(lp_player), libAHLI_gv_obs);
    libNtve_gf_SetDialogItemUnit(libAHLI_gv_upgradeNotifications.lv_itemUnitTargetFrame[lp_slot], lp_facility, libAHLI_gv_obs);
    DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemPanel[lp_slot], libAHLI_gv_obs, lp_visible);
}

int libAHLI_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne (int lp_minUncheckedSlot, int lp_slot) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    int auto5043F64A_ae;
    const int auto5043F64A_ai = 1;

    // Variable Initialization

    // Implementation
    auto5043F64A_ae = (lp_slot - 1);
    lv_count = lp_minUncheckedSlot;
    for ( ; ( (auto5043F64A_ai >= 0 && lv_count <= auto5043F64A_ae) || (auto5043F64A_ai < 0 && lv_count >= auto5043F64A_ae) ) ; lv_count += auto5043F64A_ai ) {
        if (((lv_count > libAHLI_gv_upgradeNotificationsMaxUISlots) || (libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_count] == libAHLI_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade) || (libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_count] == libAHLI_ge_UpgradeNotificationsSlotStatus_NoUpgrade))) {
            libAHLI_gf_UpgradeNotificationsSwapSlotInformation(lv_count, lp_slot);
            return lv_count;
        }

    }
    return -1;
}

void libAHLI_gf_UpgradeNotificationsSwapSlotInformation (int lp_slotA, int lp_slotB) {
    int init_i;

    // Variable Declarations
    int[2] lv_status;
    bool[2] lv_panelVisibility;
    bool[2] lv_timerLabelVisibility;
    bool[2] lv_statusLabelVisibility;
    text[2] lv_name;
    string[2] lv_icon;
    int[2] lv_player;
    fixed[2] lv_value;
    timer[2] lv_timer;
    unit[2] lv_facility;
    unit lv_unit;
    string lv_upgrade;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_status[init_i] = libAHLI_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_timerLabelVisibility[init_i] = true;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_icon[init_i] = "Assets\\Textures\\blank.dds";
    }

    // Implementation
    if ((lp_slotA <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[0] = libAHLI_gv_upgradeNotifications.lv_slotStatus[lp_slotA];
        lv_panelVisibility[0] = DialogControlIsVisible(libAHLI_gv_upgradeNotifications.lv_itemPanel[lp_slotA], libAHLI_gv_obsID);
        lv_timerLabelVisibility[0] = DialogControlIsVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lp_slotA], libAHLI_gv_obsID);
        lv_statusLabelVisibility[0] = DialogControlIsVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lp_slotA], libAHLI_gv_obsID);
        lv_name[0] = libNtve_gf_DialogItemText(libAHLI_gv_upgradeNotifications.lv_itemName[lp_slotA], libAHLI_gv_obsID);
        lv_icon[0] = (libNtve_gf_DialogItemImage(libAHLI_gv_upgradeNotifications.lv_itemIcon[lp_slotA], libAHLI_gv_obsID));
        lv_value[0] = libNtve_gf_DialogItemValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], libAHLI_gv_obsID);
        lv_timer[0] = libAHLI_gv_upgradeNotifications.lv_timerDestruction[lp_slotA];
        lv_facility[0] = libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotA];
        lv_player[0] = UnitGetOwner(libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotA]);
    }
    else {
        lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotA], 1, 1);
        lv_status[0] = libAHLI_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
        lv_timer[0] = TimerCreate();
        lv_facility[0] = libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotA];
        lv_player[0] = UnitGetOwner(libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotA]);
        lv_name[0] = libAHLI_gf_UpgradeNotificationsUpgradeName(lv_upgrade);
        lv_icon[0] = libAHLI_gf_IconofUpgrade(lv_upgrade, lv_player[0]);
    }
    if ((lp_slotB <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[1] = libAHLI_gv_upgradeNotifications.lv_slotStatus[lp_slotB];
        lv_panelVisibility[1] = DialogControlIsVisible(libAHLI_gv_upgradeNotifications.lv_itemPanel[lp_slotB], libAHLI_gv_obsID);
        lv_timerLabelVisibility[1] = DialogControlIsVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lp_slotB], libAHLI_gv_obsID);
        lv_statusLabelVisibility[1] = DialogControlIsVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lp_slotB], libAHLI_gv_obsID);
        lv_name[1] = libNtve_gf_DialogItemText(libAHLI_gv_upgradeNotifications.lv_itemName[lp_slotB], libAHLI_gv_obsID);
        lv_icon[1] = (libNtve_gf_DialogItemImage(libAHLI_gv_upgradeNotifications.lv_itemIcon[lp_slotB], libAHLI_gv_obsID));
        lv_value[1] = libNtve_gf_DialogItemValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], libAHLI_gv_obsID);
        lv_timer[1] = libAHLI_gv_upgradeNotifications.lv_timerDestruction[lp_slotB];
        lv_facility[1] = libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotB];
        lv_player[1] = UnitGetOwner(libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotB]);
    }
    else {
        lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotB], 1, 1);
        lv_status[1] = libAHLI_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
        lv_timer[1] = TimerCreate();
        lv_facility[1] = libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotB];
        lv_player[1] = UnitGetOwner(libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotB]);
        lv_name[1] = libAHLI_gf_UpgradeNotificationsUpgradeName(lv_upgrade);
        lv_icon[1] = libAHLI_gf_IconofUpgrade(lv_upgrade, lv_player[1]);
    }
    if ((lp_slotA <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
        libAHLI_gv_upgradeNotifications.lv_slotStatus[lp_slotA] = lv_status[1];
        libAHLI_gf_UpgradeNotificationsSetSlotData(lp_slotA, lv_name[1], lv_icon[1], lv_player[1], lv_panelVisibility[1], lv_facility[1]);
        libNtve_gf_SetDialogItemCurrentValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], lv_value[1], libAHLI_gv_obs);
        libAHLI_gv_upgradeNotifications.lv_timerDestruction[lp_slotA] = lv_timer[1];
        DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lp_slotA], libAHLI_gv_obs, lv_statusLabelVisibility[1]);
        DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lp_slotA], libAHLI_gv_obs, lv_timerLabelVisibility[1]);
    }

    if ((lp_slotB <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
        libAHLI_gv_upgradeNotifications.lv_slotStatus[lp_slotB] = lv_status[0];
        libAHLI_gf_UpgradeNotificationsSetSlotData(lp_slotB, lv_name[0], lv_icon[0], lv_player[0], lv_panelVisibility[0], lv_facility[0]);
        libNtve_gf_SetDialogItemCurrentValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], lv_value[0], libAHLI_gv_obs);
        libAHLI_gv_upgradeNotifications.lv_timerDestruction[lp_slotB] = lv_timer[0];
        DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lp_slotB], libAHLI_gv_obs, lv_statusLabelVisibility[0]);
        DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lp_slotB], libAHLI_gv_obs, lv_timerLabelVisibility[0]);
    }

    lv_unit = libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotA];
    libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotA] = libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotB];
    libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slotB] = lv_unit;
}

void libAHLI_gf_UpgradeNotificationsUpdateProgressData (int lp_slot) {
    // Variable Declarations
    fixed lv_remainingTime;
    int lv_remainingSeconds;
    int lv_remainingMilliseconds;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_remainingTime = (UnitQueueItemTime(libAHLI_gv_upgradeNotifications.lv_slotFacility[lp_slot], c_unitQueueTimeRemaining, 1) / libAHLI_gv_gameSpeedFactor);
    lv_remainingSeconds = TruncI(lv_remainingTime);
    lv_remainingMilliseconds = TruncI(((lv_remainingTime - lv_remainingSeconds) * 10.0));

    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lp_slot], (libAHLI_gv_upgradeNotificationsVisibleTime - lv_remainingTime), libAHLI_gv_obs);
    libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], (IntToText(lv_remainingSeconds) + (StringExternal("Param/Value/lib_AHLI_28BC4DAB") + ((StringExternal("Param/Value/lib_AHLI_ACE1CF8C") + IntToText(lv_remainingMilliseconds)) + StringExternal("Param/Value/lib_AHLI_25E0C402")))), libAHLI_gv_obs);
}

bool libAHLI_gf_WorkersKilledNotificationsIsinDistanceofMainBuilding (point lp_point, int lp_player, fixed lp_distance) {
    // Variable Declarations
    unit lv_unit;
    string lv_unitType;

    // Automatic Variable Declarations
    unitgroup auto07402EB3_g;
    int auto07402EB3_u;

    // Variable Initialization

    // Implementation
    auto07402EB3_g = UnitGroup(null, lp_player, RegionCircle(lp_point, lp_distance), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
    auto07402EB3_u = UnitGroupCount(auto07402EB3_g, c_unitCountAll);
    for (;; auto07402EB3_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto07402EB3_g, auto07402EB3_u);
        if (lv_unit == null) { break; }
        lv_unitType = UnitGetType(lv_unit);
        if (((lv_unitType == "Hatchery") || (lv_unitType == "Nexus") || (lv_unitType == "OrbitalCommand") || (lv_unitType == "PlanetaryFortress") || (lv_unitType == "Hive") || (lv_unitType == "Lair") || (lv_unitType == "CommandCenter") || (lv_unitType == "OrbitalCommandFlying") || (lv_unitType == "CommandCenterFlying"))) {
            return true;
        }

    }
    return false;
}

bool libAHLI_gf_MapNotificationsCargoUnitshaveFullHealth (unit lp_transportunit) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto2F0AA83D_g;
    int auto2F0AA83D_u;

    // Variable Initialization

    // Implementation
    auto2F0AA83D_g = UnitCargoGroup(lp_transportunit);
    auto2F0AA83D_u = UnitGroupCount(auto2F0AA83D_g, c_unitCountAll);
    for (;; auto2F0AA83D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2F0AA83D_g, auto2F0AA83D_u);
        if (lv_unit == null) { break; }
        if (((UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) != 100.0) || (UnitGetPropertyFixed(lv_unit, c_unitPropShieldsPercent, c_unitPropCurrent) != 100.0))) {
            return false;
        }

    }
    return true;
}

void libAHLI_gf_BattleReportMorphCanceled (string lp_morphTargetUnitType, string lp_baseOrIntermediatehUnitType, int lp_player, string lp_ability) {
    // Variable Declarations
    int lv_mineralsCost;
    int lv_vespeneCost;
    string lv_baseUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_baseUnitType = lp_baseOrIntermediatehUnitType;

    // Implementation
    if ((lp_baseOrIntermediatehUnitType == "BanelingCocoon")) {
        lv_baseUnitType = "Zergling";
    }
    else {
        if ((lv_baseUnitType == "RavagerCocoon")) {
            lv_baseUnitType = "Roach";
        }
        else {
            if ((lv_baseUnitType == "BroodLordCocoon")) {
                lv_baseUnitType = "Corruptor";
            }
            else {
                if ((lv_baseUnitType == "LurkerMPEgg")) {
                    lv_baseUnitType = "Hydralisk";
                }
                else {
                    if (((lv_baseUnitType == "OverlordCocoon") || (lv_baseUnitType == "TransportOverlordCocoon"))) {
                        lv_baseUnitType = "Overlord";
                    }

                }
            }
        }
    }
    lv_mineralsCost += CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_morphTargetUnitType, "CostResource[" + IntToString(0) + "]", lp_player);
    lv_vespeneCost += CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_morphTargetUnitType, "CostResource[" + IntToString(1) + "]", lp_player);
    lv_mineralsCost += CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, "Cost.Resource[" + IntToString(0) + "]", lp_player);
    lv_vespeneCost += CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, "Cost.Resource[" + IntToString(1) + "]", lp_player);
    lv_mineralsCost -= CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_baseUnitType, "CostResource[" + IntToString(0) + "]", lp_player);
    lv_vespeneCost -= CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_baseUnitType, "CostResource[" + IntToString(1) + "]", lp_player);
    lv_mineralsCost /= 4;
    lv_vespeneCost /= 4;
    if (((lv_mineralsCost > 0) || (lv_vespeneCost > 0))) {
        libAHLI_gf_BattleReportIncrementResourceDamage(libAHLI_gf_BattleReportGetPlayerSideIndex(lp_player), lv_mineralsCost, lv_vespeneCost);
    }

}

int libAHLI_gf_BattleReportGetPlayerSideIndex (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_player == libAHLI_gv_battleReport.lv_playerIdSide[0])) {
        return 0;
    }
    else {
        if ((lp_player == libAHLI_gv_battleReport.lv_playerIdSide[1])) {
            return 1;
        }
        else {
            return -1;
        }
    }
}

int libAHLI_gf_BattleReportGetOpposingPlayerSideIndex (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_player == libAHLI_gv_battleReport.lv_playerIdSide[0])) {
        return 1;
    }
    else {
        if ((lp_player == libAHLI_gv_battleReport.lv_playerIdSide[1])) {
            return 0;
        }
        else {
            return -1;
        }
    }
}

bool libAHLI_gf_BattleReportHasBattleStarted () {
    // Automatic Variable Declarations
    // Implementation
    return libAHLI_gv_battleReport.lv_battleActive;
}

bool libAHLI_gf_BattleReportIsTrackedUnitType (unit lp_unit, string lp_unitType, bool lp_deathTypeIsTimeout) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitTypeTestFlag(lp_unitType, c_unitFlagNoScore) == false) || (((lp_unitType == "MULE") || (lp_unitType == "AutoTurret")) && (lp_deathTypeIsTimeout == false)) || (lp_unitType == "BanelingCocoon") || (lp_unitType == "RavagerCocoon") || (lp_unitType == "BroodLordCocoon") || (lp_unitType == "TransportOverlordCocoon") || (lp_unitType == "LurkerMPEgg") || (lp_unitType == "OverlordCocoon")) && (UnitHasBehavior2(lp_unit, "Hallucination") == false) && ((UnitTypeTestAttribute(lp_unitType, c_unitAttributeStructure) == false) || (lp_unitType == "SpineCrawler") || (lp_unitType == "SpineCrawlerUprooted") || (lp_unitType == "SporeCrawler") || (lp_unitType == "SporeCrawlerUprooted") || (lp_unitType == "PhotonCannon") || (lp_unitType == "MissileTurret") || (lp_unitType == "PlanetaryFortress") || (lp_unitType == "ShieldBattery") || (lp_unitType == "Bunker") || (lp_unitType == "AutoTurret")) && (lp_unitType != "ParasiticBombDummy") && (libNtve_gf_UnitIsUnderConstruction(lp_unit) == false)) {
        return true;
    }
    else {
        return false;
    }
}

void libAHLI_gf_BattleReportStartBattle () {
    // Automatic Variable Declarations
    // Implementation
    libAHLI_gv_battleReport.lv_battleNr += 1;
    libAHLI_gv_battleReport.lv_battleActive = true;
    TimerStart(libAHLI_gv_battleReport.lv_battleEndingTimer, libAHLI_gv_battleReportBattleEndingTimerGameTimeDuration, false, c_timeGame);
    libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded(libAHLI_gv_battleReport.lv_battleNr);
    libAHLI_gv_battleReport.lv_updateDueToAbilityAll = true;
    libAHLI_gv_battleReport.lv_updateDueToDamage = true;
    libAHLI_gv_battleReport.lv_updateDueToDeathAll = true;
    libAHLI_gv_battleReport.lv_resetUnusedSlots = true;
    libAHLI_gf_BattleReportUpdateUIthreaded(libAHLI_gv_battleReport.lv_battleNr);
    if ((libAHLI_gv_battleReport.lv_noUiUpdates == false)) {
        DialogControlSetEnabled(libAHLI_gv_battleReport.lv_uiBattleActiveIndicator, libAHLI_gv_obs, true);
    }

}

trigger auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_Trigger = null;
int auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_lp_battleNr;

void libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded (int lp_battleNr) {
    auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_lp_battleNr = lp_battleNr;

    if (auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_Trigger == null) {
        auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_Trigger = TriggerCreate("auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_TriggerFunc");
    }

    TriggerExecute(auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_Trigger, false, false);
}

bool auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_TriggerFunc (bool testConds, bool runActions) {
    int lp_battleNr = auto_libAHLI_gf_BattleReportStartBattleActiveDurationCounterthreaded_lp_battleNr;

    // Variable Declarations
    text lv_format;
    bool lv_hourFormatSet;
    int lv_seconds;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_format = StringToText("<min/>:<sec2/>");

    // Implementation
    Wait(0.25, c_timeGame);
    Wait(0.0, c_timeGame);
    while ((libAHLI_gv_battleReport.lv_battleActive == true) && (libAHLI_gv_battleReport.lv_battleNr == lp_battleNr)) {
        libAHLI_gv_battleReport.lv_battleGameTimeDuration += 0.25;
        if ((libAHLI_gv_battleReport.lv_noUiUpdates == false)) {
            lv_seconds = FixedToInt((libAHLI_gv_battleReport.lv_battleGameTimeDuration / libAHLI_gv_gameSpeedFactor));
            if ((lv_seconds >= 3600) && (lv_hourFormatSet == false)) {
                lv_format = StringToText("<hour/>:<min2/>:<sec2/>");
                lv_hourFormatSet = true;
            }

            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReport.lv_uiBattleDurationLabel, TextTimeFormat(lv_format, lv_seconds), libAHLI_gv_obs);
        }

        Wait(0.25, c_timeGame);
        Wait(0.0, c_timeGame);
    }
    return true;
}

trigger auto_libAHLI_gf_BattleReportUpdateUIthreaded_Trigger = null;
int auto_libAHLI_gf_BattleReportUpdateUIthreaded_lp_battleNr;

void libAHLI_gf_BattleReportUpdateUIthreaded (int lp_battleNr) {
    auto_libAHLI_gf_BattleReportUpdateUIthreaded_lp_battleNr = lp_battleNr;

    if (auto_libAHLI_gf_BattleReportUpdateUIthreaded_Trigger == null) {
        auto_libAHLI_gf_BattleReportUpdateUIthreaded_Trigger = TriggerCreate("auto_libAHLI_gf_BattleReportUpdateUIthreaded_TriggerFunc");
    }

    TriggerExecute(auto_libAHLI_gf_BattleReportUpdateUIthreaded_Trigger, false, false);
}

bool auto_libAHLI_gf_BattleReportUpdateUIthreaded_TriggerFunc (bool testConds, bool runActions) {
    int lp_battleNr = auto_libAHLI_gf_BattleReportUpdateUIthreaded_lp_battleNr;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((libAHLI_gv_battleReport.lv_battleActive == true) && (libAHLI_gv_battleReport.lv_battleNr == lp_battleNr)) {
        if ((libAHLI_gv_battleReport.lv_resetBattleEndingTimer == true)) {
            TimerRestart(libAHLI_gv_battleReport.lv_battleEndingTimer);
            libAHLI_gv_battleReport.lv_resetBattleEndingTimer = false;
        }

        if ((libAHLI_gv_battleReport.lv_noUiUpdates == false)) {
            libAHLI_gf_BattleReportUpdateUI();
        }

        Wait(0.0625, c_timeGame);
        Wait(0.0, c_timeGame);
    }
    return true;
}

void libAHLI_gf_BattleReportUpdateUI () {
    // Variable Declarations
    int lv_i;
    fixed lv_sumReal;
    int lv_sumInt;

    // Automatic Variable Declarations
    int auto7E2F46BA_ae;
    const int auto7E2F46BA_ai = 1;
    int autoF4594E09_ae;
    const int autoF4594E09_ai = 1;
    int autoA015D1F4_ae;
    const int autoA015D1F4_ai = 1;
    int auto4212D67E_ae;
    const int auto4212D67E_ai = 1;
    int autoB80AC4D7_ae;
    const int autoB80AC4D7_ai = 1;
    int autoCF687230_ae;
    const int autoCF687230_ai = 1;
    int auto7E4C022F_ae;
    const int auto7E4C022F_ai = 1;
    int auto2388C6E5_ae;
    const int auto2388C6E5_ai = 1;
    const int autoD0681C78_ae = libAHLI_gv_battleReportMaxKilledUnitTypeSlot;
    const int autoD0681C78_ai = 1;
    const int auto0AAA4E73_ae = libAHLI_gv_battleReportMaxKilledUnitTypeSlot;
    const int auto0AAA4E73_ai = 1;
    const int auto9FFC5773_ae = libAHLI_gv_battleReportMaxAbilitySlot;
    const int auto9FFC5773_ai = 1;
    const int auto1B54F350_ae = libAHLI_gv_battleReportMaxAbilitySlot;
    const int auto1B54F350_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libAHLI_gv_battleReport.lv_updateDueToDeathOnlyLabels == true) || (libAHLI_gv_battleReport.lv_updateDueToDeathAll == true))) {
        auto7E2F46BA_ae = libAHLI_gv_battleReportSideData[0].lv_killedUnitTypeLastUsedSlot;
        lv_i = 0;
        for ( ; ( (auto7E2F46BA_ai >= 0 && lv_i <= auto7E2F46BA_ae) || (auto7E2F46BA_ai < 0 && lv_i >= auto7E2F46BA_ae) ) ; lv_i += auto7E2F46BA_ai ) {
            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i], IntToText(libAHLI_gv_battleReportSideData[0].lv_killedUnitTypeCount[lv_i]), libAHLI_gv_obs);
        }
        autoF4594E09_ae = libAHLI_gv_battleReportSideData[1].lv_killedUnitTypeLastUsedSlot;
        lv_i = 0;
        for ( ; ( (autoF4594E09_ai >= 0 && lv_i <= autoF4594E09_ae) || (autoF4594E09_ai < 0 && lv_i >= autoF4594E09_ae) ) ; lv_i += autoF4594E09_ai ) {
            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i], IntToText(libAHLI_gv_battleReportSideData[1].lv_killedUnitTypeCount[lv_i]), libAHLI_gv_obs);
        }
        libAHLI_gv_battleReport.lv_updateDueToDeathOnlyLabels = false;
    }

    if ((libAHLI_gv_battleReport.lv_updateDueToDeathAll == true)) {
        autoA015D1F4_ae = libAHLI_gv_battleReportSideData[0].lv_killedUnitTypeLastUsedSlot;
        lv_i = 0;
        for ( ; ( (autoA015D1F4_ai >= 0 && lv_i <= autoA015D1F4_ae) || (autoA015D1F4_ai < 0 && lv_i >= autoA015D1F4_ae) ) ; lv_i += autoA015D1F4_ai ) {
            libNtve_gf_SetDialogItemImage(libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i], libAHLI_gv_battleReportSideData[0].lv_killedUnitTypeIcon[lv_i], libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage2(libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i], libAHLI_gv_battleReportSideData[0].lv_killedUnitTypeIcon[lv_i], libAHLI_gv_obs);
            libNtve_gf_SetDialogItemTooltip(libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i], libAHLI_gv_battleReportSideData[0].lv_killedUnitTypeName[lv_i], libAHLI_gv_obs);
        }
        auto4212D67E_ae = libAHLI_gv_battleReportSideData[1].lv_killedUnitTypeLastUsedSlot;
        lv_i = 0;
        for ( ; ( (auto4212D67E_ai >= 0 && lv_i <= auto4212D67E_ae) || (auto4212D67E_ai < 0 && lv_i >= auto4212D67E_ae) ) ; lv_i += auto4212D67E_ai ) {
            libNtve_gf_SetDialogItemImage(libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i], libAHLI_gv_battleReportSideData[1].lv_killedUnitTypeIcon[lv_i], libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage2(libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i], libAHLI_gv_battleReportSideData[1].lv_killedUnitTypeIcon[lv_i], libAHLI_gv_obs);
            libNtve_gf_SetDialogItemTooltip(libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i], libAHLI_gv_battleReportSideData[1].lv_killedUnitTypeName[lv_i], libAHLI_gv_obs);
        }
        libAHLI_gv_battleReport.lv_updateDueToDeathAll = false;
    }

    if (((libAHLI_gv_battleReport.lv_updateDueToAbilityOnlyLabels == true) || (libAHLI_gv_battleReport.lv_updateDueToAbilityAll == true))) {
        autoB80AC4D7_ae = libAHLI_gv_battleReportSideData[0].lv_abilitiesCastedLastUsedSlot;
        lv_i = 0;
        for ( ; ( (autoB80AC4D7_ai >= 0 && lv_i <= autoB80AC4D7_ae) || (autoB80AC4D7_ai < 0 && lv_i >= autoB80AC4D7_ae) ) ; lv_i += autoB80AC4D7_ai ) {
            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i], IntToText(libAHLI_gv_battleReportSideData[0].lv_abilitiesCastedCount[lv_i]), libAHLI_gv_obs);
        }
        autoCF687230_ae = libAHLI_gv_battleReportSideData[1].lv_abilitiesCastedLastUsedSlot;
        lv_i = 0;
        for ( ; ( (autoCF687230_ai >= 0 && lv_i <= autoCF687230_ae) || (autoCF687230_ai < 0 && lv_i >= autoCF687230_ae) ) ; lv_i += autoCF687230_ai ) {
            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i], IntToText(libAHLI_gv_battleReportSideData[1].lv_abilitiesCastedCount[lv_i]), libAHLI_gv_obs);
        }
        libAHLI_gv_battleReport.lv_updateDueToAbilityOnlyLabels = false;
    }

    if ((libAHLI_gv_battleReport.lv_updateDueToAbilityAll == true)) {
        auto7E4C022F_ae = libAHLI_gv_battleReportSideData[0].lv_abilitiesCastedLastUsedSlot;
        lv_i = 0;
        for ( ; ( (auto7E4C022F_ai >= 0 && lv_i <= auto7E4C022F_ae) || (auto7E4C022F_ai < 0 && lv_i >= auto7E4C022F_ae) ) ; lv_i += auto7E4C022F_ai ) {
            libNtve_gf_SetDialogItemImage(libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i], libAHLI_gv_battleReportSideData[0].lv_abilitiesCastedIcon[lv_i], libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage2(libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i], libAHLI_gv_battleReportSideData[0].lv_abilitiesCastedIcon[lv_i], libAHLI_gv_obs);
            libNtve_gf_SetDialogItemTooltip(libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i], libAHLI_gv_battleReportSideData[0].lv_abilitiesCastedName[lv_i], libAHLI_gv_obs);
        }
        auto2388C6E5_ae = libAHLI_gv_battleReportSideData[1].lv_abilitiesCastedLastUsedSlot;
        lv_i = 0;
        for ( ; ( (auto2388C6E5_ai >= 0 && lv_i <= auto2388C6E5_ae) || (auto2388C6E5_ai < 0 && lv_i >= auto2388C6E5_ae) ) ; lv_i += auto2388C6E5_ai ) {
            libNtve_gf_SetDialogItemImage(libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i], libAHLI_gv_battleReportSideData[1].lv_abilitiesCastedIcon[lv_i], libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage2(libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i], libAHLI_gv_battleReportSideData[1].lv_abilitiesCastedIcon[lv_i], libAHLI_gv_obs);
            libNtve_gf_SetDialogItemTooltip(libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i], libAHLI_gv_battleReportSideData[1].lv_abilitiesCastedName[lv_i], libAHLI_gv_obs);
        }
        libAHLI_gv_battleReport.lv_updateDueToAbilityAll = false;
    }

    if ((libAHLI_gv_battleReport.lv_updateDueToDamage == true)) {
        lv_sumReal = (libAHLI_gv_battleReportSideData[0].lv_damageDealt + libAHLI_gv_battleReportSideData[1].lv_damageDealt);
        if ((lv_sumReal != 0.0)) {
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportDamageDealtPercent", ((libAHLI_gv_battleReportSideData[0].lv_damageDealt / lv_sumReal) * 100.0));
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportDamageDealtPercent", ((libAHLI_gv_battleReportSideData[1].lv_damageDealt / lv_sumReal) * 100.0));
        }
        else {
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportDamageDealtPercent", 0.0);
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportDamageDealtPercent", 0.0);
        }
        PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportDamageDealtTotal", lv_sumReal);
        PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportDamageDealtTotal", lv_sumReal);
        PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportDamageDealt", libAHLI_gv_battleReportSideData[0].lv_damageDealt);
        PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportDamageDealt", libAHLI_gv_battleReportSideData[1].lv_damageDealt);
        libAHLI_gv_battleReport.lv_updateDueToDamage = false;
    }

    if ((libAHLI_gv_battleReport.lv_updateDueToDeathResources == true)) {
        lv_sumInt = (libAHLI_gv_battleReportSideData[0].lv_resourcesDestroyed[0] + libAHLI_gv_battleReportSideData[1].lv_resourcesDestroyed[0]);
        if ((lv_sumInt != 0)) {
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportMineralsDestroyedPercent", ((libAHLI_gv_battleReportSideData[0].lv_resourcesDestroyed[0] / IntToFixed(lv_sumInt)) * 100.0));
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportMineralsDestroyedPercent", ((libAHLI_gv_battleReportSideData[1].lv_resourcesDestroyed[0] / IntToFixed(lv_sumInt)) * 100.0));
        }
        else {
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportMineralsDestroyedPercent", 0.0);
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportMineralsDestroyedPercent", 0.0);
        }
        PlayerScoreValueSetFromInt(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportMineralsDestroyedTotal", lv_sumInt);
        PlayerScoreValueSetFromInt(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportMineralsDestroyedTotal", lv_sumInt);
        lv_sumInt = (libAHLI_gv_battleReportSideData[0].lv_resourcesDestroyed[1] + libAHLI_gv_battleReportSideData[1].lv_resourcesDestroyed[1]);
        if ((lv_sumInt != 0)) {
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportVespeneDestroyedPercent", ((libAHLI_gv_battleReportSideData[0].lv_resourcesDestroyed[1] / IntToFixed(lv_sumInt)) * 100.0));
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportVespeneDestroyedPercent", ((libAHLI_gv_battleReportSideData[1].lv_resourcesDestroyed[1] / IntToFixed(lv_sumInt)) * 100.0));
        }
        else {
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportVespeneDestroyedPercent", 0.0);
            PlayerScoreValueSetFromFixed(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportVespeneDestroyedPercent", 0.0);
        }
        PlayerScoreValueSetFromInt(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportVespeneDestroyedTotal", lv_sumInt);
        PlayerScoreValueSetFromInt(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportVespeneDestroyedTotal", lv_sumInt);
        PlayerScoreValueSetFromInt(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportMineralsDestroyed", libAHLI_gv_battleReportSideData[0].lv_resourcesDestroyed[0]);
        PlayerScoreValueSetFromInt(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportMineralsDestroyed", libAHLI_gv_battleReportSideData[1].lv_resourcesDestroyed[0]);
        PlayerScoreValueSetFromInt(libAHLI_gv_battleReport.lv_playerIdSide[0], "BattleReportVespeneDestroyed", libAHLI_gv_battleReportSideData[0].lv_resourcesDestroyed[1]);
        PlayerScoreValueSetFromInt(libAHLI_gv_battleReport.lv_playerIdSide[1], "BattleReportVespeneDestroyed", libAHLI_gv_battleReportSideData[1].lv_resourcesDestroyed[1]);
        libAHLI_gv_battleReport.lv_updateDueToDeathResources = false;
    }

    if ((libAHLI_gv_battleReport.lv_resetUnusedSlots == true)) {
        lv_i = (libAHLI_gv_battleReportSideData[0].lv_killedUnitTypeLastUsedSlot + 1);
        for ( ; ( (autoD0681C78_ai >= 0 && lv_i <= autoD0681C78_ae) || (autoD0681C78_ai < 0 && lv_i >= autoD0681C78_ae) ) ; lv_i += autoD0681C78_ai ) {
            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i], null, libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage(libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i], "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage2(libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i], "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            libNtve_gf_SetDialogItemTooltip(libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i], null, libAHLI_gv_obs);
        }
        lv_i = (libAHLI_gv_battleReportSideData[1].lv_killedUnitTypeLastUsedSlot + 1);
        for ( ; ( (auto0AAA4E73_ai >= 0 && lv_i <= auto0AAA4E73_ae) || (auto0AAA4E73_ai < 0 && lv_i >= auto0AAA4E73_ae) ) ; lv_i += auto0AAA4E73_ai ) {
            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i], null, libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage(libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i], "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage2(libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i], "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            libNtve_gf_SetDialogItemTooltip(libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i], null, libAHLI_gv_obs);
        }
        lv_i = (libAHLI_gv_battleReportSideData[0].lv_abilitiesCastedLastUsedSlot + 1);
        for ( ; ( (auto9FFC5773_ai >= 0 && lv_i <= auto9FFC5773_ae) || (auto9FFC5773_ai < 0 && lv_i >= auto9FFC5773_ae) ) ; lv_i += auto9FFC5773_ai ) {
            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i], null, libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage(libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i], "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage2(libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i], "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            libNtve_gf_SetDialogItemTooltip(libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i], null, libAHLI_gv_obs);
        }
        lv_i = (libAHLI_gv_battleReportSideData[1].lv_abilitiesCastedLastUsedSlot + 1);
        for ( ; ( (auto1B54F350_ai >= 0 && lv_i <= auto1B54F350_ae) || (auto1B54F350_ai < 0 && lv_i >= auto1B54F350_ae) ) ; lv_i += auto1B54F350_ai ) {
            libNtve_gf_SetDialogItemText(libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i], null, libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage(libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i], "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            libNtve_gf_SetDialogItemImage2(libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i], "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            libNtve_gf_SetDialogItemTooltip(libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i], null, libAHLI_gv_obs);
        }
        libAHLI_gv_battleReport.lv_resetUnusedSlots = false;
    }

}

void libAHLI_gf_BattleReportResetBattleEndingTimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerRestart(libAHLI_gv_battleReport.lv_battleEndingTimer);
}

void libAHLI_gf_BattleReportIncrementDamage (int lp_sideIndex, fixed lp_damage) {
    // Automatic Variable Declarations
    // Implementation
    libAHLI_gv_battleReportSideData[lp_sideIndex].lv_damageDealt += lp_damage;
}

void libAHLI_gf_BattleReportIncrementAbilityUsage (int lp_sideIndex, abilcmd lp_abilityCommand) {
    // Variable Declarations
    int lv_slot;
    int lv_lastUsedSlot;
    string lv_ability;
    abilcmd lv_abilityCmd;

    // Automatic Variable Declarations
    int autoC63ED29B_ae;
    const int autoC63ED29B_ai = 1;

    // Variable Initialization
    lv_lastUsedSlot = libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedLastUsedSlot;
    lv_abilityCmd = lp_abilityCommand;

    // Implementation
    if ((lp_abilityCommand == AbilityCommand("StimpackMarauder", 0))) {
        lv_abilityCmd = AbilityCommand("Stimpack", 0);
    }
    else {
        if (((lp_abilityCommand == AbilityCommand("HallucinationOracle", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationAdept", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationColossus", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationDisruptor", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationHighTemplar", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationImmortal", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationPhoenix", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationProbe", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationStalker", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationVoidRay", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationWarpPrism", 0)) || (lp_abilityCommand == AbilityCommand("HallucinationZealot", 0)))) {
            lv_abilityCmd = AbilityCommand("HallucinationArchon", 0);
        }

    }
    autoC63ED29B_ae = lv_lastUsedSlot;
    lv_slot = 0;
    for ( ; ( (autoC63ED29B_ai >= 0 && lv_slot <= autoC63ED29B_ae) || (autoC63ED29B_ai < 0 && lv_slot >= autoC63ED29B_ae) ) ; lv_slot += autoC63ED29B_ai ) {
        if ((lv_abilityCmd == libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCasted[lv_slot])) {
            libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedCount[lv_slot] += 1;
            libAHLI_gv_battleReport.lv_updateDueToAbilityOnlyLabels = true;
            return ;
        }

    }
    if ((lv_lastUsedSlot < libAHLI_gv_battleReportMaxAbilitySlot)) {
        lv_lastUsedSlot += 1;
        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCasted[lv_lastUsedSlot] = lv_abilityCmd;
        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedCount[lv_lastUsedSlot] = 1;
        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedLastUsedSlot += 1;
        libAHLI_gv_battleReport.lv_updateDueToAbilityAll = true;
        lv_ability = (AbilityCommandGetAbility(lp_abilityCommand));
        if ((lv_abilityCmd == AbilityCommand("Stimpack", 0))) {
            libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-ability-terran-stimpack-color.dds";
            libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Abil/Name/Stimpack");
        }
        else {
            if ((lv_abilityCmd == AbilityCommand("BuildAutoTurret", 0))) {
                libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-building-terran-autoturret.dds";
                libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Unit/Name/AutoTurret");
            }
            else {
                if ((lv_abilityCmd == AbilityCommand("HallucinationArchon", 0))) {
                    libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-ability-protoss-hallucination-color.dds";
                    libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Button/Name/Hallucination");
                }
                else {
                    if ((lv_abilityCmd == AbilityCommand("OracleWeapon", 0))) {
                        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-ability-protoss-oraclepulsarcannonon.dds";
                        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Button/Name/OracleWeaponOn");
                    }
                    else {
                        if ((lv_abilityCmd == AbilityCommand("Yoink", 0))) {
                            libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-ability-zerg-abduct.dds";
                            libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Button/Name/FaceEmbrace");
                        }
                        else {
                            if ((lv_abilityCmd == AbilityCommand("OracleStasisTrapBuild", 0))) {
                                libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-ability-protoss-oracle-stasisward.dds";
                                libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Button/Name/OracleBuildStasisTrap");
                            }
                            else {
                                if ((lv_abilityCmd == AbilityCommand("TacNukeStrike", 0))) {
                                    libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds";
                                    libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Button/Name/NukeCalldown");
                                }
                                else {
                                    if ((lv_abilityCmd == AbilityCommand("ViperConsumeStructure", 0))) {
                                        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-ability-zerg-consume.dds";
                                        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Button/Name/ViperConsume");
                                    }
                                    else {
                                        if ((lv_abilityCmd == AbilityCommand("SpawnLocustsTargeted", 0))) {
                                            libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\btn-unit-zerg-locust.dds";
                                            libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal("Button/Name/SwarmHost");
                                        }
                                        else {
                                            if ((CatalogEntryIsValid(c_gameCatalogButton, lv_ability) == true)) {
                                                libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = (CatalogFieldValueGet(c_gameCatalogButton, lv_ability, "Icon", libAHLI_gv_obsID));
                                                libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_ability, "Name", c_playerAny));
                                            }
                                            else {
                                                libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedIcon[lv_lastUsedSlot] = "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
                                                libAHLI_gv_battleReportSideData[lp_sideIndex].lv_abilitiesCastedName[lv_lastUsedSlot] = StringToText(lv_ability);
                                                TextExpressionSetToken("Param/Expression/lib_AHLI_D0C21B3A", "A", StringToText(lv_ability));
                                                TriggerDebugOutput(2, TextExpressionAssemble("Param/Expression/lib_AHLI_D0C21B3A"), false);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        TriggerDebugOutput(2, StringExternal("Param/Value/lib_AHLI_45883B97"), false);
    }
}

void libAHLI_gf_BattleReportIncrementUnitTypeKill (int lp_sideIndex, string lp_unitType) {
    // Variable Declarations
    int lv_slot;
    int lv_lastUsedSlot;

    // Automatic Variable Declarations
    int auto72559EE2_ae;
    const int auto72559EE2_ai = 1;

    // Variable Initialization
    lv_lastUsedSlot = libAHLI_gv_battleReportSideData[lp_sideIndex].lv_killedUnitTypeLastUsedSlot;

    // Implementation
    auto72559EE2_ae = lv_lastUsedSlot;
    lv_slot = 0;
    for ( ; ( (auto72559EE2_ai >= 0 && lv_slot <= auto72559EE2_ae) || (auto72559EE2_ai < 0 && lv_slot >= auto72559EE2_ae) ) ; lv_slot += auto72559EE2_ai ) {
        if ((lp_unitType == libAHLI_gv_battleReportSideData[lp_sideIndex].lv_killedUnitType[lv_slot])) {
            libAHLI_gv_battleReportSideData[lp_sideIndex].lv_killedUnitTypeCount[lv_slot] += 1;
            libAHLI_gv_battleReport.lv_updateDueToDeathOnlyLabels = true;
            return ;
        }

    }
    if ((lv_lastUsedSlot < libAHLI_gv_battleReportMaxKilledUnitTypeSlot)) {
        lv_lastUsedSlot += 1;
        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_killedUnitType[lv_lastUsedSlot] = lp_unitType;
        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_killedUnitTypeCount[lv_lastUsedSlot] = 1;
        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_killedUnitTypeLastUsedSlot += 1;
        libAHLI_gv_battleReport.lv_updateDueToDeathAll = true;
        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_killedUnitTypeIcon[lv_lastUsedSlot] = libAHLI_gf_IconofUnit(lp_unitType, libAHLI_gv_battleReport.lv_playerIdSide[lp_sideIndex]);
        libAHLI_gv_battleReportSideData[lp_sideIndex].lv_killedUnitTypeName[lv_lastUsedSlot] = UnitTypeGetName(lp_unitType);
    }
    else {
        TriggerDebugOutput(2, StringExternal("Param/Value/lib_AHLI_68308F77"), false);
    }
}

void libAHLI_gf_BattleReportIncrementResourceDamage (int lp_sideIndex, int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    libAHLI_gv_battleReportSideData[lp_sideIndex].lv_resourcesDestroyed[0] += lp_minerals;
    libAHLI_gv_battleReportSideData[lp_sideIndex].lv_resourcesDestroyed[1] += lp_vespene;
    libAHLI_gv_battleReport.lv_updateDueToDeathResources = true;
}

void libAHLI_gf_BattleReportEndBattle () {
    // Automatic Variable Declarations
    // Implementation
    libAHLI_gf_BattleReportUpdateUI();
    libAHLI_gv_battleReport.lv_battleActive = false;
    DialogControlSetEnabled(libAHLI_gv_battleReport.lv_uiBattleActiveIndicator, libAHLI_gv_obs, false);
    if ((libAHLI_gv_battleReport.lv_noUiUpdates == true)) {
        libNtve_gf_SetDialogItemText(libAHLI_gv_battleReport.lv_uiBattleDurationLabel, TextTimeFormat(StringToText("<min/>:<sec2/>"), FixedToInt((libAHLI_gv_battleReport.lv_battleGameTimeDuration / libAHLI_gv_gameSpeedFactor))), libAHLI_gv_obs);
    }
    else {
        libAHLI_gv_battleReport.lv_noUiUpdates = true;
    }
    libAHLI_gf_BattleReportClearBattleData();
    TimerStart(libAHLI_gv_battleReport.lv_noUiUpdateTimer, libAHLI_gv_battleReportAfterBattleEndedNoUiUpdateTimerGameTimeDuration, false, c_timeGame);
}

void libAHLI_gf_BattleReportClearBattleData () {
    // Variable Declarations
    int lv_sideIndex;
    int lv_slot;

    // Automatic Variable Declarations
    const int autoAE618F83_ae = 1;
    const int autoAE618F83_ai = 1;
    int auto2F363717_ae;
    const int auto2F363717_ai = 1;
    int auto1F623BDA_ae;
    const int auto1F623BDA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_sideIndex = 0;
    for ( ; ( (autoAE618F83_ai >= 0 && lv_sideIndex <= autoAE618F83_ae) || (autoAE618F83_ai < 0 && lv_sideIndex >= autoAE618F83_ae) ) ; lv_sideIndex += autoAE618F83_ai ) {
        auto2F363717_ae = libAHLI_gv_battleReportSideData[lv_sideIndex].lv_abilitiesCastedLastUsedSlot;
        lv_slot = 0;
        for ( ; ( (auto2F363717_ai >= 0 && lv_slot <= auto2F363717_ae) || (auto2F363717_ai < 0 && lv_slot >= auto2F363717_ae) ) ; lv_slot += auto2F363717_ai ) {
            libAHLI_gv_battleReportSideData[lv_sideIndex].lv_abilitiesCasted[lv_slot] = null;
            libAHLI_gv_battleReportSideData[lv_sideIndex].lv_abilitiesCastedCount[lv_slot] = 0;
            libAHLI_gv_battleReportSideData[lv_sideIndex].lv_abilitiesCastedIcon[lv_slot] = null;
            libAHLI_gv_battleReportSideData[lv_sideIndex].lv_abilitiesCastedName[lv_slot] = null;
        }
        libAHLI_gv_battleReportSideData[lv_sideIndex].lv_abilitiesCastedLastUsedSlot = -1;
        auto1F623BDA_ae = libAHLI_gv_battleReportSideData[lv_sideIndex].lv_killedUnitTypeLastUsedSlot;
        lv_slot = 0;
        for ( ; ( (auto1F623BDA_ai >= 0 && lv_slot <= auto1F623BDA_ae) || (auto1F623BDA_ai < 0 && lv_slot >= auto1F623BDA_ae) ) ; lv_slot += auto1F623BDA_ai ) {
            libAHLI_gv_battleReportSideData[lv_sideIndex].lv_killedUnitType[lv_slot] = null;
            libAHLI_gv_battleReportSideData[lv_sideIndex].lv_killedUnitTypeCount[lv_slot] = 0;
            libAHLI_gv_battleReportSideData[lv_sideIndex].lv_killedUnitTypeIcon[lv_slot] = null;
            libAHLI_gv_battleReportSideData[lv_sideIndex].lv_killedUnitTypeName[lv_slot] = null;
        }
        libAHLI_gv_battleReportSideData[lv_sideIndex].lv_killedUnitTypeLastUsedSlot = -1;
        libAHLI_gv_battleReportSideData[lv_sideIndex].lv_damageDealt = 0.0;
        libAHLI_gv_battleReportSideData[lv_sideIndex].lv_resourcesDestroyed[0] = 0;
        libAHLI_gv_battleReportSideData[lv_sideIndex].lv_resourcesDestroyed[1] = 0;
    }
    libAHLI_gv_battleReport.lv_battleGameTimeDuration = 0;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: GameHeart - Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_GameHeartInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    int lv_controller;

    // Automatic Variable Declarations
    playergroup autoAA0F1A58_g;
    const int auto3843C4AA_ae = 15;
    const int auto3843C4AA_ai = 1;
    unitgroup autoBAD71A13_g;
    int autoBAD71A13_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIUnitColorStyleOverride(libAHLI_gv_obs, c_unitColorStyleNormal);
    autoAA0F1A58_g = libAHLI_gv_initial_Active_Players;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoAA0F1A58_g, lv_i);
        if (lv_i < 0) { break; }
        libNtve_gf_SetAllianceOneWay(libAHLI_gv_obsID, lv_i, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetAlliance(lv_i, c_allianceIdDefeat, libAHLI_gv_obsID, false);
        PlayerSetAlliance(lv_i, c_allianceIdPassive, libAHLI_gv_obsID, true);
        PlayerSetAlliance(lv_i, c_allianceIdControl, libAHLI_gv_obsID, true);
        PlayerSetAlliance(lv_i, c_allianceIdVision, libAHLI_gv_obsID, true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "GameHeartActive", 1);
    }
    lv_i = 0;
    for ( ; ( (auto3843C4AA_ai >= 0 && lv_i <= auto3843C4AA_ae) || (auto3843C4AA_ai < 0 && lv_i >= auto3843C4AA_ae) ) ; lv_i += auto3843C4AA_ai ) {
        lv_controller = PlayerType(lv_i);
        if (((lv_controller == c_playerTypeNeutral) || (lv_controller == c_playerTypeHostile) || (lv_controller == c_playerTypeNone))) {
            autoBAD71A13_g = UnitGroup(null, lv_i, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            autoBAD71A13_u = UnitGroupCount(autoBAD71A13_g, c_unitCountAll);
            for (;; autoBAD71A13_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoBAD71A13_g, autoBAD71A13_u);
                if (lv_unit == null) { break; }
                UnitBehaviorAddPlayer(lv_unit, "AHLI_Reveal", libAHLI_gv_obsID, 1);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_GameHeartInitialization_Init () {
    libAHLI_gt_GameHeartInitialization = TriggerCreate("libAHLI_gt_GameHeartInitialization_Func");
    TriggerAddEventMapInit(libAHLI_gt_GameHeartInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameHeart - RevealDebrisFromDestructubleTowers
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controller;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_controller = PlayerType(EventPlayer());

    // Conditions
    if (testConds) {
        if (!(((lv_controller == c_playerTypeNeutral) || (lv_controller == c_playerTypeHostile) || (lv_controller == c_playerTypeNone)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "AHLI_Reveal", libAHLI_gv_obsID, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers_Init () {
    libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers = TriggerCreate("libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers_Func");
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebris", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebrisRampLeft", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebrisRampLeftGreen", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebrisRampRight", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebrisRampRightGreen", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleTerranTowerDebris", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleTerranTowerDebrisRampLeft", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleTerranTowerDebrisRampRight", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsiblePurifierTowerDebris", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Init
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_slot;

    // Automatic Variable Declarations
    playergroup auto8B571850_g;
    const int autoB1D95E6C_ae = libAHLI_gv_productionTabMAX_VISIBLE_SLOTS;
    const int autoB1D95E6C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B571850_g = libAHLI_gv_initial_Active_Players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto8B571850_g, lv_player);
        if (lv_player < 0) { break; }
        lv_slot = 0;
        for ( ; ( (autoB1D95E6C_ai >= 0 && lv_slot <= autoB1D95E6C_ae) || (autoB1D95E6C_ai < 0 && lv_slot >= autoB1D95E6C_ae) ) ; lv_slot += autoB1D95E6C_ai ) {
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame3/Player" + IntToString(lv_player) + "/ProdFrame/ProductionCountFrame" + IntToString(lv_slot) + "/Contaminated"));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libAHLI_gv_productionTabPlayer[lv_player].lv_slotContaminated[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame3/Player" + IntToString(lv_player) + "/ProdFrame/ProductionCountFrame" + IntToString(lv_slot) + "/ChronoBoosted"));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libAHLI_gv_productionTabPlayer[lv_player].lv_slotChronoBoosted[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame3/Player" + IntToString(lv_player) + "/ProdFrame/ProductionCountFrame" + IntToString(lv_slot) + "/IconImage"));
            libAHLI_gv_productionTabPlayer[lv_player].lv_slotImage[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame3/Player" + IntToString(lv_player) + "/ProdFrame/ProductionCountFrame" + IntToString(lv_slot) + "/NumberLabel"));
            libAHLI_gv_productionTabPlayer[lv_player].lv_slotCountLabel[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame3/Player" + IntToString(lv_player) + "/ProdFrame/ProductionCountFrame" + IntToString(lv_slot) + "/ProgressBar"));
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, libAHLI_gv_obs);
            libAHLI_gv_productionTabPlayer[lv_player].lv_slotProgressBar[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeUnitTarget, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame3/Player" + IntToString(lv_player) + "/ProdFrame/ProductionCountFrame" + IntToString(lv_slot) + "/UnitTargetFrame"));
            libAHLI_gv_productionTabPlayer[lv_player].lv_slotUnitTargetFrame[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame3/Player" + IntToString(lv_player) + "/ProdFrame/ProductionCountFrame" + IntToString(lv_slot)));
            libAHLI_gv_productionTabPlayer[lv_player].lv_slotPanel[lv_slot] = DialogControlLastCreated();
        }
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame3/Player" + IntToString(lv_player) + "/ProdFrame/MoreIconsLabel"));
        libAHLI_gv_productionTabPlayer[lv_player].lv_moreSlotsLabel = DialogControlLastCreated();
        libAHLI_gv_productionTabPlayer[lv_player].lv_chronoBoosted = UnitGroupEmpty();
        libAHLI_gv_productionTabPlayer[lv_player].lv_contanimated = UnitGroupEmpty();
    }
    libAHLI_gf_ProductionTabUpdateUIProgressSelectionthreadedinfinite();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabInit_Init () {
    libAHLI_gt_ProductionTabInit = TriggerCreate("libAHLI_gt_ProductionTabInit_Func");
    TriggerAddEventMapInit(libAHLI_gt_ProductionTabInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Construction/UnitWarpMerge Started
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabConstructionUnitWarpMergeStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_constructedUnit;
    int lv_productionType;
    string lv_constructedUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_constructedUnit = EventUnitProgressUnit();
    lv_productionType = libAHLI_ge_ProductionTabCategory_Unit;
    lv_constructedUnitType = libNtve_gf_TriggeringProgressUnitType();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(lv_constructedUnitType, c_unitAttributeStructure) == true)) {
        lv_productionType = libAHLI_ge_ProductionTabCategory_Structure;
    }

    libAHLI_gf_ProductionTabRegisterProduction(UnitGetOwner(lv_constructedUnit), (lv_constructedUnitType), lv_productionType, lv_constructedUnit, true, false, UnitGetType(EventUnit()), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabConstructionUnitWarpMergeStarted_Init () {
    libAHLI_gt_ProductionTabConstructionUnitWarpMergeStarted = TriggerCreate("libAHLI_gt_ProductionTabConstructionUnitWarpMergeStarted_Func");
    TriggerAddEventUnitConstructProgress(libAHLI_gt_ProductionTabConstructionUnitWarpMergeStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Construction/UnitWarpMerge Ended
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabConstructionUnitWarpMergeEnded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_constructedUnit;
    int lv_productionType;
    string lv_constructedUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_constructedUnit = EventUnitProgressUnit();
    lv_productionType = libAHLI_ge_ProductionTabCategory_Structure;
    lv_constructedUnitType = libNtve_gf_TriggeringProgressUnitType();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitAbilityExists(lv_constructedUnit, "Warpable") == true) || (lv_constructedUnitType == "Archon"))) {
        lv_productionType = libAHLI_ge_ProductionTabCategory_Unit;
    }

    libAHLI_gf_ProductionTabRemoveProduction(UnitGetOwner(lv_constructedUnit), (lv_constructedUnitType), lv_productionType, lv_constructedUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabConstructionUnitWarpMergeEnded_Init () {
    libAHLI_gt_ProductionTabConstructionUnitWarpMergeEnded = TriggerCreate("libAHLI_gt_ProductionTabConstructionUnitWarpMergeEnded_Func");
    TriggerAddEventUnitConstructProgress(libAHLI_gt_ProductionTabConstructionUnitWarpMergeEnded, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(libAHLI_gt_ProductionTabConstructionUnitWarpMergeEnded, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Training Started
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabTrainingStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabRegisterProduction(UnitGetOwner(lv_producer), (libNtve_gf_TriggeringProgressUnitType()), libAHLI_ge_ProductionTabCategory_Unit, lv_producer, false, false, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabTrainingStarted_Init () {
    libAHLI_gt_ProductionTabTrainingStarted = TriggerCreate("libAHLI_gt_ProductionTabTrainingStarted_Func");
    TriggerAddEventUnitTrainProgress(libAHLI_gt_ProductionTabTrainingStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Training Ended
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabTrainingEnded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabRemoveProduction(UnitGetOwner(lv_producer), (libNtve_gf_TriggeringProgressUnitType()), libAHLI_ge_ProductionTabCategory_Unit, lv_producer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabTrainingEnded_Init () {
    libAHLI_gt_ProductionTabTrainingEnded = TriggerCreate("libAHLI_gt_ProductionTabTrainingEnded_Func");
    TriggerAddEventUnitTrainProgress(libAHLI_gt_ProductionTabTrainingEnded, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(libAHLI_gt_ProductionTabTrainingEnded, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Research Started
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabRegisterProduction(UnitGetOwner(lv_producer), (libNtve_gf_TriggeringProgressUpgrade()), libAHLI_ge_ProductionTabCategory_Upgrade, lv_producer, false, false, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabResearchStarted_Init () {
    libAHLI_gt_ProductionTabResearchStarted = TriggerCreate("libAHLI_gt_ProductionTabResearchStarted_Func");
    TriggerAddEventUnitResearchProgress(libAHLI_gt_ProductionTabResearchStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Research Ended
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabResearchEnded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabRemoveProduction(UnitGetOwner(lv_producer), (libNtve_gf_TriggeringProgressUpgrade()), libAHLI_ge_ProductionTabCategory_Upgrade, lv_producer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabResearchEnded_Init () {
    libAHLI_gt_ProductionTabResearchEnded = TriggerCreate("libAHLI_gt_ProductionTabResearchEnded_Func");
    TriggerAddEventUnitResearchProgress(libAHLI_gt_ProductionTabResearchEnded, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(libAHLI_gt_ProductionTabResearchEnded, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Arming Started
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabArmingStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabRegisterProduction(UnitGetOwner(lv_producer), (libNtve_gf_TriggeringProgressUnitType()), libAHLI_ge_ProductionTabCategory_Unit, lv_producer, false, false, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabArmingStarted_Init () {
    libAHLI_gt_ProductionTabArmingStarted = TriggerCreate("libAHLI_gt_ProductionTabArmingStarted_Func");
    TriggerAddEventUnitArmMagazineProgress(libAHLI_gt_ProductionTabArmingStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Arming Ended
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabArmingEnded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabRemoveProduction(UnitGetOwner(lv_producer), (libNtve_gf_TriggeringProgressUnitType()), libAHLI_ge_ProductionTabCategory_Unit, lv_producer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabArmingEnded_Init () {
    libAHLI_gt_ProductionTabArmingEnded = TriggerCreate("libAHLI_gt_ProductionTabArmingEnded_Func");
    TriggerAddEventUnitArmMagazineProgress(libAHLI_gt_ProductionTabArmingEnded, null, c_unitProgressStageComplete);
    TriggerAddEventUnitArmMagazineProgress(libAHLI_gt_ProductionTabArmingEnded, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Morph Started
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabMorphStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_targetUnitType;
    int lv_lastInfoArrayIndex;
    string lv_sourceUnitType;
    unit lv_unit;
    int lv_player;
    string lv_ability;
    int lv_productionType;
    abilcmd lv_abilCmd;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_productionType = libAHLI_ge_ProductionTabCategory_Unit;
    lv_abilCmd = EventUnitAbility();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AbilityCommandGetCommand(lv_abilCmd) == 0)) {
        lv_unit = EventUnit();
        lv_player = UnitGetOwner(lv_unit);
        lv_ability = AbilityCommandGetAbility(lv_abilCmd);
        if ((CatalogFieldValueGet(c_gameCatalogAbil, (lv_ability), "Flags[" + IntToString(18) + "]", lv_player) == "1")) {
            lv_sourceUnitType = UnitGetType(lv_unit);
            lv_lastInfoArrayIndex = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lv_player) - 1);
            if (((lv_lastInfoArrayIndex == 0) || (lv_sourceUnitType != (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].Unit", lv_player))))) {
                lv_targetUnitType = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_lastInfoArrayIndex) + "].Unit", lv_player);
                if ((UnitTypeTestAttribute(lv_sourceUnitType, c_unitAttributeStructure) == true)) {
                    lv_productionType = libAHLI_ge_ProductionTabCategory_Structure;
                }

                libAHLI_gf_ProductionTabRegisterProduction(lv_player, lv_targetUnitType, lv_productionType, lv_unit, true, true, null, lv_abilCmd);
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabMorphStarted_Init () {
    libAHLI_gt_ProductionTabMorphStarted = TriggerCreate("libAHLI_gt_ProductionTabMorphStarted_Func");
    TriggerAddEventUnitAbility(libAHLI_gt_ProductionTabMorphStarted, null, null, c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Morph Finished
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabMorphFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_targetUnitType;
    int lv_lastInfoArrayIndex;
    unit lv_unit;
    int lv_player;
    string lv_ability;
    int lv_productionType;
    abilcmd lv_abilCmd;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_productionType = libAHLI_ge_ProductionTabCategory_Unit;
    lv_abilCmd = EventUnitAbility();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AbilityCommandGetCommand(lv_abilCmd) == 0)) {
        lv_ability = AbilityCommandGetAbility(lv_abilCmd);
        lv_unit = EventUnit();
        lv_player = UnitGetOwner(lv_unit);
        if ((CatalogFieldValueGet(c_gameCatalogAbil, (lv_ability), "Flags[" + IntToString(18) + "]", lv_player) == "1")) {
            lv_lastInfoArrayIndex = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lv_player) - 1);
            lv_targetUnitType = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_lastInfoArrayIndex) + "].Unit", lv_player);
            if ((lv_targetUnitType == (UnitGetType(lv_unit)))) {
                if ((UnitTypeTestAttribute((lv_targetUnitType), c_unitAttributeStructure) == true)) {
                    lv_productionType = libAHLI_ge_ProductionTabCategory_Structure;
                }

                libAHLI_gf_ProductionTabRemoveProduction(lv_player, lv_targetUnitType, lv_productionType, lv_unit);
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabMorphFinished_Init () {
    libAHLI_gt_ProductionTabMorphFinished = TriggerCreate("libAHLI_gt_ProductionTabMorphFinished_Func");
    TriggerAddEventUnitAbility(libAHLI_gt_ProductionTabMorphFinished, null, null, c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Morph Canceled
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabMorphCanceled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_targetUnitType;
    int lv_lastInfoArrayIndex;
    unit lv_unit;
    int lv_player;
    string lv_ability;
    int lv_productionType;
    abilcmd lv_abilCmd;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_productionType = libAHLI_ge_ProductionTabCategory_Unit;
    lv_abilCmd = EventUnitAbility();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AbilityCommandGetCommand(lv_abilCmd) == 0)) {
        lv_ability = AbilityCommandGetAbility(lv_abilCmd);
        if ((AbilityClass(lv_ability) == c_classIdCAbilMorph)) {
            lv_unit = EventUnit();
            lv_player = UnitGetOwner(lv_unit);
            if ((CatalogFieldValueGet(c_gameCatalogAbil, (lv_ability), "Flags[" + IntToString(18) + "]", lv_player) == "1")) {
                lv_lastInfoArrayIndex = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lv_player) - 1);
                lv_targetUnitType = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_lastInfoArrayIndex) + "].Unit", lv_player);
                if ((UnitTypeTestAttribute((lv_targetUnitType), c_unitAttributeStructure) == true)) {
                    lv_productionType = libAHLI_ge_ProductionTabCategory_Structure;
                }

                libAHLI_gf_ProductionTabRemoveProduction(lv_player, lv_targetUnitType, lv_productionType, lv_unit);
                if (libAHLI_gv_battleReport.lv_battleActive) {
                    libAHLI_gf_BattleReportMorphCanceled((lv_targetUnitType), UnitGetType(lv_unit), lv_player, lv_ability);
                }

            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabMorphCanceled_Init () {
    libAHLI_gt_ProductionTabMorphCanceled = TriggerCreate("libAHLI_gt_ProductionTabMorphCanceled_Func");
    TriggerAddEventUnitAbility(libAHLI_gt_ProductionTabMorphCanceled, null, null, c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - ChronoBoost Activates
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabChronoBoostActivates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabRegisterChronoBoost(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabChronoBoostActivates_Init () {
    libAHLI_gt_ProductionTabChronoBoostActivates = TriggerCreate("libAHLI_gt_ProductionTabChronoBoostActivates_Func");
    TriggerAddEventUnitBehaviorChange(libAHLI_gt_ProductionTabChronoBoostActivates, null, "ChronoBoostEnergyCost", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - ChronoBoost Deactivates
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabChronoBoostDeactivates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabUnregisterChronoBoost(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabChronoBoostDeactivates_Init () {
    libAHLI_gt_ProductionTabChronoBoostDeactivates = TriggerCreate("libAHLI_gt_ProductionTabChronoBoostDeactivates_Func");
    TriggerAddEventUnitBehaviorChange(libAHLI_gt_ProductionTabChronoBoostDeactivates, null, "ChronoBoostEnergyCost", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Contaminate Activates
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabContaminateActivates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabRegisterContaminate(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabContaminateActivates_Init () {
    libAHLI_gt_ProductionTabContaminateActivates = TriggerCreate("libAHLI_gt_ProductionTabContaminateActivates_Func");
    TriggerAddEventUnitBehaviorChange(libAHLI_gt_ProductionTabContaminateActivates, null, "Contaminated", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProductionTab - Contaminate Deactivates
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ProductionTabContaminateDeactivates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ProductionTabUnregisterContaminate(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ProductionTabContaminateDeactivates_Init () {
    libAHLI_gt_ProductionTabContaminateDeactivates = TriggerCreate("libAHLI_gt_ProductionTabContaminateDeactivates_Func");
    TriggerAddEventUnitBehaviorChange(libAHLI_gt_ProductionTabContaminateDeactivates, null, "Contaminated", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ObserverUiAssistInitialization_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_player;
    int lv_team;
    playergroup[3] lv_playersOnTeam;
    fixed lv_xCoord;
    fixed[3] lv_mostleftTeamStartPosX;
    int[3] lv_mostleftTeamStartPlayerId;
    int[3] lv_teamsVersusModeScoreValue;
    bool lv_team1IsLeft;

    // Automatic Variable Declarations
    const int auto41403137_ae = 2;
    const int auto41403137_ai = 1;
    playergroup auto6857D5A5_g;
    const int auto564D10B3_ae = 2;
    const int auto564D10B3_ai = 1;
    playergroup auto74DCA28D_g;
    const int auto6646F1A7_ae = 2;
    const int auto6646F1A7_ai = 1;
    playergroup auto196BFCB7_g;
    playergroup autoB00B28D1_g;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_mostleftTeamStartPosX[init_i] = 524287.0;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_mostleftTeamStartPlayerId[init_i] = 16;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_teamsVersusModeScoreValue[init_i] = 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playersOnTeam[1] = GameAttributePlayersForTeam(1);
    lv_playersOnTeam[2] = GameAttributePlayersForTeam(2);
    if (((PlayerGroupCount(lv_playersOnTeam[1]) + PlayerGroupCount(lv_playersOnTeam[2])) == PlayerGroupCount(libAHLI_gv_initial_Active_Players)) && (PlayerGroupCount(lv_playersOnTeam[1]) > 0) && (PlayerGroupCount(lv_playersOnTeam[2]) > 0)) {
        if ((PlayerGroupCount(lv_playersOnTeam[1]) != 1)) {
            lv_team = 1;
            for ( ; ( (auto6646F1A7_ai >= 0 && lv_team <= auto6646F1A7_ae) || (auto6646F1A7_ai < 0 && lv_team >= auto6646F1A7_ae) ) ; lv_team += auto6646F1A7_ai ) {
                auto196BFCB7_g = lv_playersOnTeam[lv_team];
                lv_player = -1;
                while (true) {
                    lv_player = PlayerGroupNextPlayer(auto196BFCB7_g, lv_player);
                    if (lv_player < 0) { break; }
                    PlayerScoreValueSetFromInt(lv_player, "VersusModePlayerSide", lv_team);
                }
            }
        }
        else {
            lv_team = 1;
            for ( ; ( (auto41403137_ai >= 0 && lv_team <= auto41403137_ae) || (auto41403137_ai < 0 && lv_team >= auto41403137_ae) ) ; lv_team += auto41403137_ai ) {
                auto6857D5A5_g = lv_playersOnTeam[lv_team];
                lv_player = -1;
                while (true) {
                    lv_player = PlayerGroupNextPlayer(auto6857D5A5_g, lv_player);
                    if (lv_player < 0) { break; }
                    lv_xCoord = PointGetX(PlayerStartLocation(lv_player));
                    if ((lv_xCoord < lv_mostleftTeamStartPosX[lv_team])) {
                        lv_mostleftTeamStartPosX[lv_team] = lv_xCoord;
                        lv_mostleftTeamStartPlayerId[lv_team] = lv_player;
                    }

                }
            }
            if (((lv_mostleftTeamStartPosX[1] < lv_mostleftTeamStartPosX[2]) || ((lv_mostleftTeamStartPosX[1] == lv_mostleftTeamStartPosX[2]) && (lv_mostleftTeamStartPlayerId[1] < lv_mostleftTeamStartPlayerId[2])))) {
                lv_team1IsLeft = true;
            }

            if ((lv_team1IsLeft == true)) {
                lv_teamsVersusModeScoreValue[2] = 2;
            }
            else {
                lv_teamsVersusModeScoreValue[1] = 2;
            }
            lv_team = 1;
            for ( ; ( (auto564D10B3_ai >= 0 && lv_team <= auto564D10B3_ae) || (auto564D10B3_ai < 0 && lv_team >= auto564D10B3_ae) ) ; lv_team += auto564D10B3_ai ) {
                auto74DCA28D_g = lv_playersOnTeam[lv_team];
                lv_player = -1;
                while (true) {
                    lv_player = PlayerGroupNextPlayer(auto74DCA28D_g, lv_player);
                    if (lv_player < 0) { break; }
                    PlayerScoreValueSetFromInt(lv_player, "VersusModePlayerSide", lv_teamsVersusModeScoreValue[lv_team]);
                }
            }
        }
    }

    autoB00B28D1_g = libAHLI_gv_initial_Active_Players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB00B28D1_g, lv_player);
        if (lv_player < 0) { break; }
        libAHLI_gf_ObserverUiAssistSetPlayerIdScore(lv_player);
        if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
            libAHLI_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libAHLI_ge_PlayerStatusScoreValue_Playing);
        }
        else {
            if ((PlayerStatus(lv_player) == c_playerStatusLeft) && (PlayerScoreValueGetAsInt(lv_player, "PlayerStatus") == 0)) {
                libAHLI_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libAHLI_ge_PlayerStatusScoreValue_DroppedbeforeMapInitialization);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ObserverUiAssistInitialization_Init () {
    libAHLI_gt_ObserverUiAssistInitialization = TriggerCreate("libAHLI_gt_ObserverUiAssistInitialization_Func");
    TriggerAddEventMapInit(libAHLI_gt_ObserverUiAssistInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - PlayerLeavesGameDefeat
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ObserverUiAssistPlayerLeavesGameDefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoED37B730_g;
    int autoED37B730_u;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libAHLI_ge_PlayerStatusScoreValue_LeftGameinDefeat);
    autoED37B730_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0);
    autoED37B730_u = UnitGroupCount(autoED37B730_g, c_unitCountAll);
    for (;; autoED37B730_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoED37B730_g, autoED37B730_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAddPlayer(lv_unit, "AHLI_Reveal", libAHLI_gv_obsID, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ObserverUiAssistPlayerLeavesGameDefeat_Init () {
    libAHLI_gt_ObserverUiAssistPlayerLeavesGameDefeat = TriggerCreate("libAHLI_gt_ObserverUiAssistPlayerLeavesGameDefeat_Func");
    TriggerAddEventPlayerLeft(libAHLI_gt_ObserverUiAssistPlayerLeavesGameDefeat, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - PlayerLeavesGameTie
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ObserverUiAssistPlayerLeavesGameTie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto4C1668FC_g;
    int auto4C1668FC_u;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libAHLI_ge_PlayerStatusScoreValue_LeftGameinTie);
    auto4C1668FC_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4C1668FC_u = UnitGroupCount(auto4C1668FC_g, c_unitCountAll);
    for (;; auto4C1668FC_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto4C1668FC_g, auto4C1668FC_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAddPlayer(lv_unit, "AHLI_Reveal", libAHLI_gv_obsID, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ObserverUiAssistPlayerLeavesGameTie_Init () {
    libAHLI_gt_ObserverUiAssistPlayerLeavesGameTie = TriggerCreate("libAHLI_gt_ObserverUiAssistPlayerLeavesGameTie_Func");
    TriggerAddEventPlayerLeft(libAHLI_gt_ObserverUiAssistPlayerLeavesGameTie, c_playerAny, c_gameResultTie);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - PlayerLeavesGameVictory
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ObserverUiAssistPlayerLeavesGameVictory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoC9465B8D_g;
    int autoC9465B8D_u;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libAHLI_ge_PlayerStatusScoreValue_LeftGameinVictory);
    autoC9465B8D_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC9465B8D_u = UnitGroupCount(autoC9465B8D_g, c_unitCountAll);
    for (;; autoC9465B8D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC9465B8D_g, autoC9465B8D_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAddPlayer(lv_unit, "AHLI_Reveal", libAHLI_gv_obsID, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ObserverUiAssistPlayerLeavesGameVictory_Init () {
    libAHLI_gt_ObserverUiAssistPlayerLeavesGameVictory = TriggerCreate("libAHLI_gt_ObserverUiAssistPlayerLeavesGameVictory_Func");
    TriggerAddEventPlayerLeft(libAHLI_gt_ObserverUiAssistPlayerLeavesGameVictory, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - CreepPercentage
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ObserverUiAssistCreepPercentage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ObserverUiAssistCreepPercentage_Init () {
    libAHLI_gt_ObserverUiAssistCreepPercentage = TriggerCreate("libAHLI_gt_ObserverUiAssistCreepPercentage_Func");
    TriggerAddEventTimePeriodic(libAHLI_gt_ObserverUiAssistCreepPercentage, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArchonMergeSaveResourceOffset
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ArchonMergeSaveResourceOffset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unitSurvivor;

    // Automatic Variable Declarations
    unitgroup auto20B24E7C_g;
    int auto20B24E7C_u;
    unitgroup auto90AFA8AE_g;
    int auto90AFA8AE_u;

    // Variable Initialization
    lv_unitSurvivor = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitTargetUnit()) == "HighTemplar")) {
        if ((UnitGetType(lv_unitSurvivor) == "HighTemplar")) {
            Wait(0.0, c_timeGame);
            auto90AFA8AE_g = UnitGroupSearch("Archon", EventPlayer(), UnitGetPosition(EventUnitTargetUnit()), 0.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto90AFA8AE_u = UnitGroupCount(auto90AFA8AE_g, c_unitCountAll);
            for (;; auto90AFA8AE_u -= 1) {
                lv_unitSurvivor = UnitGroupUnitFromEnd(auto90AFA8AE_g, auto90AFA8AE_u);
                if (lv_unitSurvivor == null) { break; }
                if ((UnitHasBehavior2(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonHTHT") == false) && (UnitHasBehavior2(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonDTDT") == false)) {
                    UnitBehaviorAdd(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonHTHT", lv_unitSurvivor, 1);
                    return true;
                }

            }
        }

    }
    else {
        if ((UnitGetType(lv_unitSurvivor) == "DarkTemplar")) {
            Wait(0.0, c_timeGame);
            auto20B24E7C_g = UnitGroupSearch("Archon", EventPlayer(), UnitGetPosition(EventUnitTargetUnit()), 0.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto20B24E7C_u = UnitGroupCount(auto20B24E7C_g, c_unitCountAll);
            for (;; auto20B24E7C_u -= 1) {
                lv_unitSurvivor = UnitGroupUnitFromEnd(auto20B24E7C_g, auto20B24E7C_u);
                if (lv_unitSurvivor == null) { break; }
                if ((UnitHasBehavior2(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonHTHT") == false) && (UnitHasBehavior2(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonDTDT") == false)) {
                    UnitBehaviorAdd(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonDTDT", lv_unitSurvivor, 1);
                    return true;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ArchonMergeSaveResourceOffset_Init () {
    libAHLI_gt_ArchonMergeSaveResourceOffset = TriggerCreate("libAHLI_gt_ArchonMergeSaveResourceOffset_Func");
    TriggerAddEventUnitAbility(libAHLI_gt_ArchonMergeSaveResourceOffset, null, AbilityCommand("ArchonWarp", 1), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArchonDuplicatedTemplarsDied
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_ArchonDuplicatedTemplarsDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitOwner;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitOwner = EventPlayerEffectUsedUnitOwner(c_effectPlayerSource);
    lv_unitType = "HighTemplar";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "AHLI_ArchonDTDTDies")) {
        lv_unitType = "DarkTemplar";
    }

    PlayerScoreValueSetFromInt(lv_unitOwner, "MineralsLostArmy", (PlayerScoreValueGetAsInt(lv_unitOwner, "MineralsLostArmy") + ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "CostResource[" + IntToString(0) + "]", lv_unitOwner) * 2) - CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Archon", "CostResource[" + IntToString(0) + "]", lv_unitOwner))));
    PlayerScoreValueSetFromInt(lv_unitOwner, "VespeneLostArmy", (PlayerScoreValueGetAsInt(lv_unitOwner, "VespeneLostArmy") + ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "CostResource[" + IntToString(1) + "]", lv_unitOwner) * 2) - CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Archon", "CostResource[" + IntToString(1) + "]", lv_unitOwner))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_ArchonDuplicatedTemplarsDied_Init () {
    libAHLI_gt_ArchonDuplicatedTemplarsDied = TriggerCreate("libAHLI_gt_ArchonDuplicatedTemplarsDied_Func");
    TriggerAddEventPlayerEffectUsed(libAHLI_gt_ArchonDuplicatedTemplarsDied, c_playerAny, "AHLI_ArchonHTHTDies");
    TriggerAddEventPlayerEffectUsed(libAHLI_gt_ArchonDuplicatedTemplarsDied, c_playerAny, "AHLI_ArchonDTDTDies");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OverlordTransportMorphCompleted
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_OverlordTransportMorphCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "AHLI_fixUnitLostResourcesOfOverlordTransport", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_OverlordTransportMorphCompleted_Init () {
    libAHLI_gt_OverlordTransportMorphCompleted = TriggerCreate("libAHLI_gt_OverlordTransportMorphCompleted_Func");
    TriggerAddEventUnitAbility(libAHLI_gt_OverlordTransportMorphCompleted, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OverseerFromOverlordTransportDied
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_OverseerFromOverlordTransportDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitOwner = EventPlayerEffectUsedUnitOwner(c_effectPlayerSource);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(lv_unitOwner, "MineralsLostArmy", (PlayerScoreValueGetAsInt(lv_unitOwner, "MineralsLostArmy") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MorphToTransportOverlord", "Cost.Resource[" + IntToString(0) + "]", lv_unitOwner)));
    PlayerScoreValueSetFromInt(lv_unitOwner, "VespeneLostArmy", (PlayerScoreValueGetAsInt(lv_unitOwner, "VespeneLostArmy") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MorphToTransportOverlord", "Cost.Resource[" + IntToString(1) + "]", lv_unitOwner)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_OverseerFromOverlordTransportDied_Init () {
    libAHLI_gt_OverseerFromOverlordTransportDied = TriggerCreate("libAHLI_gt_OverseerFromOverlordTransportDied_Func");
    TriggerAddEventPlayerEffectUsed(libAHLI_gt_OverseerFromOverlordTransportDied, c_playerAny, "AHLI_OverlordTransportDies");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Graphs - Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_GraphsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerT1;
    int lv_playerT2;
    fixed lv_xOfStartLocationT1;
    fixed lv_xOfStartLocationT2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(libAHLI_gv_initial_Active_Players) == 2) && (PlayerGroupCount(GameAttributePlayersForTeam(1)) == 1) && (PlayerGroupCount(GameAttributePlayersForTeam(2)) == 1)) {
        libAHLI_gv_graphsGeneral.lv_active = true;
        libAHLI_gf_RegisterPeriodicEvent(libAHLI_gt_GraphsTimer, libAHLI_gv_gameSpeedFactor, c_timeGame);
        lv_playerT1 = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
        lv_playerT2 = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
        lv_xOfStartLocationT1 = PointGetX(PlayerStartLocation(lv_playerT1));
        lv_xOfStartLocationT2 = PointGetX(PlayerStartLocation(lv_playerT2));
        if ((lv_xOfStartLocationT1 < lv_xOfStartLocationT2)) {
            libAHLI_gv_graphsGeneral.lv_playerLeft = lv_playerT1;
            libAHLI_gv_graphsGeneral.lv_teamLeft = 1;
            libAHLI_gv_graphsGeneral.lv_playerRight = lv_playerT2;
            libAHLI_gv_graphsGeneral.lv_teamRight = 2;
        }
        else if ((lv_xOfStartLocationT1 > lv_xOfStartLocationT2)) {
            libAHLI_gv_graphsGeneral.lv_playerLeft = lv_playerT2;
            libAHLI_gv_graphsGeneral.lv_teamLeft = 2;
            libAHLI_gv_graphsGeneral.lv_playerRight = lv_playerT1;
            libAHLI_gv_graphsGeneral.lv_teamRight = 1;
        }
        else if ((lv_playerT1 < lv_playerT2)) {
            libAHLI_gv_graphsGeneral.lv_playerLeft = lv_playerT1;
            libAHLI_gv_graphsGeneral.lv_teamLeft = 1;
            libAHLI_gv_graphsGeneral.lv_playerRight = lv_playerT2;
            libAHLI_gv_graphsGeneral.lv_teamRight = 2;
        }
        else if ((lv_playerT1 > lv_playerT2)) {
            libAHLI_gv_graphsGeneral.lv_playerLeft = lv_playerT2;
            libAHLI_gv_graphsGeneral.lv_teamLeft = 2;
            libAHLI_gv_graphsGeneral.lv_playerRight = lv_playerT1;
            libAHLI_gv_graphsGeneral.lv_teamRight = 1;
        }
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GraphContainer");
        libAHLI_gv_graphsGeneral.lv_container = DialogControlLastCreated();
        libAHLI_gf_GraphsDefineGraph(0, StringExternal("Param/Value/lib_AHLI_8058A929"), "IncomeGraph", "ResourceCollectionRate", libAHLI_ge_GraphStyle_Differential, 350.0, 400.0, 200.0, true);
        libAHLI_gf_GraphsDefineGraph(1, StringExternal("Param/Value/lib_AHLI_31D21183"), "ArmySizeGraph", "FoodUsedArmy", libAHLI_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0, false);
        libAHLI_gf_GraphsDefineGraph(2, StringExternal("Param/Value/lib_AHLI_0DD54D0A"), "ResourcesLostDiffGraph", "ResourcesLostUnits", libAHLI_ge_GraphStyle_Differential, 400.0, 500.0, 500.0, false);
        libAHLI_gf_GraphsDefineGraph(3, StringExternal("Param/Value/lib_AHLI_572C86BD"), "ResourcesGatheredGraph", "ResourcesGathered", libAHLI_ge_GraphStyle_Comparative, 7500.0, 10000.0, 10000.0, false);
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_GraphsInitialization_Init () {
    libAHLI_gt_GraphsInitialization = TriggerCreate("libAHLI_gt_GraphsInitialization_Func");
    TriggerAddEventMapInit(libAHLI_gt_GraphsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Graphs - Timer
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_GraphsTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_graph;
    int lv_count;

    // Automatic Variable Declarations
    const int auto2CE2B256_ae = libAHLI_gv_graphsMaxGraphId;
    const int auto2CE2B256_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gv_graphsGeneral.lv_currentInterval += 1;
    if ((libAHLI_gv_graphsGeneral.lv_currentInterval == libAHLI_gv_graphsIntervalLength)) {
        libAHLI_gv_graphsGeneral.lv_currentNode += 1;
    }

    lv_graph = 0;
    for ( ; ( (auto2CE2B256_ai >= 0 && lv_graph <= auto2CE2B256_ae) || (auto2CE2B256_ai < 0 && lv_graph >= auto2CE2B256_ae) ) ; lv_graph += auto2CE2B256_ai ) {
        libAHLI_gv_graphsData[lv_graph].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamLeft][libAHLI_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libAHLI_gv_graphsGeneral.lv_playerLeft, libAHLI_gv_graphsData[lv_graph].lv_scoreType);
        libAHLI_gv_graphsData[lv_graph].lv_tempValues[libAHLI_gv_graphsGeneral.lv_teamRight][libAHLI_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libAHLI_gv_graphsGeneral.lv_playerRight, libAHLI_gv_graphsData[lv_graph].lv_scoreType);
        if ((libAHLI_gv_graphsGeneral.lv_currentInterval == libAHLI_gv_graphsIntervalLength)) {
            if ((libAHLI_gv_graphsData[lv_graph].lv_style == libAHLI_ge_GraphStyle_Comparative)) {
                libAHLI_gf_GraphsUpdateDataComparative(lv_graph);
            }
            else {
                libAHLI_gf_GraphsUpdateDataDifferential(lv_graph);
            }
        }

    }
    if ((libAHLI_gv_graphsGeneral.lv_currentInterval == libAHLI_gv_graphsIntervalLength)) {
        libAHLI_gv_graphsGeneral.lv_currentInterval = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_GraphsTimer_Init () {
    libAHLI_gt_GraphsTimer = TriggerCreate("libAHLI_gt_GraphsTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_labelUnitsEnabled;
    bool lv_labelResearchEnabled;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_labelUnitsEnabled = (UserDataGetInt("GameHeartSettings", "Labels (Units)", "Value", 1) == 1);
    lv_labelResearchEnabled = (UserDataGetInt("GameHeartSettings", "Labels (Research)", "Value", 1) == 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_labelUnitsEnabled == true) || (lv_labelResearchEnabled == true))) {
        libAHLI_gv_labels.lv_active = true;
        libAHLI_gf_RegisterUnitCreatedEvent(libAHLI_gt_LabelsUnitCreated, null, null, null);
        if ((lv_labelUnitsEnabled == true)) {
            libAHLI_gf_RegisterUnitTrainingProgressEvent(libAHLI_gt_LabelsUnitTrainingStarted, null, c_unitProgressStageStart);
            libAHLI_gf_RegisterUnitArmingProgressEvent(libAHLI_gt_LabelsUnitTrainingStarted, null, c_unitProgressStageStart);
            libAHLI_gf_RegisterUnitTrainingProgressEvent(libAHLI_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageComplete);
            libAHLI_gf_RegisterUnitTrainingProgressEvent(libAHLI_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageCancel);
            libAHLI_gf_RegisterUnitArmingProgressEvent(libAHLI_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageComplete);
            libAHLI_gf_RegisterUnitArmingProgressEvent(libAHLI_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageCancel);
            libAHLI_gf_RegisterUnitDiesEvent(libAHLI_gt_LabelsReactorDestroyed, null);
        }

        if ((lv_labelResearchEnabled == true)) {
            libAHLI_gf_RegisterUnitResearchProgressEvent(libAHLI_gt_LabelsResearchStarted, null, c_unitProgressStageStart);
            libAHLI_gf_RegisterUnitResearchProgressEvent(libAHLI_gt_LabelsResearchStopped, null, c_unitProgressStageComplete);
            libAHLI_gf_RegisterUnitResearchProgressEvent(libAHLI_gt_LabelsResearchStopped, null, c_unitProgressStageCancel);
        }

    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsInitialization_Init () {
    libAHLI_gt_LabelsInitialization = TriggerCreate("libAHLI_gt_LabelsInitialization_Func");
    TriggerAddEventMapInit(libAHLI_gt_LabelsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Created
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;
    string lv_unitType;
    unit lv_unit;
    int lv_dialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_dialogItem = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_unit, UnitGetOwner(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0)) == true)) {
        lv_unitType = UnitGetType(lv_unit);
        if ((libAHLI_gf_LabelsUnitUsesCustomStatusBarforProduction(lv_unitType) == true)) {
            lv_unitTagString = IntToString(UnitGetTag(lv_unit));
            DataTableSetString(true, (lv_unitTagString + libAHLI_gv_labelsSlot1), "");
            DataTableSetString(true, (lv_unitTagString + libAHLI_gv_labelsSlot2), "");
            DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\IconBG", lv_unit);
            lv_dialogItem = DialogControlLastCreated();
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
            libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString), lv_dialogItem);
            DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\Icon", lv_unit);
            lv_dialogItem = DialogControlLastCreated();
            libNtve_gf_SetDialogItemImage(lv_dialogItem, "Assets\\Textures\\blank.dds", libAHLI_gv_obs);
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
            libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString), lv_dialogItem);
            DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DisruptIcon1\\IconBG", lv_unit);
            lv_dialogItem = DialogControlLastCreated();
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
            libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsDisruptIconBG1 + lv_unitTagString), lv_dialogItem);
            DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DisruptIcon1\\Icon", lv_unit);
            lv_dialogItem = DialogControlLastCreated();
            libNtve_gf_SetDialogItemImage(lv_dialogItem, "Assets\\Textures\\blank.dds", libAHLI_gv_obs);
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
            libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsDisruptIcon1 + lv_unitTagString), lv_dialogItem);
            if (((lv_unitType == "Barracks") || (lv_unitType == "Factory") || (lv_unitType == "Starport"))) {
                DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\IconBG", lv_unit);
                lv_dialogItem = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
                libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsIconBG2 + lv_unitTagString), DialogControlLastCreated());
                DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\Icon", lv_unit);
                lv_dialogItem = DialogControlLastCreated();
                libNtve_gf_SetDialogItemImage(lv_dialogItem, "Assets\\Textures\\blank.dds", libAHLI_gv_obs);
                DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
                libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsIcon2 + lv_unitTagString), lv_dialogItem);
                DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\IconBG", lv_unit);
                lv_dialogItem = DialogControlLastCreated();
                DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
                libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsIconBG3 + lv_unitTagString), lv_dialogItem);
                DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\Icon", lv_unit);
                lv_dialogItem = DialogControlLastCreated();
                libNtve_gf_SetDialogItemImage(lv_dialogItem, "Assets\\Textures\\blank.dds", libAHLI_gv_obs);
                DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
                libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsIcon3 + lv_unitTagString), lv_dialogItem);
            }

        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsUnitCreated_Init () {
    libAHLI_gt_LabelsUnitCreated = TriggerCreate("libAHLI_gt_LabelsUnitCreated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Training Started
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsUnitTrainingStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;
    string lv_unitTagStringSlot1;
    string lv_unitTagStringSlot2;
    int lv_activeTags;
    int lv_dialogItem;
    string lv_savedTypeSlot1;
    string lv_savedTypeSlot2;
    string lv_traineeType;
    unit lv_unit;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();
    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure) == true) || (lv_unitType == "Egg"))) {
        lv_unitTagString = IntToString(UnitGetTag(lv_unit));
        lv_unitTagStringSlot1 = (lv_unitTagString + libAHLI_gv_labelsSlot1);
        lv_unitTagStringSlot2 = (lv_unitTagString + libAHLI_gv_labelsSlot2);
        lv_savedTypeSlot1 = DataTableGetString(true, lv_unitTagStringSlot1);
        if ((lv_savedTypeSlot1 == "")) {
            DataTableSetString(true, lv_unitTagStringSlot1, (lv_traineeType));
            lv_savedTypeSlot1 = (lv_traineeType);
            lv_savedTypeSlot2 = DataTableGetString(true, lv_unitTagStringSlot2);
            if ((lv_savedTypeSlot2 == "")) {
                lv_activeTags = 1;
            }
            else {
                lv_activeTags = 2;
            }
        }
        else {
            if ((lv_traineeType == "Zergling") && (lv_savedTypeSlot1 == (lv_traineeType))) {
                return false;
            }

            DataTableSetString(true, lv_unitTagStringSlot2, (lv_traineeType));
            lv_savedTypeSlot2 = (lv_traineeType);
            lv_activeTags = 2;
        }
        if ((lv_activeTags == 2)) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG2 + lv_unitTagString)), libAHLI_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon2 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot1), "UnitIcon", c_playerAny)), libAHLI_gv_obs);
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG3 + lv_unitTagString)), libAHLI_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon3 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot2), "UnitIcon", c_playerAny)), libAHLI_gv_obs);
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
        }
        else {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot1), "UnitIcon", c_playerAny)), libAHLI_gv_obs);
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsUnitTrainingStarted_Init () {
    libAHLI_gt_LabelsUnitTrainingStarted = TriggerCreate("libAHLI_gt_LabelsUnitTrainingStarted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Research Started
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;
    string lv_research;
    string lv_unitTagString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_research = libNtve_gf_TriggeringProgressUpgrade();
    lv_unitTagString = IntToString(UnitGetTag(EventUnit()));

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, true);
    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString));
    libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_research, "Icon", c_playerAny)), libAHLI_gv_obs);
    DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsResearchStarted_Init () {
    libAHLI_gt_LabelsResearchStarted = TriggerCreate("libAHLI_gt_LabelsResearchStarted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Training Stopped
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsUnitTrainingStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;
    string lv_savedTypeSlot1;
    string lv_savedTypeSlot2;
    string lv_unitTagStringSlot1;
    string lv_unitTagStringSlot2;
    int lv_dialogItem;
    string lv_traineeType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_traineeType != "Baneling") && (lv_traineeType != "Interceptor") && (lv_traineeType != "BroodlingEscort") && (lv_traineeType != "Broodling")) {
        lv_unitTagString = IntToString(UnitGetTag(EventUnit()));
        lv_unitTagStringSlot1 = (lv_unitTagString + libAHLI_gv_labelsSlot1);
        lv_unitTagStringSlot2 = (lv_unitTagString + libAHLI_gv_labelsSlot2);
        lv_savedTypeSlot1 = DataTableGetString(true, lv_unitTagStringSlot1);
        lv_savedTypeSlot2 = DataTableGetString(true, lv_unitTagStringSlot2);
        if ((lv_savedTypeSlot1 == (lv_traineeType)) && (lv_savedTypeSlot2 == "")) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString)), libAHLI_gv_obs, false);
            DataTableSetString(true, lv_unitTagStringSlot1, "");
        }
        else if ((lv_savedTypeSlot2 == (lv_traineeType)) && (lv_savedTypeSlot1 == "")) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG2 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon2 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG3 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon3 + lv_unitTagString)), libAHLI_gv_obs, false);
            DataTableSetString(true, lv_unitTagStringSlot2, "");
        }
        else if ((lv_savedTypeSlot1 == (lv_traineeType)) && (lv_savedTypeSlot2 != "")) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG2 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon2 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG3 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon3 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot2), "UnitIcon", c_playerAny)), libAHLI_gv_obs);
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
            DataTableSetString(true, lv_unitTagStringSlot1, lv_savedTypeSlot2);
            DataTableSetString(true, lv_unitTagStringSlot2, "");
        }
        else if ((lv_savedTypeSlot2 == (lv_traineeType)) && (lv_savedTypeSlot1 != "")) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG2 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon2 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG3 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon3 + lv_unitTagString)), libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot1), "UnitIcon", c_playerAny)), libAHLI_gv_obs);
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
            DataTableSetString(true, lv_unitTagStringSlot2, "");
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsUnitTrainingStopped_Init () {
    libAHLI_gt_LabelsUnitTrainingStopped = TriggerCreate("libAHLI_gt_LabelsUnitTrainingStopped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Research Stopped
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsResearchStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTagString = IntToString(UnitGetTag(EventUnit()));

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString)), libAHLI_gv_obs, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsResearchStopped_Init () {
    libAHLI_gt_LabelsResearchStopped = TriggerCreate("libAHLI_gt_LabelsResearchStopped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Reactor Destroyed
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsReactorDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;
    string lv_slot1unitType;
    int lv_dialogItem;
    unit lv_unit;
    string lv_unitType;

    // Automatic Variable Declarations
    unitgroup auto00CB1734_g;
    int auto00CB1734_u;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_unitType == "BarracksReactor") || (lv_unitType == "FactoryReactor") || (lv_unitType == "StarportReactor"))) {
        auto00CB1734_g = UnitGroup(null, UnitGetOwner(lv_unit), RegionCircle(PointWithOffset(UnitGetPosition(lv_unit), -2.5, 0.5), 0.1), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        auto00CB1734_u = UnitGroupCount(auto00CB1734_g, c_unitCountAll);
        for (;; auto00CB1734_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto00CB1734_g, auto00CB1734_u);
            if (lv_unit == null) { break; }
            lv_unitType = UnitGetType(lv_unit);
            if (((lv_unitType == "Barracks") || (lv_unitType == "Factory") || (lv_unitType == "Starport")) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_unit, 1, 1) != "")) {
                lv_unitTagString = IntToString(UnitGetTag(lv_unit));
                lv_slot1unitType = DataTableGetString(true, (lv_unitTagString + libAHLI_gv_labelsSlot1));
                if ((lv_slot1unitType != "")) {
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG2 + lv_unitTagString)), libAHLI_gv_obs, false);
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon2 + lv_unitTagString)), libAHLI_gv_obs, false);
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG3 + lv_unitTagString)), libAHLI_gv_obs, false);
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon3 + lv_unitTagString)), libAHLI_gv_obs, false);
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIconBG1 + lv_unitTagString)), libAHLI_gv_obs, true);
                    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsIcon1 + lv_unitTagString));
                    libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_slot1unitType), "UnitIcon", c_playerAny)), libAHLI_gv_obs);
                    DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
                }

            }

        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsReactorDestroyed_Init () {
    libAHLI_gt_LabelsReactorDestroyed = TriggerCreate("libAHLI_gt_LabelsReactorDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Pylon Power - Up
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsPylonPowerUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;
    unit lv_unit;
    string lv_unitTagString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_unitTagString = IntToString(UnitGetTag(lv_unit));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIconBG1 + lv_unitTagString));
    if ((lv_dialogItem != c_invalidDialogControlId)) {
        if ((UnitHasBehavior2(lv_unit, "Contaminated") == true)) {
            libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIcon1 + lv_unitTagString)), "_Assets\\Textures\\btn-ability-zerg-fungalgrowth.dds", libAHLI_gv_obs);
        }
        else {
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIcon1 + lv_unitTagString)), libAHLI_gv_obs, false);
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsPylonPowerUp_Init () {
    libAHLI_gt_LabelsPylonPowerUp = TriggerCreate("libAHLI_gt_LabelsPylonPowerUp_Func");
    TriggerAddEventPlayerEffectUsed(libAHLI_gt_LabelsPylonPowerUp, c_playerAny, "AHLI_PowerLevelGained");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Pylon Power - Down
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsPylonPowerDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_LabelsPylonPowerSetPoweredDown(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsPylonPowerDown_Init () {
    libAHLI_gt_LabelsPylonPowerDown = TriggerCreate("libAHLI_gt_LabelsPylonPowerDown_Func");
    TriggerAddEventPlayerEffectUsed(libAHLI_gt_LabelsPylonPowerDown, c_playerAny, "AHLI_PowerLevelLost");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Pylon Power - Construction Finished
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsPylonPowerConstructionFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(lv_unit, "PowerUserQueue") == true) || (UnitHasBehavior2(lv_unit, "PowerUserQueueSmall") == true) || (UnitHasBehavior2(lv_unit, "PowerUserBaseDefenseSmall") == true)) && (PowerLevel(UnitGetOwner(lv_unit), UnitGetPosition(lv_unit), "PowerSource") <= 0)) {
        libAHLI_gf_LabelsPylonPowerSetPoweredDown(lv_unit);
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsPylonPowerConstructionFinished_Init () {
    libAHLI_gt_LabelsPylonPowerConstructionFinished = TriggerCreate("libAHLI_gt_LabelsPylonPowerConstructionFinished_Func");
    TriggerAddEventUnitConstructProgress(libAHLI_gt_LabelsPylonPowerConstructionFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Contaminate - Activate
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsContaminateActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;
    unit lv_unit;
    string lv_unitTagString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAHLI_gf_LabelsUnitCanEffectivelyBeContaminated(UnitGetType(lv_unit)) == true)) {
        lv_unitTagString = IntToString(UnitGetTag(lv_unit));
        lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIconBG1 + lv_unitTagString));
        if ((lv_dialogItem == c_invalidDialogControlId)) {
            DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DisruptIcon1\\Icon", lv_unit);
            lv_dialogItem = DialogControlLastCreated();
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
            libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsDisruptIcon1 + lv_unitTagString), lv_dialogItem);
            DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DisruptIcon1\\IconBG", lv_unit);
            lv_dialogItem = DialogControlLastCreated();
            DialogControlSetVisible(lv_dialogItem, libAHLI_gv_all_Players, false);
            libNtve_gf_SaveDataTableValueDialogItem(true, (libAHLI_gv_labelsDisruptIconBG1 + lv_unitTagString), lv_dialogItem);
        }
        else {
            if ((DialogControlIsVisible(lv_dialogItem, libAHLI_gv_obsID) == true)) {
                return false;
            }

        }
        DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
        lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIcon1 + lv_unitTagString));
        libNtve_gf_SetDialogItemImage(lv_dialogItem, "_Assets\\Textures\\btn-ability-zerg-fungalgrowth.dds", libAHLI_gv_obs);
        DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, true);
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsContaminateActivate_Init () {
    libAHLI_gt_LabelsContaminateActivate = TriggerCreate("libAHLI_gt_LabelsContaminateActivate_Func");
    TriggerAddEventUnitBehaviorChange(libAHLI_gt_LabelsContaminateActivate, null, "Contaminated", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Contaminate - Deactivate
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_LabelsContaminateDeactivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;
    unit lv_unit;
    string lv_unitTagString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_unit = EventUnit();
    lv_unitTagString = IntToString(UnitGetTag(lv_unit));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIconBG1 + lv_unitTagString));
    if ((lv_dialogItem != c_invalidDialogControlId) && (((UnitHasBehavior2(lv_unit, "PowerUserQueue") == false) && (UnitHasBehavior2(lv_unit, "PowerUserQueueSmall") == false) && (UnitHasBehavior2(lv_unit, "PowerUserBaseDefenseSmall") == false)) || (PowerLevel(UnitGetOwner(lv_unit), UnitGetPosition(lv_unit), "PowerSource") > 0))) {
        DialogControlSetVisible(lv_dialogItem, libAHLI_gv_obs, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libAHLI_gv_labelsDisruptIcon1 + lv_unitTagString)), libAHLI_gv_obs, false);
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_LabelsContaminateDeactivate_Init () {
    libAHLI_gt_LabelsContaminateDeactivate = TriggerCreate("libAHLI_gt_LabelsContaminateDeactivate_Func");
    TriggerAddEventUnitBehaviorChange(libAHLI_gt_LabelsContaminateDeactivate, null, "Contaminated", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_UpgradeNotificationsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    string lv_slotStr;
    int lv_players;

    // Automatic Variable Declarations
    const int auto69B01FF3_ae = libAHLI_gv_upgradeNotificationsMaxUISlots;
    const int auto69B01FF3_ai = 1;

    // Variable Initialization
    lv_players = PlayerGroupCount(libAHLI_gv_initial_Active_Players);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_players >= 1) && (lv_players <= 4)) && (UserDataGetInt("GameHeartSettings", "Notifications (Upgrades)", "Value", 1) == 1)) {
        libAHLI_gv_upgradeNotifications.lv_active = true;
        libAHLI_gf_RegisterUnitResearchProgressEvent(libAHLI_gt_UpgradeNotificationsResearchCancelled, null, c_unitProgressStageCancel);
        libAHLI_gf_RegisterUnitResearchProgressEvent(libAHLI_gt_UpgradeNotificationsResearchCompleted, null, c_unitProgressStageComplete);
        libAHLI_gf_RegisterUnitResearchProgressEvent(libAHLI_gt_UpgradeNotificationsResearchStarted, null, c_unitProgressStageStart);
        libAHLI_gf_RegisterTimerRunsOutEvent(libAHLI_gt_UpgradeNotificationsDestructionTimerRunsOut, null);
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TimerNotificationPanel");
        DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
        DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
        lv_slot = 0;
        for ( ; ( (auto69B01FF3_ai >= 0 && lv_slot <= auto69B01FF3_ae) || (auto69B01FF3_ai < 0 && lv_slot >= auto69B01FF3_ae) ) ; lv_slot += auto69B01FF3_ai ) {
            lv_slotStr = IntToString(lv_slot);
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + lv_slotStr));
            libAHLI_gv_upgradeNotifications.lv_itemPanel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/PlayerFrame/PlayerIdLabel")));
            libAHLI_gv_upgradeNotifications.lv_itemPlayerIdLabel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlHookupStandard(c_triggerControlTypeUnitTarget, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/UnitTargetFrame")));
            libAHLI_gv_upgradeNotifications.lv_itemUnitTargetFrame[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerStatus")));
            libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
            DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerBar")));
            libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libAHLI_gv_upgradeNotificationsVisibleTime, libAHLI_gv_obs);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerCountdown")));
            libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), libAHLI_gv_obs);
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerIcon")));
            libAHLI_gv_upgradeNotifications.lv_itemIcon[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", libAHLI_gv_obs);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerType")));
            libAHLI_gv_upgradeNotifications.lv_itemName[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), libAHLI_gv_obs);
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_UpgradeNotificationsInitialization_Init () {
    libAHLI_gt_UpgradeNotificationsInitialization = TriggerCreate("libAHLI_gt_UpgradeNotificationsInitialization_Func");
    TriggerAddEventMapInit(libAHLI_gt_UpgradeNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Destruction Timer Runs Out
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_UpgradeNotificationsDestructionTimerRunsOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    timer lv_timer;

    // Automatic Variable Declarations
    int autoB0493DF3_ae;
    const int autoB0493DF3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timer = EventTimer();
    autoB0493DF3_ae = MinI(libAHLI_gv_upgradeNotifications.lv_slotLastUsed, libAHLI_gv_upgradeNotificationsMaxUISlots);
    lv_slot = 0;
    for ( ; ( (autoB0493DF3_ai >= 0 && lv_slot <= autoB0493DF3_ae) || (autoB0493DF3_ai < 0 && lv_slot >= autoB0493DF3_ae) ) ; lv_slot += autoB0493DF3_ai ) {
        if ((lv_timer == libAHLI_gv_upgradeNotifications.lv_timerDestruction[lv_slot])) {
            libAHLI_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot);
            if ((libAHLI_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread >= 0)) {
                libAHLI_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread = MinI(libAHLI_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread, lv_slot);
            }
            else {
                libAHLI_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread = lv_slot;
            }
            return true;
        }

    }
    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_UpgradeNotificationsDestructionTimerRunsOut_Init () {
    libAHLI_gt_UpgradeNotificationsDestructionTimerRunsOut = TriggerCreate("libAHLI_gt_UpgradeNotificationsDestructionTimerRunsOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Cancelled
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_UpgradeNotificationsResearchCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libAHLI_gf_UpgradeNotificationsSearchFacilitySlot(lv_facility);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_slot >= 0)) {
        if ((lv_slot <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
            libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libAHLI_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
            TimerStart(libAHLI_gv_upgradeNotifications.lv_timerDestruction[lv_slot], 5.0, false, c_timeGame);
            if ((UnitIsAlive(lv_facility) == false)) {
                libAHLI_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_AHLI_9266D633"));
            }
            else {
                libAHLI_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_AHLI_DFAF5FF3"));
            }
        }
        else {
            libAHLI_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot);
        }
        return true;
    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_UpgradeNotificationsResearchCancelled_Init () {
    libAHLI_gt_UpgradeNotificationsResearchCancelled = TriggerCreate("libAHLI_gt_UpgradeNotificationsResearchCancelled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Completed
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_UpgradeNotificationsResearchCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libAHLI_gf_UpgradeNotificationsSearchFacilitySlot(lv_facility);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_slot >= 0)) {
        if ((lv_slot <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
            libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libAHLI_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
            libAHLI_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_AHLI_76FE8CD8"));
            libNtve_gf_SetDialogItemCurrentValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], libAHLI_gv_upgradeNotificationsVisibleTime, libAHLI_gv_obs);
            TimerStart(libAHLI_gv_upgradeNotifications.lv_timerDestruction[lv_slot], 5.0, false, c_timeGame);
        }
        else {
            libAHLI_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot);
        }
        return true;
    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_UpgradeNotificationsResearchCompleted_Init () {
    libAHLI_gt_UpgradeNotificationsResearchCompleted = TriggerCreate("libAHLI_gt_UpgradeNotificationsResearchCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Started
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_UpgradeNotificationsResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    string lv_upgrade;
    int lv_slot;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_slot = libAHLI_gv_upgradeNotifications.lv_slotLastUsed;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_slot < libAHLI_gv_upgradeNotificationsMaxFacilitySlots)) {
        lv_facility = EventUnit();
        if ((UnitIsAlive(lv_facility) == true)) {
            lv_slot += 1;
            libAHLI_gv_upgradeNotifications.lv_slotLastUsed = lv_slot;
            libAHLI_gv_upgradeNotifications.lv_slotFacility[lv_slot] = lv_facility;
            if ((lv_slot <= libAHLI_gv_upgradeNotificationsMaxUISlots)) {
                lv_upgrade = libNtve_gf_TriggeringProgressUpgrade();
                lv_player = EventPlayer();
                libAHLI_gf_UpgradeNotificationsSetSlotData(lv_slot, libAHLI_gf_UpgradeNotificationsUpgradeName(lv_upgrade), libAHLI_gf_IconofUpgrade(lv_upgrade, lv_player), lv_player, false, lv_facility);
                if ((libAHLI_gv_upgradeNotifications.lv_updateThreadRunning == false)) {
                    libAHLI_gv_upgradeNotifications.lv_updateThreadRunning = true;
                    libAHLI_gf_UpgradeNotificationsUpdateUIthreaded();
                }

                libNtve_gf_SetDialogItemText(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], StringToText(""), libAHLI_gv_obs);
                DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot], libAHLI_gv_obs, true);
                DialogControlSetVisible(libAHLI_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], libAHLI_gv_obs, false);
                libAHLI_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libAHLI_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
                libNtve_gf_SetDialogItemCurrentValue(libAHLI_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], 0.0, libAHLI_gv_obs);
                return true;
            }

        }

    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_UpgradeNotificationsResearchStarted_Init () {
    libAHLI_gt_UpgradeNotificationsResearchStarted = TriggerCreate("libAHLI_gt_UpgradeNotificationsResearchStarted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_WorkersKilledNotificationsInitialization_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_slot;
    int lv_count;
    int[4] lv_panel;
    int[4] lv_timeLabel;
    int[4] lv_icon;
    int[4] lv_workerColor;
    int[4] lv_background;
    string lv_slotStr;

    // Automatic Variable Declarations
    const int autoE2BFA55A_ae = 3;
    const int autoE2BFA55A_ai = 1;
    playergroup autoA9BD4D01_g;
    int autoA9BD4D01_var;

    // Variable Initialization
    lv_count = PlayerGroupCount(libAHLI_gv_initial_Active_Players);
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_panel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_timeLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_icon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_workerColor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_background[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_count >= 1) && (lv_count <= 4)) && (UserDataGetInt("GameHeartSettings", "Notifications (Workers Killed)", "Value", 1) == 1)) {
        libAHLI_gv_workersKilledNotifications.lv_active = true;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/WorkerNotificationPanel");
        DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
        DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
        lv_slot = 0;
        for ( ; ( (autoE2BFA55A_ai >= 0 && lv_slot <= autoE2BFA55A_ae) || (autoE2BFA55A_ai < 0 && lv_slot >= autoE2BFA55A_ae) ) ; lv_slot += autoE2BFA55A_ai ) {
            lv_slotStr = IntToString(lv_slot);
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + lv_slotStr));
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            lv_panel[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (lv_slotStr + "/WorkerCount")));
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), libAHLI_gv_obs);
            lv_timeLabel[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (lv_slotStr + "/WorkerType")));
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_obs, true);
            lv_icon[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (lv_slotStr + "/WorkerColor/PlayerFrame/PlayerIdLabel")));
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            lv_workerColor[lv_slot] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (lv_slotStr + "/WorkerBackground/PlayerFrame/PlayerIdLabel")));
            DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
            lv_background[lv_slot] = DialogControlLastCreated();
        }
        lv_count = 0;
        autoA9BD4D01_g = libAHLI_gv_initial_Active_Players;
        autoA9BD4D01_var = -1;
        while (true) {
            autoA9BD4D01_var = PlayerGroupNextPlayer(autoA9BD4D01_g, autoA9BD4D01_var);
            if (autoA9BD4D01_var < 0) { break; }
            libAHLI_gv_workersKilledNotifications.lv_itemPanel[autoA9BD4D01_var] = lv_panel[lv_count];
            libAHLI_gv_workersKilledNotifications.lv_itemCountLabel[autoA9BD4D01_var] = lv_timeLabel[lv_count];
            libAHLI_gv_workersKilledNotifications.lv_itemIcon[autoA9BD4D01_var] = lv_icon[lv_count];
            libAHLI_gv_workersKilledNotifications.lv_itemWorkerPlayerIdLabel[autoA9BD4D01_var] = lv_workerColor[lv_count];
            libAHLI_gv_workersKilledNotifications.lv_itemKillerPlayerIdLabel[autoA9BD4D01_var] = lv_background[lv_count];
            libAHLI_gv_workersKilledNotifications.lv_timerDestruction[autoA9BD4D01_var] = TimerCreate();
            libAHLI_gf_RegisterTimerRunsOutEvent(libAHLI_gt_WorkersKilledNotificationsTimerRunsOut, libAHLI_gv_workersKilledNotifications.lv_timerDestruction[autoA9BD4D01_var]);
            lv_count += 1;
        }
        libAHLI_gf_RegisterUnitDiesEvent(libAHLI_gt_WorkersKilledNotificationsWorkerKilled, null);
        return true;
    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_WorkersKilledNotificationsInitialization_Init () {
    libAHLI_gt_WorkersKilledNotificationsInitialization = TriggerCreate("libAHLI_gt_WorkersKilledNotificationsInitialization_Func");
    TriggerAddEventMapInit(libAHLI_gt_WorkersKilledNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Timer Runs Out
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_WorkersKilledNotificationsTimerRunsOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    timer lv_timer;

    // Automatic Variable Declarations
    const int autoA8D51FBB_ae = libAHLI_gv_workersKilledNotificationsMaxUISlots;
    const int autoA8D51FBB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timer = EventTimer();
    lv_slot = 0;
    for ( ; ( (autoA8D51FBB_ai >= 0 && lv_slot <= autoA8D51FBB_ae) || (autoA8D51FBB_ai < 0 && lv_slot >= autoA8D51FBB_ae) ) ; lv_slot += autoA8D51FBB_ai ) {
        if ((lv_timer == libAHLI_gv_workersKilledNotifications.lv_timerDestruction[lv_slot])) {
            libAHLI_gv_workersKilledNotifications.lv_slotStatus[lv_slot] = libAHLI_ge_WorkersKilledNotificationsSlotStatus_Hidden;
            DialogControlSetVisible(libAHLI_gv_workersKilledNotifications.lv_itemPanel[lv_slot], libAHLI_gv_obs, false);
            return true;
        }

    }
    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_WorkersKilledNotificationsTimerRunsOut_Init () {
    libAHLI_gt_WorkersKilledNotificationsTimerRunsOut = TriggerCreate("libAHLI_gt_WorkersKilledNotificationsTimerRunsOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Worker Killed
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_WorkersKilledNotificationsWorkerKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadUnitOwner;
    unit lv_deadUnit;
    unit lv_killingUnit;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeRemove) == false)) {
        lv_deadUnit = EventUnit();
        if ((UnitTestState(lv_deadUnit, c_unitStateHallucination) == false)) {
            lv_unitType = UnitGetType(lv_deadUnit);
            lv_deadUnitOwner = UnitGetOwner(lv_deadUnit);
            if (((lv_unitType == "Drone") || (lv_unitType == "Probe") || (lv_unitType == "SCV") || (lv_unitType == "DroneBurrowed")) && (libAHLI_gv_workersKilledNotifications.lv_itemPanel[lv_deadUnitOwner] != c_invalidDialogControlId)) {
                lv_killingUnit = libNtve_gf_KillingUnit();
                if ((libAHLI_gv_workersKilledNotifications.lv_slotStatus[lv_deadUnitOwner] == libAHLI_ge_WorkersKilledNotificationsSlotStatus_Visible)) {
                    libAHLI_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner] = (libAHLI_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner] + 1);
                }
                else {
                    libAHLI_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner] = 1;
                }
                libNtve_gf_SetDialogItemText(libAHLI_gv_workersKilledNotifications.lv_itemCountLabel[lv_deadUnitOwner], IntToText(libAHLI_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner]), libAHLI_gv_obs);
                libNtve_gf_SetDialogItemImage(libAHLI_gv_workersKilledNotifications.lv_itemIcon[lv_deadUnitOwner], libAHLI_gf_IconofUnit(lv_unitType, lv_deadUnitOwner), libAHLI_gv_obs);
                if ((UnitIsValid(lv_killingUnit) == true)) {
                    libNtve_gf_SetDialogItemText(libAHLI_gv_workersKilledNotifications.lv_itemKillerPlayerIdLabel[lv_deadUnitOwner], IntToText(UnitGetOwner(lv_killingUnit)), libAHLI_gv_obs);
                }
                else {
                    libNtve_gf_SetDialogItemText(libAHLI_gv_workersKilledNotifications.lv_itemKillerPlayerIdLabel[lv_deadUnitOwner], StringToText(""), libAHLI_gv_obs);
                }
                libNtve_gf_SetDialogItemText(libAHLI_gv_workersKilledNotifications.lv_itemWorkerPlayerIdLabel[lv_deadUnitOwner], IntToText(lv_deadUnitOwner), libAHLI_gv_obs);
                libAHLI_gv_workersKilledNotifications.lv_slotStatus[lv_deadUnitOwner] = libAHLI_ge_WorkersKilledNotificationsSlotStatus_Visible;
                if (((libAHLI_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner] > 1) || (libAHLI_gf_WorkersKilledNotificationsIsinDistanceofMainBuilding(UnitGetPosition(lv_deadUnit), lv_deadUnitOwner, 50.0) == true))) {
                    DialogControlSetVisible(libAHLI_gv_workersKilledNotifications.lv_itemPanel[lv_deadUnitOwner], libAHLI_gv_obs, true);
                    DialogControlSendAnimationEvent(libAHLI_gv_workersKilledNotifications.lv_itemCountLabel[lv_deadUnitOwner], libAHLI_gv_obs, "textUpdated");
                }

                TimerStart(libAHLI_gv_workersKilledNotifications.lv_timerDestruction[lv_deadUnitOwner], libAHLI_gv_workersKilledNotificationsVisibleGameTime, false, c_timeGame);
                return true;
            }

        }

    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_WorkersKilledNotificationsWorkerKilled_Init () {
    libAHLI_gt_WorkersKilledNotificationsWorkerKilled = TriggerCreate("libAHLI_gt_WorkersKilledNotificationsWorkerKilled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Notifications - Drop
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_MapNotificationsDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    unit lv_unit;
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCargoValue(lv_unit, c_unitCargoSpaceUsed) == UnitCargoValue(lv_unit, c_unitCargoSpaceTotal)) && (UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeStructure) == false) && (libAHLI_gf_MapNotificationsCargoUnitshaveFullHealth(lv_unit) == true)) {
        lv_position = UnitGetPosition(lv_unit);
        if (((libAHLI_gv_mapNotifications.lv_mostRecentPingLocation == null) || (TimerGetElapsed(libAHLI_gv_mapNotifications.lv_mostRecentTimer) >= libAHLI_gv_mapNotifications.lv_pingDuration) || (DistanceBetweenPoints(libAHLI_gv_mapNotifications.lv_mostRecentPingLocation, lv_position) > libAHLI_gv_mapNotifications.lv_minimumPickupSpacing))) {
            libNtve_gf_CreatePingFacingAngle(libAHLI_gv_obs, "PingBonus", lv_position, Color(100.00, 100.00, 0.00), libAHLI_gv_mapNotifications.lv_pingDuration, -90.0);
            lv_ping = PingLastCreated();
            PingSetObserver(lv_ping, true);
            PingSetUnit(lv_ping, lv_unit);
            libAHLI_gv_mapNotifications.lv_mostRecentPingLocation = lv_position;
            TimerStart(libAHLI_gv_mapNotifications.lv_mostRecentTimer, libAHLI_gv_mapNotifications.lv_pingDuration, false, c_timeGame);
            return true;
        }

    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_MapNotificationsDrop_Init () {
    libAHLI_gt_MapNotificationsDrop = TriggerCreate("libAHLI_gt_MapNotificationsDrop_Func");
    TriggerAddEventUnitCargo(libAHLI_gt_MapNotificationsDrop, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Notifications - Scanner Sweep
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_MapNotificationsScannerSweep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(libAHLI_gv_obs, "ScannerSweepModel", EventUnitTargetPoint(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)), libAHLI_gv_mapNotifications.lv_scannerSweepDuration, 0.0);
    PingSetObserver(PingLastCreated(), true);
    PingSetScale(PingLastCreated(), 0.035);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_MapNotificationsScannerSweep_Init () {
    libAHLI_gt_MapNotificationsScannerSweep = TriggerCreate("libAHLI_gt_MapNotificationsScannerSweep_Func");
    TriggerAddEventUnitAbility(libAHLI_gt_MapNotificationsScannerSweep, null, AbilityCommand("ScannerSweep", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minimap Frustum - Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_MinimapFrustumInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_baseScale = 0.5;
    const fixed lv_baseMapSize = 108.0;
    fixed lv_mapScale;
    bool lv_isActive;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataGetInt("GameHeartSettings", "Minimap Frustum", "Value", 1) == 1) && (PlayerGroupCount(PlayerGroupActive()) == 2) && (PlayerGroupCount(GameAttributePlayersForTeam(1)) == 1) && (PlayerGroupCount(GameAttributePlayersForTeam(2)) == 1)) {
        libAHLI_gv_minimapFrustum.lv_playerOne = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
        libAHLI_gv_minimapFrustum.lv_playerTwo = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
        lv_mapScale = (lv_baseMapSize / MaxF(libNtve_gf_WidthOfRegion(RegionPlayableMap()), libNtve_gf_HeightOfRegion(RegionPlayableMap())));
        lv_mapScale = (lv_mapScale * lv_baseScale);
        if ((PlayerType(libAHLI_gv_minimapFrustum.lv_playerOne) == c_playerTypeUser)) {
            lv_isActive = true;
            libNtve_gf_CreatePingFacingAngle(libAHLI_gv_obs, "AHLI_PlayerCameraModel", CameraGetTarget(libAHLI_gv_minimapFrustum.lv_playerOne), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libAHLI_gv_minimapFrustum.lv_playerOne, false)), 0.0, 270.0);
            PingSetScale(PingLastCreated(), lv_mapScale);
            libAHLI_gv_minimapFrustum.lv_ping[0] = PingLastCreated();
            libAHLI_gf_RegisterCameraMoveEvent(libAHLI_gt_MinimapFrustumPlayerCameraMoved, libAHLI_gv_minimapFrustum.lv_playerOne, c_cameraMoveReasonAny);
        }

        if ((PlayerType(libAHLI_gv_minimapFrustum.lv_playerTwo) == c_playerTypeUser)) {
            lv_isActive = true;
            libNtve_gf_CreatePingFacingAngle(libAHLI_gv_obs, "AHLI_PlayerCameraModel", CameraGetTarget(libAHLI_gv_minimapFrustum.lv_playerTwo), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libAHLI_gv_minimapFrustum.lv_playerTwo, false)), 0.0, 270.0);
            PingSetScale(PingLastCreated(), lv_mapScale);
            libAHLI_gv_minimapFrustum.lv_ping[1] = PingLastCreated();
            libAHLI_gf_RegisterCameraMoveEvent(libAHLI_gt_MinimapFrustumPlayerCameraMoved, libAHLI_gv_minimapFrustum.lv_playerTwo, c_cameraMoveReasonAny);
        }

        if ((lv_isActive == false)) {
            return false;
        }
        else {
            libAHLI_gv_minimapFrustum.lv_active = lv_isActive;
            libAHLI_gf_RegisterPlayerLeavesEvent(libAHLI_gt_MinimapFrustumPlayerLeaves, c_playerAny, c_gameResultUndecided);
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_MinimapFrustumInitialization_Init () {
    libAHLI_gt_MinimapFrustumInitialization = TriggerCreate("libAHLI_gt_MinimapFrustumInitialization_Func");
    TriggerAddEventMapInit(libAHLI_gt_MinimapFrustumInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minimap Frustum - Player Camera Moved
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_MinimapFrustumPlayerCameraMoved_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == libAHLI_gv_minimapFrustum.lv_playerOne)) {
        PingSetPosition(libAHLI_gv_minimapFrustum.lv_ping[0], CameraGetTarget(libAHLI_gv_minimapFrustum.lv_playerOne));
    }
    else {
        PingSetPosition(libAHLI_gv_minimapFrustum.lv_ping[1], CameraGetTarget(libAHLI_gv_minimapFrustum.lv_playerTwo));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_MinimapFrustumPlayerCameraMoved_Init () {
    libAHLI_gt_MinimapFrustumPlayerCameraMoved = TriggerCreate("libAHLI_gt_MinimapFrustumPlayerCameraMoved_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minimap Frustum - Player Leaves
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_MinimapFrustumPlayerLeaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAHLI_gv_minimapFrustum.lv_playerOne == lv_player)) {
        if ((libAHLI_gv_minimapFrustum.lv_ping[0] != c_invalidPingId)) {
            PingDestroy(libAHLI_gv_minimapFrustum.lv_ping[0]);
        }

    }
    else {
        if ((libAHLI_gv_minimapFrustum.lv_playerTwo == lv_player)) {
            if ((libAHLI_gv_minimapFrustum.lv_ping[1] != c_invalidPingId)) {
                PingDestroy(libAHLI_gv_minimapFrustum.lv_ping[1]);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_MinimapFrustumPlayerLeaves_Init () {
    libAHLI_gt_MinimapFrustumPlayerLeaves = TriggerCreate("libAHLI_gt_MinimapFrustumPlayerLeaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Report - Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_BattleReportInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_battleReportEnabled;
    int lv_i;

    // Automatic Variable Declarations
    const int auto90DBBF1F_ae = libAHLI_gv_battleReportMaxKilledUnitTypeSlot;
    const int auto90DBBF1F_ai = 1;
    const int auto3089C34C_ae = libAHLI_gv_battleReportMaxAbilitySlot;
    const int auto3089C34C_ai = 1;

    // Variable Initialization
    lv_battleReportEnabled = (UserDataGetInt("GameHeartSettings", "Battle Report", "Value", 1) == 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_battleReportEnabled == true) && (PlayerGroupCount(libAHLI_gv_initial_Active_Players) == 2) && (PlayerGroupCount(GameAttributePlayersForTeam(1)) == 1) && (PlayerGroupCount(GameAttributePlayersForTeam(2)) == 1)) {
        libAHLI_gf_RegisterUnitTakesDamageEvent(libAHLI_gt_BattleReportUnitIsDamaged, null, c_unitDamageTypeAny, c_unitDamageEither, null);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("ForceField", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("GuardianShield", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("AdeptPhaseShift", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationProbe", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationZealot", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationAdept", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationStalker", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationImmortal", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationHighTemplar", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationArchon", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationVoidRay", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationPhoenix", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationWarpPrism", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationOracle", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("HallucinationColossus", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("Blink", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("DarkTemplarBlink", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("Feedback", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("PsiStorm", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("PurificationNovaTargeted", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("GravitonBeam", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("VoidRaySwarmDamageBoost", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("OracleRevelation", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("OracleStasisTrapBuild", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("OracleWeapon", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("MassRecall", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("TemporalField", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("NexusMassRecall", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("BatteryOvercharge", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("Stimpack", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("StimpackMarauder", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("KD8Charge", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("EMP", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("ChannelSnipe", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("MedivacSpeedBoost", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("BuildAutoTurret", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("RavenScramblerMissile", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("RavenShredderMissile", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("Hyperjump", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("LockOn", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("RavagerCorrosiveBile", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("ViperConsumeStructure", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("Yoink", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("BlindingCloud", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("ParasiticBomb", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("CausticSpray", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("SpawnLocustsTargeted", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("AmorphousArmorcloud", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("FungalGrowth", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting, null, AbilityCommand("NeuralParasite", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("Contaminate", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterAbilityUsedEvent(libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart, null, AbilityCommand("Transfusion", 0), c_unitAbilStageExecute, false);
        libAHLI_gf_RegisterUnitDiesEvent(libAHLI_gt_BattleReportUnitDies, null);
        libAHLI_gv_battleReport.lv_battleEndingTimer = TimerCreate();
        libAHLI_gf_RegisterTimerExpiresEvent(libAHLI_gt_BattleReportBattleEndingTimerExpires, libAHLI_gv_battleReport.lv_battleEndingTimer);
        libAHLI_gv_battleReport.lv_noUiUpdateTimer = TimerCreate();
        libAHLI_gf_RegisterTimerExpiresEvent(libAHLI_gt_BattleReportNoUiUpdateTimerExpires, libAHLI_gv_battleReport.lv_noUiUpdateTimer);
        libAHLI_gv_battleReport.lv_playerIdSide[0] = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
        libAHLI_gv_battleReport.lv_playerIdSide[1] = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/BattleReport2");
        DialogControlSetVisible(DialogControlLastCreated(), libAHLI_gv_all_Players, false);
        DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/BattleReport2/PlayerA/PlayerIdInput");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(libAHLI_gv_battleReport.lv_playerIdSide[0]), libAHLI_gv_obs);
        DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/BattleReport2/PlayerB/PlayerIdInput");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(libAHLI_gv_battleReport.lv_playerIdSide[1]), libAHLI_gv_obs);
        DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/BattleReport2/Header/BattleLengthLabel");
        libAHLI_gv_battleReport.lv_uiBattleDurationLabel = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/FullscreenUpperContainer/BattleReport2/Header/BattleActiveIndicator");
        libAHLI_gv_battleReport.lv_uiBattleActiveIndicator = DialogControlLastCreated();
        lv_i = 0;
        for ( ; ( (auto90DBBF1F_ai >= 0 && lv_i <= auto90DBBF1F_ae) || (auto90DBBF1F_ai < 0 && lv_i >= auto90DBBF1F_ae) ) ; lv_i += auto90DBBF1F_ai ) {
            DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/BattleReport2/ButtonsL/UnitButtons/Unit" + IntToString(lv_i)));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), null, libAHLI_gv_obs);
            libAHLI_gv_battleReportSideData[0].lv_uiUnitTypeButton[lv_i] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/BattleReport2/ButtonsR/UnitButtons/Unit" + IntToString(lv_i)));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), null, libAHLI_gv_obs);
            libAHLI_gv_battleReportSideData[1].lv_uiUnitTypeButton[lv_i] = DialogControlLastCreated();
        }
        lv_i = 0;
        for ( ; ( (auto3089C34C_ai >= 0 && lv_i <= auto3089C34C_ae) || (auto3089C34C_ai < 0 && lv_i >= auto3089C34C_ae) ) ; lv_i += auto3089C34C_ai ) {
            DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/BattleReport2/ButtonsL/AbilityButtons/Abil" + IntToString(lv_i)));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), null, libAHLI_gv_obs);
            libAHLI_gv_battleReportSideData[0].lv_uiAbilityButton[lv_i] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/BattleReport2/ButtonsR/AbilityButtons/Abil" + IntToString(lv_i)));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), null, libAHLI_gv_obs);
            libAHLI_gv_battleReportSideData[1].lv_uiAbilityButton[lv_i] = DialogControlLastCreated();
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_BattleReportInitialization_Init () {
    libAHLI_gt_BattleReportInitialization = TriggerCreate("libAHLI_gt_BattleReportInitialization_Func");
    TriggerAddEventMapInit(libAHLI_gt_BattleReportInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Report - Unit Is Damaged
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_BattleReportUnitIsDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_victimPlayer;
    int lv_opposingSideIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victimPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_victimPlayer != EventUnitDamageSourcePlayer()) && (EventUnitDamageAttempted() > 0.0)) {
        lv_opposingSideIndex = libAHLI_gf_BattleReportGetOpposingPlayerSideIndex(lv_victimPlayer);
        if ((lv_opposingSideIndex != -1)) {
            if ((!(libAHLI_gv_battleReport.lv_battleActive))) {
                libAHLI_gf_BattleReportStartBattle();
            }
            else {
                libAHLI_gv_battleReport.lv_resetBattleEndingTimer = true;
            }
            libAHLI_gv_battleReport.lv_updateDueToDamage = true;
            libAHLI_gv_battleReportSideData[lv_opposingSideIndex].lv_damageDealt += EventUnitDamageAmount();
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_BattleReportUnitIsDamaged_Init () {
    libAHLI_gt_BattleReportUnitIsDamaged = TriggerCreate("libAHLI_gt_BattleReportUnitIsDamaged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Report - Unit Dies
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_BattleReportUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    string lv_unitTypeForCounter;
    string lv_unitTypeLeaderAlias;
    unit lv_unit;
    int lv_opposingSideIndex;
    int lv_mineralsCost;
    int lv_vespeneCost;
    int lv_owner;
    bool lv_deathIsCancel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (libAHLI_gv_battleReport.lv_battleActive) {
        lv_unit = EventUnit();
        if ((UnitHasBehavior2(lv_unit, "NeuralParasite") == true)) {
            lv_owner = UnitGetOwner(lv_unit);
            lv_opposingSideIndex = libAHLI_gf_BattleReportGetPlayerSideIndex(lv_owner);
            lv_owner = libAHLI_gv_battleReport.lv_playerIdSide[libAHLI_gf_BattleReportGetOpposingPlayerSideIndex(lv_owner)];
        }
        else {
            lv_owner = UnitGetOwner(lv_unit);
            lv_opposingSideIndex = libAHLI_gf_BattleReportGetOpposingPlayerSideIndex(lv_owner);
        }
        if ((lv_opposingSideIndex != -1)) {
            lv_unitType = UnitGetType(lv_unit);
            if ((UnitHasBehavior2(lv_unit, "Hallucination") == false) && (EventUnitDamageDeathCheck(c_deathTypeRemove) == false)) {
                lv_deathIsCancel = EventUnitDamageDeathCheck(c_deathTypeCancel);
                if ((lv_deathIsCancel == false) && libAHLI_gf_BattleReportIsTrackedUnitType(lv_unit, lv_unitType, EventUnitDamageDeathCheck(c_deathTypeTimeout))) {
                    lv_unitTypeLeaderAlias = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "LeaderAlias", lv_owner));
                    if ((lv_unitTypeLeaderAlias != null) && (lv_unitTypeLeaderAlias != lv_unitType)) {
                        lv_unitType = lv_unitTypeLeaderAlias;
                    }

                    lv_unitTypeForCounter = lv_unitType;
                    if ((lv_unitType == "BanelingCocoon")) {
                        lv_unitTypeForCounter = "Zergling";
                    }
                    else {
                        if ((lv_unitType == "RavagerCocoon")) {
                            lv_unitTypeForCounter = "Roach";
                        }
                        else {
                            if ((lv_unitType == "BroodLordCocoon")) {
                                lv_unitTypeForCounter = "Corruptor";
                            }
                            else {
                                if ((lv_unitType == "LurkerMPEgg")) {
                                    lv_unitTypeForCounter = "Hydralisk";
                                }
                                else {
                                    if ((lv_unitType == "TransportOverlordCocoon")) {
                                        lv_unitTypeForCounter = "Overlord";
                                    }
                                    else {
                                        if ((lv_unitType == "OverlordCocoon")) {
                                            if ((UnitHasBehavior2(lv_unit, "AHLI_fixUnitLostResourcesOfOverlordTransport") == true)) {
                                                lv_unitTypeForCounter = "OverlordTransport";
                                            }
                                            else {
                                                lv_unitTypeForCounter = "Overlord";
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                    libAHLI_gf_BattleReportIncrementUnitTypeKill(lv_opposingSideIndex, lv_unitTypeForCounter);
                }

                if ((lv_unitType != "AutoTurret") && (lv_unitType != "MULE") && ((lv_deathIsCancel == false) || (UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure) == true))) {
                    lv_mineralsCost = libAHLI_gf_GetFixedUnitResourceCost(lv_unit, c_unitCostMinerals, lv_owner);
                    lv_vespeneCost = libAHLI_gf_GetFixedUnitResourceCost(lv_unit, c_unitCostVespene, lv_owner);
                    if (((lv_deathIsCancel == true) || (EventUnitDamageDeathCheck(c_deathTypeSalvage) == true))) {
                        if ((UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure) == true) && (UnitTypeTestAttribute(lv_unitType, c_unitAttributeBiological) == true) && (lv_unitType != "NydusCanal")) {
                            lv_mineralsCost = MaxI((lv_mineralsCost - CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Drone", "CostResource[" + IntToString(0) + "]", lv_owner)), 0);
                            lv_vespeneCost = MaxI((lv_vespeneCost - CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Drone", "CostResource[" + IntToString(1) + "]", lv_owner)), 0);
                        }

                        lv_mineralsCost /= 4;
                        lv_vespeneCost /= 4;
                    }

                    if (((lv_mineralsCost > 0) || (lv_vespeneCost > 0))) {
                        libAHLI_gf_BattleReportIncrementResourceDamage(lv_opposingSideIndex, lv_mineralsCost, lv_vespeneCost);
                    }

                }

                return true;
            }

        }

    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_BattleReportUnitDies_Init () {
    libAHLI_gt_BattleReportUnitDies = TriggerCreate("libAHLI_gt_BattleReportUnitDies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Report - Tracked Ability Used A (battle starting)
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sideIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sideIndex = libAHLI_gf_BattleReportGetPlayerSideIndex(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_sideIndex != -1)) {
        if (libAHLI_gv_battleReport.lv_battleActive) {
            libAHLI_gv_battleReport.lv_resetBattleEndingTimer = true;
        }
        else {
            libAHLI_gf_BattleReportStartBattle();
        }
        libAHLI_gf_BattleReportIncrementAbilityUsage(lv_sideIndex, EventUnitAbility());
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting_Init () {
    libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting = TriggerCreate("libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Report - Tracked Ability Used B (no battle start)
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sideIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (libAHLI_gv_battleReport.lv_battleActive) {
        lv_sideIndex = libAHLI_gf_BattleReportGetPlayerSideIndex(EventPlayer());
        if ((lv_sideIndex != -1)) {
            libAHLI_gf_BattleReportIncrementAbilityUsage(lv_sideIndex, EventUnitAbility());
        }

    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart_Init () {
    libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart = TriggerCreate("libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Report - BattleEndingTimer Expires
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_BattleReportBattleEndingTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gf_BattleReportEndBattle();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_BattleReportBattleEndingTimerExpires_Init () {
    libAHLI_gt_BattleReportBattleEndingTimerExpires = TriggerCreate("libAHLI_gt_BattleReportBattleEndingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Report - NoUiUpdateTimer Expires
//--------------------------------------------------------------------------------------------------
bool libAHLI_gt_BattleReportNoUiUpdateTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAHLI_gv_battleReport.lv_noUiUpdates = false;
    if ((libAHLI_gv_battleReport.lv_battleActive == true)) {
        DialogControlSetEnabled(libAHLI_gv_battleReport.lv_uiBattleActiveIndicator, libAHLI_gv_obs, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAHLI_gt_BattleReportNoUiUpdateTimerExpires_Init () {
    libAHLI_gt_BattleReportNoUiUpdateTimerExpires = TriggerCreate("libAHLI_gt_BattleReportNoUiUpdateTimerExpires_Func");
}

void libAHLI_InitTriggers () {
    libAHLI_gt_GameHeartInitialization_Init();
    libAHLI_gt_GameHeartRevealDebrisFromDestructubleTowers_Init();
    libAHLI_gt_ProductionTabInit_Init();
    libAHLI_gt_ProductionTabConstructionUnitWarpMergeStarted_Init();
    libAHLI_gt_ProductionTabConstructionUnitWarpMergeEnded_Init();
    libAHLI_gt_ProductionTabTrainingStarted_Init();
    libAHLI_gt_ProductionTabTrainingEnded_Init();
    libAHLI_gt_ProductionTabResearchStarted_Init();
    libAHLI_gt_ProductionTabResearchEnded_Init();
    libAHLI_gt_ProductionTabArmingStarted_Init();
    libAHLI_gt_ProductionTabArmingEnded_Init();
    libAHLI_gt_ProductionTabMorphStarted_Init();
    libAHLI_gt_ProductionTabMorphFinished_Init();
    libAHLI_gt_ProductionTabMorphCanceled_Init();
    libAHLI_gt_ProductionTabChronoBoostActivates_Init();
    libAHLI_gt_ProductionTabChronoBoostDeactivates_Init();
    libAHLI_gt_ProductionTabContaminateActivates_Init();
    libAHLI_gt_ProductionTabContaminateDeactivates_Init();
    libAHLI_gt_ObserverUiAssistInitialization_Init();
    libAHLI_gt_ObserverUiAssistPlayerLeavesGameDefeat_Init();
    libAHLI_gt_ObserverUiAssistPlayerLeavesGameTie_Init();
    libAHLI_gt_ObserverUiAssistPlayerLeavesGameVictory_Init();
    libAHLI_gt_ObserverUiAssistCreepPercentage_Init();
    libAHLI_gt_ArchonMergeSaveResourceOffset_Init();
    libAHLI_gt_ArchonDuplicatedTemplarsDied_Init();
    libAHLI_gt_OverlordTransportMorphCompleted_Init();
    libAHLI_gt_OverseerFromOverlordTransportDied_Init();
    libAHLI_gt_GraphsInitialization_Init();
    libAHLI_gt_GraphsTimer_Init();
    libAHLI_gt_LabelsInitialization_Init();
    libAHLI_gt_LabelsUnitCreated_Init();
    libAHLI_gt_LabelsUnitTrainingStarted_Init();
    libAHLI_gt_LabelsResearchStarted_Init();
    libAHLI_gt_LabelsUnitTrainingStopped_Init();
    libAHLI_gt_LabelsResearchStopped_Init();
    libAHLI_gt_LabelsReactorDestroyed_Init();
    libAHLI_gt_LabelsPylonPowerUp_Init();
    libAHLI_gt_LabelsPylonPowerDown_Init();
    libAHLI_gt_LabelsPylonPowerConstructionFinished_Init();
    libAHLI_gt_LabelsContaminateActivate_Init();
    libAHLI_gt_LabelsContaminateDeactivate_Init();
    libAHLI_gt_UpgradeNotificationsInitialization_Init();
    libAHLI_gt_UpgradeNotificationsDestructionTimerRunsOut_Init();
    libAHLI_gt_UpgradeNotificationsResearchCancelled_Init();
    libAHLI_gt_UpgradeNotificationsResearchCompleted_Init();
    libAHLI_gt_UpgradeNotificationsResearchStarted_Init();
    libAHLI_gt_WorkersKilledNotificationsInitialization_Init();
    libAHLI_gt_WorkersKilledNotificationsTimerRunsOut_Init();
    libAHLI_gt_WorkersKilledNotificationsWorkerKilled_Init();
    libAHLI_gt_MapNotificationsDrop_Init();
    libAHLI_gt_MapNotificationsScannerSweep_Init();
    libAHLI_gt_MinimapFrustumInitialization_Init();
    libAHLI_gt_MinimapFrustumPlayerCameraMoved_Init();
    libAHLI_gt_MinimapFrustumPlayerLeaves_Init();
    libAHLI_gt_BattleReportInitialization_Init();
    libAHLI_gt_BattleReportUnitIsDamaged_Init();
    libAHLI_gt_BattleReportUnitDies_Init();
    libAHLI_gt_BattleReportTrackedAbilityUsedAbattlestarting_Init();
    libAHLI_gt_BattleReportTrackedAbilityUsedBnobattlestart_Init();
    libAHLI_gt_BattleReportBattleEndingTimerExpires_Init();
    libAHLI_gt_BattleReportNoUiUpdateTimerExpires_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAHLI_InitLib_completed = false;

void libAHLI_InitLib () {
    if (libAHLI_InitLib_completed) {
        return;
    }

    libAHLI_InitLib_completed = true;

    libAHLI_InitLibraries();
    libAHLI_InitVariables();
    libAHLI_InitTriggers();
}

