include "TriggerLibs/NativeLib"

include "LibGHLo_h"

//--------------------------------------------------------------------------------------------------
// Library: WCS GameHeart Fix
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGHLo_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libGHLo_InitVariables_completed = false;

void libGHLo_InitVariables () {
    int init_i;
    int init_i1;

    if (libGHLo_InitVariables_completed) {
        return;
    }

    libGHLo_InitVariables_completed = true;

    libGHLo_gv_all_Players = PlayerGroupAll();
    libGHLo_gv_initial_Active_Players = PlayerGroupActive();
    libGHLo_gv_obsID = CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny);
    libGHLo_gv_obs = PlayerGroupSingle(libGHLo_gv_obsID);
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libGHLo_gv_chronoBoostMAX_SLOTS; init_i1 += 1) {
            libGHLo_gv_chronoBoost[init_i].lv_slots[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libGHLo_gv_chronoBoostMAX_SLOTS; init_i1 += 1) {
            libGHLo_gv_chronoBoost[init_i].lv_slotContents[init_i1] = "";
        }
        libGHLo_gv_chronoBoost[init_i].lv_lastUsedSlot = -1;
    }
    libGHLo_gv_graphsGeneral.lv_intervals = 6;
    libGHLo_gv_graphsGeneral.lv_container = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libGHLo_gv_graphsData[init_i].lv_graph = c_invalidDialogControlId;
        libGHLo_gv_graphsData[init_i].lv_title = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemPlayerIdLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_timerDestruction[init_i1] = TimerCreate();
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_slotStatus[init_i1] = libGHLo_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
    }
    libGHLo_gv_upgradeNotifications.lv_slotLastUsed = -1;
    libGHLo_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread = -1;
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemKillerPlayerIdLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemWorkerPlayerIdLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemCountLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_timerDestruction[init_i1] = TimerCreate();
    }
    libGHLo_gv_workersKilledNotifications.lv_slotLastUsed = -1;
    libGHLo_gv_mapNotifications.lv_minimumPickupSpacing = 10.0;
    libGHLo_gv_mapNotifications.lv_scannerSweepDuration = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ScannerSweep", "ExpireDelay", c_playerAny)) / GameGetSpeed());
    libGHLo_gv_mapNotifications.lv_pingDuration = 8.0;
    libGHLo_gv_mapNotifications.lv_mostRecentTimer = TimerCreate();
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libGHLo_gv_minimapFrustum.lv_ping[init_i1] = c_invalidPingId;
    }
}

// Presets
// Functions
void libGHLo_gf_ApplySkinSet (string lp_skinSet, int lp_player) {
    // Variable Declarations
    string lv_itSkinPack;
    string lv_itCollectionId;
    string lv_itReward;
    string lv_itSkin;

    // Automatic Variable Declarations
    int autoCACECB31_catalog;
    int autoCACECB31_i;
    int auto16DDBDDB_catalog;
    string auto16DDBDDB_entry;
    string auto16DDBDDB_field;
    string auto16DDBDDB_scopeField;
    int auto16DDBDDB_player;
    int auto16DDBDDB_i;

    // Variable Initialization

    // Implementation
    if ((lp_skinSet == "")) {
        return ;
    }

    autoCACECB31_catalog = c_gameCatalogSkinPack;
    autoCACECB31_i = 1;
    for ( ; autoCACECB31_i <= CatalogEntryCount(c_gameCatalogSkinPack) ; autoCACECB31_i += 1 ) {
        lv_itSkinPack = CatalogEntryGet(autoCACECB31_catalog, autoCACECB31_i);
        lv_itCollectionId = CatalogFieldValueGet(c_gameCatalogSkinPack, lv_itSkinPack, "CollectionId", c_playerAny);
        if ((lp_skinSet == lv_itCollectionId)) {
            auto16DDBDDB_catalog = c_gameCatalogSkinPack;
            auto16DDBDDB_entry = lv_itSkinPack;
            auto16DDBDDB_field = "EntryArray";
            auto16DDBDDB_scopeField = "Reward";
            auto16DDBDDB_player = c_playerAny;
            auto16DDBDDB_i = 0;
            for ( ; auto16DDBDDB_i <= CatalogFieldValueCount(c_gameCatalogSkinPack,auto16DDBDDB_entry,auto16DDBDDB_field,auto16DDBDDB_player)-1 ; auto16DDBDDB_i += 1 ) {
                lv_itReward = CatalogFieldValueGet(c_gameCatalogSkinPack,auto16DDBDDB_entry,auto16DDBDDB_field+"["+IntToString(auto16DDBDDB_i)+"]."+auto16DDBDDB_scopeField,auto16DDBDDB_player);
                lv_itSkin = CatalogFieldValueGet(c_gameCatalogReward, lv_itReward, "Skin", c_playerAny);
                if ((CatalogEntryIsValid(c_gameCatalogSkin, lv_itSkin) == true)) {
                    PlayerApplySkin(lp_player, (lv_itSkin), true);
                }

            }
        }

    }
}

string libGHLo_gf_PlayerSkinSet (int lp_player) {
    // Variable Declarations
    string lv_attribute;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attribute = (GameAttributePlayerValue("1", lp_player));

    // Implementation
    TriggerDebugOutput(1, StringToText(lv_attribute), false);
    return UserDataGetString("SC2SkinSets", (lv_attribute), "SkinSet", 1);
}

void libGHLo_gf_RegisterCameraMoveEvent (trigger lp_trigger, int lp_playerId, int lp_cameraMoveReason) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventCameraMove(lp_trigger, lp_playerId, lp_cameraMoveReason);
}

void libGHLo_gf_RegisterPeriodicEvent (trigger lp_trigger, fixed lp_interval, int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventTimePeriodic(lp_trigger, lp_interval, lp_time);
}

void libGHLo_gf_RegisterTimerRunsOutEvent (trigger lp_trigger, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventTimer(lp_trigger, lp_timer);
}

void libGHLo_gf_RegisterUnitCreatedEvent (trigger lp_trigger, unit lp_unit, string lp_ability, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitCreated(lp_trigger,UnitRefFromUnit(lp_unit),lp_ability,lp_behavior);
}

void libGHLo_gf_RegisterUnitTrainingProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitTrainProgress(lp_trigger,UnitRefFromUnit(lp_unit),lp_progressStage);
}

void libGHLo_gf_RegisterUnitArmingProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitArmMagazineProgress(lp_trigger,UnitRefFromUnit(lp_unit),lp_progressStage);
}

void libGHLo_gf_RegisterUnitResearchProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitResearchProgress(lp_trigger,UnitRefFromUnit(lp_unit),lp_progressStage);
}

void libGHLo_gf_RegisterUnitDiesEvent (trigger lp_trigger, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitDied(lp_trigger,UnitRefFromUnit(lp_unit));
}

void libGHLo_gf_RegisterPlayerLeavesEvent (trigger lp_trigger, int lp_player, int lp_gameResult) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventPlayerLeft(lp_trigger,lp_player,lp_gameResult);
}

void libGHLo_gf_ChronoBoostregisterboosteditem (int lp_player, string lp_item) {
    // Variable Declarations
    int lv_slot;

    // Automatic Variable Declarations
    int autoF3D2BD25_ae;
    const int autoF3D2BD25_ai = 1;

    // Variable Initialization

    // Implementation
    autoF3D2BD25_ae = libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot;
    lv_slot = 0;
    for ( ; ( (autoF3D2BD25_ai >= 0 && lv_slot <= autoF3D2BD25_ae) || (autoF3D2BD25_ai < 0 && lv_slot >= autoF3D2BD25_ae) ) ; lv_slot += autoF3D2BD25_ai ) {
        if ((libGHLo_gv_chronoBoost[lp_player].lv_slotContents[lv_slot] == lp_item)) {
            return ;
        }

    }
    if ((libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot < libGHLo_gv_chronoBoostMAX_SLOTS)) {
        libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot += 1;
        libGHLo_gv_chronoBoost[lp_player].lv_slotContents[libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot] = lp_item;
        libNtve_gf_SetDialogItemText(libGHLo_gv_chronoBoost[lp_player].lv_slots[libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot], StringToText(lp_item), libGHLo_gv_obs);
    }

}

void libGHLo_gf_ChronoBoostremoveboosteditem (int lp_player, string lp_item) {
    // Variable Declarations
    int lv_slot;
    int lv_foundSlot;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto9705BA23_g;
    int auto9705BA23_u;
    int autoF0BB58F8_ae;
    const int autoF0BB58F8_ai = 1;

    // Variable Initialization
    lv_foundSlot = -1;

    // Implementation
    auto9705BA23_g = libGHLo_gv_chronoBoost[lp_player].lv_boosted;
    auto9705BA23_u = UnitGroupCount(auto9705BA23_g, c_unitCountAll);
    for (;; auto9705BA23_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9705BA23_g, auto9705BA23_u);
        if (lv_unit == null) { break; }
        if (((lp_item == (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_unit, 1, 1))) || (lp_item == (libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lv_unit, 1, 1))))) {
            return ;
        }

    }
    autoF0BB58F8_ae = libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot;
    lv_slot = 0;
    for ( ; ( (autoF0BB58F8_ai >= 0 && lv_slot <= autoF0BB58F8_ae) || (autoF0BB58F8_ai < 0 && lv_slot >= autoF0BB58F8_ae) ) ; lv_slot += autoF0BB58F8_ai ) {
        if ((libGHLo_gv_chronoBoost[lp_player].lv_slotContents[lv_slot] == lp_item)) {
            lv_foundSlot = lv_slot;
            break;
        }

    }
    if ((lv_foundSlot >= 0)) {
        libNtve_gf_SetDialogItemText(libGHLo_gv_chronoBoost[lp_player].lv_slots[lv_foundSlot], StringToText(libGHLo_gv_chronoBoost[lp_player].lv_slotContents[libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot]), libGHLo_gv_obs);
        libGHLo_gv_chronoBoost[lp_player].lv_slotContents[lv_foundSlot] = libGHLo_gv_chronoBoost[lp_player].lv_slotContents[libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot];
        libNtve_gf_SetDialogItemText(libGHLo_gv_chronoBoost[lp_player].lv_slots[libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot], StringToText(""), libGHLo_gv_obs);
        libGHLo_gv_chronoBoost[lp_player].lv_slotContents[libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot] = null;
        libGHLo_gv_chronoBoost[lp_player].lv_lastUsedSlot -= 1;
    }

}

void libGHLo_gf_ObserverUiAssistSetPlayerIdScore (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueSetFromInt(lp_player, "PlayerId", lp_player);
}

void libGHLo_gf_ObserverUiAssistSetPlayerStatusScore (int lp_player, int lp_status) {
    // Automatic Variable Declarations
    int autoD1011202_val;

    // Implementation
    autoD1011202_val = lp_status;
    if (autoD1011202_val == libGHLo_ge_PlayerStatusScoreValue_Playing) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 1);
    }
    else if (autoD1011202_val == libGHLo_ge_PlayerStatusScoreValue_LeftGameinDefeat) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 4);
    }
    else if (autoD1011202_val == libGHLo_ge_PlayerStatusScoreValue_LeftGameinVictory) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 2);
    }
    else if (autoD1011202_val == libGHLo_ge_PlayerStatusScoreValue_LeftGameinTie) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 3);
    }
    else if (autoD1011202_val == libGHLo_ge_PlayerStatusScoreValue_DroppedbeforeMapInitialization) {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 5);
    }
    else {
        PlayerScoreValueSetFromInt(lp_player, "PlayerStatus", 0);
    }
}

void libGHLo_gf_GraphsDefineGraph (int lp_iD, text lp_title, string lp_string, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement) {
    // Variable Declarations
    int lv_graph;
    int lv_count;

    // Automatic Variable Declarations
    const int auto236CE7AF_ae = 0;
    const int auto236CE7AF_ai = 1;

    // Variable Initialization
    lv_graph = lp_iD;

    // Implementation
    libGHLo_gv_graphsGeneral.lv_totalGraphs += 1;
    libGHLo_gv_graphsData[lv_graph].lv_scoreType = lp_scoreType;
    libGHLo_gv_graphsData[lv_graph].lv_style = lp_style;
    libGHLo_gv_graphsData[lv_graph].lv_minimumValue = lp_minimumValue;
    libGHLo_gv_graphsData[lv_graph].lv_rangeBase = lp_rangeBase;
    libGHLo_gv_graphsData[lv_graph].lv_rangeIncrement = lp_rangeIncrement;
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string));
    DialogControlSetEnabled(DialogControlLastCreated(), libGHLo_gv_obs, true);
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/GraphFrame"));
    libGHLo_gv_graphsData[lv_graph].lv_graph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Title"));
    libGHLo_gv_graphsData[lv_graph].lv_title = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libGHLo_gv_graphsData[lv_graph].lv_title, lp_title, libGHLo_gv_obs);
    lv_count = (0 - libGHLo_gv_graphsTotalNodes);
    for ( ; ( (auto236CE7AF_ai >= 0 && lv_count <= auto236CE7AF_ae) || (auto236CE7AF_ai < 0 && lv_count >= auto236CE7AF_ae) ) ; lv_count += auto236CE7AF_ai ) {
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lv_graph].lv_graph, libGHLo_gv_obs, lv_count, 0.0, 1);
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lv_graph].lv_graph, libGHLo_gv_obs, lv_count, 0.0, 2);
    }
}

void libGHLo_gf_GraphsUpdateDataDifferential (int lp_graph) {
    // Variable Declarations
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    fixed lv_differential;

    // Automatic Variable Declarations
    int auto826A55D7_ae;
    const int auto826A55D7_ai = 1;

    // Variable Initialization

    // Implementation
    auto826A55D7_ae = libGHLo_gv_graphsGeneral.lv_intervals;
    lv_count = 1;
    for ( ; ( (auto826A55D7_ai >= 0 && lv_count <= auto826A55D7_ae) || (auto826A55D7_ai < 0 && lv_count >= auto826A55D7_ae) ) ; lv_count += auto826A55D7_ai ) {
        lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft]+libGHLo_gv_graphsData[lp_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight]+libGHLo_gv_graphsData[lp_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft]/libGHLo_gv_graphsGeneral.lv_intervals);
    lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight]/libGHLo_gv_graphsGeneral.lv_intervals);
    lv_difference = ((lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamRight]));
    if ((lv_difference == 0)) {
        libGHLo_gv_graphsData[lp_graph].lv_team = 0;
        libGHLo_gv_graphsData[lp_graph].lv_value[0] = 0;
    }
    else if ((lv_difference > 0)) {
        libGHLo_gv_graphsData[lp_graph].lv_team = libGHLo_gv_graphsGeneral.lv_teamLeft;
        libGHLo_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamRight]);
    }
    else if ((lv_difference < 0)) {
        libGHLo_gv_graphsData[lp_graph].lv_team = libGHLo_gv_graphsGeneral.lv_teamRight;
        libGHLo_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamRight]-lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamLeft]);
    }
    if ((libGHLo_gv_graphsData[lp_graph].lv_team == libGHLo_gv_graphsGeneral.lv_teamLeft)) {
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsGeneral.lv_currentNode, libGHLo_gv_graphsData[lp_graph].lv_value[0], 1);
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsGeneral.lv_currentNode, (0 - libGHLo_gv_graphsData[lp_graph].lv_value[0]), 2);
    }
    else {
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsGeneral.lv_currentNode, (0 - libGHLo_gv_graphsData[lp_graph].lv_value[0]), 1);
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsGeneral.lv_currentNode, libGHLo_gv_graphsData[lp_graph].lv_value[0], 2);
    }
    if ((DialogControlGetMinYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs) <= (0.0 - DialogControlGetMaxYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs)))) {
        lv_differential = AbsF(DialogControlGetMinYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs));
    }
    else {
        lv_differential = DialogControlGetMaxYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs);
    }
    if ((lv_differential < libGHLo_gv_graphsData[lp_graph].lv_minimumValue)) {
        lv_differential = libGHLo_gv_graphsData[lp_graph].lv_rangeBase;
    }
    else {
        lv_differential = (lv_differential * 1.15);
        lv_differential = (Ceiling((lv_differential / libGHLo_gv_graphsData[lp_graph].lv_rangeIncrement)) * libGHLo_gv_graphsData[lp_graph].lv_rangeIncrement);
    }
    DialogControlSetMaxYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, lv_differential);
    DialogControlSetMinYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, (0.0 - lv_differential));
    DialogControlSetMinXVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, (libGHLo_gv_graphsGeneral.lv_currentNode - libGHLo_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsGeneral.lv_currentNode);
}

void libGHLo_gf_GraphsUpdateDataComparative (int lp_graph) {
    // Variable Declarations
    int lv_count;
    int[3] lv_teamTotal;
    fixed lv_maxValue;

    // Automatic Variable Declarations
    int auto2C209F5F_ae;
    const int auto2C209F5F_ai = 1;

    // Variable Initialization

    // Implementation
    auto2C209F5F_ae = libGHLo_gv_graphsGeneral.lv_intervals;
    lv_count = 1;
    for ( ; ( (auto2C209F5F_ai >= 0 && lv_count <= auto2C209F5F_ae) || (auto2C209F5F_ai < 0 && lv_count >= auto2C209F5F_ae) ) ; lv_count += auto2C209F5F_ai ) {
        lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft]+libGHLo_gv_graphsData[lp_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight]+libGHLo_gv_graphsData[lp_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    libGHLo_gv_graphsData[lp_graph].lv_value[libGHLo_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft]/libGHLo_gv_graphsGeneral.lv_intervals);
    libGHLo_gv_graphsData[lp_graph].lv_value[libGHLo_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight]/libGHLo_gv_graphsGeneral.lv_intervals);
    DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsGeneral.lv_currentNode, libGHLo_gv_graphsData[lp_graph].lv_value[libGHLo_gv_graphsGeneral.lv_teamLeft], 1);
    DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsGeneral.lv_currentNode, libGHLo_gv_graphsData[lp_graph].lv_value[libGHLo_gv_graphsGeneral.lv_teamRight], 2);
    DialogControlSetMinXVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, (libGHLo_gv_graphsGeneral.lv_currentNode - libGHLo_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsGeneral.lv_currentNode);
    DialogControlSetMinYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, 0.0);
    if ((DialogControlGetMaxYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs) <= libGHLo_gv_graphsData[lp_graph].lv_minimumValue)) {
        DialogControlSetMaxYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, libGHLo_gv_graphsData[lp_graph].lv_rangeBase);
    }
    else {
        lv_maxValue = (DialogControlGetMaxYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs) * 1.15);
        lv_maxValue = (Ceiling((lv_maxValue / libGHLo_gv_graphsData[lp_graph].lv_rangeIncrement)) * libGHLo_gv_graphsData[lp_graph].lv_rangeIncrement);
        DialogControlSetMaxYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, libGHLo_gv_obs, lv_maxValue);
    }
}

bool libGHLo_gf_LabelsUnitUsesCustomStatusBar (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_unitType == "Larva") || (lp_unitType == "Egg") || (lp_unitType == "Gateway") || (lp_unitType == "Barracks") || (lp_unitType == "Nexus") || (lp_unitType == "Hatchery") || (lp_unitType == "CommandCenter") || (lp_unitType == "TechLab") || (lp_unitType == "BarracksTechLab") || (lp_unitType == "FactoryTechLab") || (lp_unitType == "StarportTechLab") || (lp_unitType == "Factory") || (lp_unitType == "Starport") || (lp_unitType == "Stargate") || (lp_unitType == "RoboticsBay") || (lp_unitType == "Forge") || (lp_unitType == "EngineeringBay") || (lp_unitType == "Armory") || (lp_unitType == "EvolutionChamber") || (lp_unitType == "Spire") || (lp_unitType == "CyberneticsCore") || (lp_unitType == "OrbitalCommand") || (lp_unitType == "PlanetaryFortress") || (lp_unitType == "FleetBeacon") || (lp_unitType == "RoboticsFacility") || (lp_unitType == "TemplarArchive") || (lp_unitType == "TwilightCouncil") || (lp_unitType == "FusionCore") || (lp_unitType == "SpawningPool") || (lp_unitType == "RoachWarren") || (lp_unitType == "BanelingNest") || (lp_unitType == "LurkerDenMP") || (lp_unitType == "GhostAcademy") || (lp_unitType == "GreaterSpire") || (lp_unitType == "Lair") || (lp_unitType == "Hive") || (lp_unitType == "HydraliskDen") || (lp_unitType == "InfestationPit") || (lp_unitType == "UltraliskCavern") || (lp_unitType == "DarkShrine"))) {
        return true;
    }

    return false;
}

void libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade (int lp_slot) {
    // Variable Declarations
    int lv_count;
    string lv_upgrade;
    int lv_sLOT_MAX_INDEX1;
    int lv_count1;
    bool lv_visible;

    // Automatic Variable Declarations
    int auto85411229_ae;
    const int auto85411229_ai = 1;

    // Variable Initialization
    lv_sLOT_MAX_INDEX1 = (libGHLo_gv_upgradeNotificationsMaxUISlots + 1);

    // Implementation
    auto85411229_ae = libGHLo_gv_upgradeNotifications.lv_slotLastUsed;
    lv_count = (lp_slot + 1);
    for ( ; ( (auto85411229_ai >= 0 && lv_count <= auto85411229_ae) || (auto85411229_ai < 0 && lv_count >= auto85411229_ae) ) ; lv_count += auto85411229_ai ) {
        if ((lv_count <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
            lv_count1 = (lv_count - 1);
            libGHLo_gf_UpgradeNotificationsSetSlotData(lv_count1, libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lv_count], libGHLo_gv_obsID), (libNtve_gf_DialogItemImage(libGHLo_gv_upgradeNotifications.lv_itemIcon[lv_count], libGHLo_gv_obsID)), UnitGetOwner(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count]), DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_count], libGHLo_gv_obsID));
            libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_count1] = libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_count];
            libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_count1], libNtve_gf_DialogItemValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_count], libGHLo_gv_obsID), libGHLo_gv_obs);
            libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count1] = libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count];
            libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_count1], libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_count], libGHLo_gv_obsID), libGHLo_gv_obs);
            libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_count1], libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], libGHLo_gv_obsID), libGHLo_gv_obs);
            lv_visible = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_count], libGHLo_gv_obsID);
            DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_count1], libGHLo_gv_obs, lv_visible);
            lv_visible = !(lv_visible);
            DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_count1], libGHLo_gv_obs, lv_visible);
        }
        else {
            if ((lv_count == lv_sLOT_MAX_INDEX1)) {
                lv_count1 = (lv_count - 1);
                lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count], 1, 1);
                libGHLo_gf_UpgradeNotificationsSetSlotData(lv_count1, libGHLo_gf_UpgradeNotificationsUpgradeName(lv_upgrade), libGHLo_gf_UpgradeNotificationsUpgradeImage(lv_upgrade), UnitGetOwner(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count]), (UnitQueueItemTime(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count], c_unitQueueTimeRemaining, 1) <= libGHLo_gv_upgradeNotificationsVisibleTime));
                libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count1] = libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
                libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_count1], StringToText(""), libGHLo_gv_obs);
                DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_count1], libGHLo_gv_obs, true);
                DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_count1], libGHLo_gv_obs, false);
                libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_count1] = TimerCreate();
            }

        }
        libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count1] = libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count];
    }
    libGHLo_gv_upgradeNotifications.lv_slotFacility[libGHLo_gv_upgradeNotifications.lv_slotLastUsed] = null;
    if ((libGHLo_gv_upgradeNotifications.lv_slotLastUsed <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        libGHLo_gf_UpgradeNotificationsSetSlotData(libGHLo_gv_upgradeNotifications.lv_slotLastUsed, StringToText(""), "Assets\\Textures\\black.dds", libGHLo_gv_obsID, false);
        libGHLo_gv_upgradeNotifications.lv_slotStatus[libGHLo_gv_upgradeNotifications.lv_slotLastUsed] = libGHLo_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
        libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[libGHLo_gv_upgradeNotifications.lv_slotLastUsed], StringToText(""), libGHLo_gv_obs);
        libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[libGHLo_gv_upgradeNotifications.lv_slotLastUsed], 0.0, libGHLo_gv_obs);
        libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[libGHLo_gv_upgradeNotifications.lv_slotLastUsed], StringToText(""), libGHLo_gv_obs);
        libGHLo_gv_upgradeNotifications.lv_timerDestruction[libGHLo_gv_upgradeNotifications.lv_slotLastUsed] = TimerCreate();
    }

    libGHLo_gv_upgradeNotifications.lv_slotLastUsed -= 1;
}

int libGHLo_gf_UpgradeNotificationsSearchFacilitySlot (unit lp_facility) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    int autoF6314835_ae;
    const int autoF6314835_ai = 1;

    // Variable Initialization

    // Implementation
    autoF6314835_ae = libGHLo_gv_upgradeNotifications.lv_slotLastUsed;
    lv_count = 0;
    for ( ; ( (autoF6314835_ai >= 0 && lv_count <= autoF6314835_ae) || (autoF6314835_ai < 0 && lv_count >= autoF6314835_ae) ) ; lv_count += autoF6314835_ai ) {
        if ((libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count] == lp_facility) && ((lv_count > libGHLo_gv_upgradeNotificationsMaxUISlots) || (libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade) || (libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade))) {
            return lv_count;
        }

    }
    return -1;
}

string libGHLo_gf_UpgradeNotificationsUpgradeImage (string lp_upgrade) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Icon", libGHLo_gv_obsID));
}

text libGHLo_gf_UpgradeNotificationsUpgradeName (string lp_upgrade) {
    // Automatic Variable Declarations
    string autoCE61EBE2_val;
    string auto4FCB9578_val;

    // Implementation
    autoCE61EBE2_val = lp_upgrade;
    if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_141E0913");
    }
    else if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_701F2322");
    }
    else if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_E2743571");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_96B69A6D");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_0CBA1085");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_31C40A3F");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_C6B716E5");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_E81B983F");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_C60B48C7");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_DE31BCE5");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_5AA2CCE9");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_B8264F5F");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_087849CE");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_9209B1AF");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_7DDACA58");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_F4FDF319");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_2A6C4E76");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_2A50C857");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_29F77874");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_1F979E83");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_9B504B17");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_52112F4B");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_B5F759AB");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_FE6B18DF");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_BA3355B7");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_98A592CE");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_FD235555");
    }
    else if (autoCE61EBE2_val == "BansheeCloak") {
        return StringExternal("Param/Value/lib_GHLo_25348DDA");
    }
    else if (autoCE61EBE2_val == "PersonalCloaking") {
        return StringExternal("Param/Value/lib_GHLo_E15F370F");
    }
    else if (autoCE61EBE2_val == "TerranBuildingArmor") {
        return StringExternal("Param/Value/lib_GHLo_F70F87FB");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_034F71BF");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_D985C2E8");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_0B7D27AD");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_8F85CCDB");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_878C5739");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_546C78B1");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_9A47772A");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_304F7AF9");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_7E847181");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_5243C095");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_4F2FC09D");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_8B1D7D0E");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_0C7878FC");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_A9CE0D56");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_3726C408");
    }
    else {
    }
    auto4FCB9578_val = (lp_upgrade);
    if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_4D4D6280");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_0DB5DBE7");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_AE1A3D18");
    }
    else {
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Name", libGHLo_gv_obsID));
}

bool libGHLo_gf_UpgradeNotificationsUpgradeNeedsToBeVisible (fixed lp_remainingTime) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_remainingTime <= libGHLo_gv_upgradeNotificationsVisibleTime);
}

trigger auto_libGHLo_gf_UpgradeNotificationsUpdateThread_Trigger = null;

void libGHLo_gf_UpgradeNotificationsUpdateThread () {
    if (auto_libGHLo_gf_UpgradeNotificationsUpdateThread_Trigger == null) {
        auto_libGHLo_gf_UpgradeNotificationsUpdateThread_Trigger = TriggerCreate("auto_libGHLo_gf_UpgradeNotificationsUpdateThread_TriggerFunc");
    }

    TriggerExecute(auto_libGHLo_gf_UpgradeNotificationsUpdateThread_Trigger, false, false);
}

bool auto_libGHLo_gf_UpgradeNotificationsUpdateThread_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    int lv_swapTarget;

    // Automatic Variable Declarations
    int auto520A35AB_ae;
    const int auto520A35AB_ai = 1;

    // Variable Initialization
    lv_swapTarget = -1;

    // Implementation
    while ((libGHLo_gv_upgradeNotifications.lv_slotLastUsed >= 0)) {
        auto520A35AB_ae = libGHLo_gv_upgradeNotifications.lv_slotLastUsed;
        lv_slot = 0;
        for ( ; ( (auto520A35AB_ai >= 0 && lv_slot <= auto520A35AB_ae) || (auto520A35AB_ai < 0 && lv_slot >= auto520A35AB_ae) ) ; lv_slot += auto520A35AB_ai ) {
            if (((lv_slot > libGHLo_gv_upgradeNotificationsMaxUISlots) || (libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] == libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade)) && ((UnitQueueItemTime(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_slot], c_unitQueueTimeRemaining, 1) <= libGHLo_gv_upgradeNotificationsVisibleTime) == true)) {
                if ((lv_slot <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
                    DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_slot], libGHLo_gv_obs, true);
                    libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade;
                }

                if ((lv_slot > 0) && (lv_slot > (lv_swapTarget + 1))) {
                    lv_swapTarget = libGHLo_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne((lv_swapTarget + 1), lv_slot);
                    if ((lv_swapTarget >= 0)) {
                        if ((lv_swapTarget <= libGHLo_gv_upgradeNotificationsMaxUISlots) && (lv_slot > libGHLo_gv_upgradeNotificationsMaxUISlots)) {
                            DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_swapTarget], libGHLo_gv_obs, true);
                            libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_swapTarget] = libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade;
                        }

                    }

                }

            }

            if ((lv_slot <= libGHLo_gv_upgradeNotificationsMaxUISlots) && (libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] == libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade)) {
                libGHLo_gf_UpgradeNotificationsUpdateProgressData(lv_slot);
            }

        }
        Wait(0.0625, c_timeGame);
        if ((libGHLo_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread >= 0)) {
            lv_swapTarget = (libGHLo_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread - 1);
            libGHLo_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread = -1;
        }

        Wait(0.0, c_timeGame);
    }
    libGHLo_gv_upgradeNotifications.lv_updateThreadRunning = false;
    return true;
}

void libGHLo_gf_UpgradeNotificationsSetStatusLabel (int lp_slot, text lp_status) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], libGHLo_gv_obs, false);
    DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], libGHLo_gv_obs, true);
    libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], lp_status, libGHLo_gv_obs);
}

void libGHLo_gf_UpgradeNotificationsSetSlotData (int lp_slot, text lp_name, string lp_icon, int lp_player, bool lp_visible) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lp_slot], lp_name, libGHLo_gv_obs);
    libNtve_gf_SetDialogItemImage(libGHLo_gv_upgradeNotifications.lv_itemIcon[lp_slot], lp_icon, libGHLo_gv_obs);
    libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemPlayerIdLabel[lp_slot], IntToText(lp_player), libGHLo_gv_obs);
    DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slot], libGHLo_gv_obs, lp_visible);
}

int libGHLo_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne (int lp_minUncheckedSlot, int lp_slot) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    int auto5043F64A_ae;
    const int auto5043F64A_ai = 1;

    // Variable Initialization

    // Implementation
    auto5043F64A_ae = (lp_slot - 1);
    lv_count = lp_minUncheckedSlot;
    for ( ; ( (auto5043F64A_ai >= 0 && lv_count <= auto5043F64A_ae) || (auto5043F64A_ai < 0 && lv_count >= auto5043F64A_ae) ) ; lv_count += auto5043F64A_ai ) {
        if (((lv_count > libGHLo_gv_upgradeNotificationsMaxUISlots) || (libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade) || (libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_NoUpgrade))) {
            libGHLo_gf_UpgradeNotificationsSwapSlotInformation(lv_count, lp_slot);
            return lv_count;
        }

    }
    return -1;
}

void libGHLo_gf_UpgradeNotificationsSwapSlotInformation (int lp_slotA, int lp_slotB) {
    int init_i;

    // Variable Declarations
    int[2] lv_status;
    bool[2] lv_panelVisibility;
    bool[2] lv_timerLabelVisibility;
    bool[2] lv_statusLabelVisibility;
    text[2] lv_name;
    string[2] lv_icon;
    int[2] lv_player;
    fixed[2] lv_value;
    timer[2] lv_timer;
    unit lv_facility;
    string lv_upgrade;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_status[init_i] = libGHLo_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_timerLabelVisibility[init_i] = true;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_icon[init_i] = "Assets\\Textures\\blank.dds";
    }

    // Implementation
    if ((lp_slotA <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[0] = libGHLo_gv_upgradeNotifications.lv_slotStatus[lp_slotA];
        lv_panelVisibility[0] = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slotA], libGHLo_gv_obsID);
        lv_timerLabelVisibility[0] = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lp_slotA], libGHLo_gv_obsID);
        lv_statusLabelVisibility[0] = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lp_slotA], libGHLo_gv_obsID);
        lv_name[0] = libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lp_slotA], libGHLo_gv_obsID);
        lv_icon[0] = (libNtve_gf_DialogItemImage(libGHLo_gv_upgradeNotifications.lv_itemIcon[lp_slotA], libGHLo_gv_obsID));
        lv_value[0] = libNtve_gf_DialogItemValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], libGHLo_gv_obsID);
        lv_timer[0] = libGHLo_gv_upgradeNotifications.lv_timerDestruction[lp_slotA];
    }
    else {
        lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotA], 1, 1);
        lv_status[0] = libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
        lv_name[0] = libGHLo_gf_UpgradeNotificationsUpgradeName(lv_upgrade);
        lv_icon[0] = libGHLo_gf_UpgradeNotificationsUpgradeImage(lv_upgrade);
        lv_timer[0] = TimerCreate();
    }
    lv_player[0] = UnitGetOwner(libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotA]);
    if ((lp_slotB <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[1] = libGHLo_gv_upgradeNotifications.lv_slotStatus[lp_slotB];
        lv_panelVisibility[1] = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slotB], libGHLo_gv_obsID);
        lv_timerLabelVisibility[1] = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lp_slotB], libGHLo_gv_obsID);
        lv_statusLabelVisibility[1] = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lp_slotB], libGHLo_gv_obsID);
        lv_name[1] = libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lp_slotB], libGHLo_gv_obsID);
        lv_icon[1] = (libNtve_gf_DialogItemImage(libGHLo_gv_upgradeNotifications.lv_itemIcon[lp_slotB], libGHLo_gv_obsID));
        lv_value[1] = libNtve_gf_DialogItemValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], libGHLo_gv_obsID);
        lv_timer[1] = libGHLo_gv_upgradeNotifications.lv_timerDestruction[lp_slotB];
    }
    else {
        lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotB], 1, 1);
        lv_status[1] = libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
        lv_name[1] = libGHLo_gf_UpgradeNotificationsUpgradeName(lv_upgrade);
        lv_icon[1] = libGHLo_gf_UpgradeNotificationsUpgradeImage(lv_upgrade);
        lv_timer[1] = TimerCreate();
    }
    lv_player[1] = UnitGetOwner(libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotB]);
    if ((lp_slotA <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        libGHLo_gv_upgradeNotifications.lv_slotStatus[lp_slotA] = lv_status[1];
        libGHLo_gf_UpgradeNotificationsSetSlotData(lp_slotA, lv_name[1], lv_icon[1], lv_player[1], lv_panelVisibility[1]);
        libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], lv_value[1], libGHLo_gv_obs);
        libGHLo_gv_upgradeNotifications.lv_timerDestruction[lp_slotA] = lv_timer[1];
        DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lp_slotA], libGHLo_gv_obs, lv_statusLabelVisibility[1]);
        DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lp_slotA], libGHLo_gv_obs, lv_timerLabelVisibility[1]);
    }

    if ((lp_slotB <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        libGHLo_gv_upgradeNotifications.lv_slotStatus[lp_slotB] = lv_status[0];
        libGHLo_gf_UpgradeNotificationsSetSlotData(lp_slotB, lv_name[0], lv_icon[0], lv_player[0], lv_panelVisibility[0]);
        libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], lv_value[0], libGHLo_gv_obs);
        libGHLo_gv_upgradeNotifications.lv_timerDestruction[lp_slotB] = lv_timer[0];
        DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lp_slotB], libGHLo_gv_obs, lv_statusLabelVisibility[0]);
        DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lp_slotB], libGHLo_gv_obs, lv_timerLabelVisibility[0]);
    }

    lv_facility = libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotA];
    libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotA] = libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotB];
    libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotB] = lv_facility;
}

void libGHLo_gf_UpgradeNotificationsUpdateProgressData (int lp_slot) {
    // Variable Declarations
    fixed lv_remainingTime;
    int lv_remainingSeconds;
    int lv_remainingMilliseconds;
    text lv_extraZero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_remainingTime = UnitQueueItemTime(libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slot], c_unitQueueTimeRemaining, 1);
    lv_remainingSeconds = TruncI(lv_remainingTime);
    lv_remainingMilliseconds = TruncI(((lv_remainingTime - lv_remainingSeconds) * 10.0));

    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slot], (libGHLo_gv_upgradeNotificationsVisibleTime - lv_remainingTime), libGHLo_gv_obs);
    libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], (IntToText(lv_remainingSeconds) + (StringExternal("Param/Value/lib_GHLo_28BC4DAB") + (((StringExternal("Param/Value/lib_GHLo_97202C9A") + lv_extraZero) + IntToText(lv_remainingMilliseconds)) + StringExternal("Param/Value/lib_GHLo_25E0C402")))), libGHLo_gv_obs);
}

bool libGHLo_gf_MapNotificationsCheckFullHealth (unit lp_transportunit) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto2F0AA83D_g;
    int auto2F0AA83D_u;

    // Variable Initialization

    // Implementation
    auto2F0AA83D_g = UnitCargoGroup(lp_transportunit);
    auto2F0AA83D_u = UnitGroupCount(auto2F0AA83D_g, c_unitCountAll);
    for (;; auto2F0AA83D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2F0AA83D_g, auto2F0AA83D_u);
        if (lv_unit == null) { break; }
        if (((UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) != 100.0) || (UnitGetPropertyFixed(lv_unit, c_unitPropShieldsPercent, c_unitPropCurrent) != 100.0))) {
            return false;
        }

    }
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: GameHeart - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_GameHeartInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    int lv_controller;

    // Automatic Variable Declarations
    playergroup autoAA0F1A58_g;
    const int auto3843C4AA_ae = 15;
    const int auto3843C4AA_ai = 1;
    unitgroup autoBAD71A13_g;
    int autoBAD71A13_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIUnitColorStyleOverride(libGHLo_gv_obs, c_unitColorStyleNormal);
    autoAA0F1A58_g = libGHLo_gv_initial_Active_Players;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoAA0F1A58_g, lv_i);
        if (lv_i < 0) { break; }
        libGHLo_gf_ApplySkinSet(libGHLo_gf_PlayerSkinSet(lv_i), lv_i);
        libNtve_gf_SetAllianceOneWay(libGHLo_gv_obsID, lv_i, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetAlliance(lv_i, c_allianceIdDefeat, libGHLo_gv_obsID, false);
        PlayerSetAlliance(lv_i, c_allianceIdPassive, libGHLo_gv_obsID, true);
        PlayerSetAlliance(lv_i, c_allianceIdControl, libGHLo_gv_obsID, true);
        PlayerSetAlliance(lv_i, c_allianceIdVision, libGHLo_gv_obsID, true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "GameHeartActive", 1);
    }
    lv_i = 0;
    for ( ; ( (auto3843C4AA_ai >= 0 && lv_i <= auto3843C4AA_ae) || (auto3843C4AA_ai < 0 && lv_i >= auto3843C4AA_ae) ) ; lv_i += auto3843C4AA_ai ) {
        lv_controller = PlayerType(lv_i);
        if (((lv_controller == c_playerTypeNeutral) || (lv_controller == c_playerTypeHostile) || (lv_controller == c_playerTypeNone))) {
            autoBAD71A13_g = UnitGroup(null, lv_i, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            autoBAD71A13_u = UnitGroupCount(autoBAD71A13_g, c_unitCountAll);
            for (;; autoBAD71A13_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoBAD71A13_g, autoBAD71A13_u);
                if (lv_unit == null) { break; }
                UnitBehaviorAddPlayer(lv_unit, "AHLI_Reveal", libGHLo_gv_obsID, 1);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_GameHeartInitialization_Init () {
    libGHLo_gt_GameHeartInitialization = TriggerCreate("libGHLo_gt_GameHeartInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_GameHeartInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameHeart - RevealDebrisFromDestructubleTowers
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controller;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_controller = PlayerType(EventPlayer());

    // Conditions
    if (testConds) {
        if (!(((lv_controller == c_playerTypeNeutral) || (lv_controller == c_playerTypeHostile) || (lv_controller == c_playerTypeNone)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "AHLI_Reveal", libGHLo_gv_obsID, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers_Init () {
    libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers = TriggerCreate("libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers_Func");
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebris", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebrisRampLeft", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebrisRampLeftGreen", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebrisRampRight", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleRockTowerDebrisRampRightGreen", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleTerranTowerDebris", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleTerranTowerDebrisRampLeft", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsibleTerranTowerDebrisRampRight", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers, null, AbilityCommand("MorphToCollapsiblePurifierTowerDebris", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChronoBoost - Init
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ChronoBoostInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_slot;

    // Automatic Variable Declarations
    playergroup auto394B4064_g;
    const int autoD07B238D_ae = libGHLo_gv_chronoBoostMAX_SLOTS;
    const int autoD07B238D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto394B4064_g = libGHLo_gv_initial_Active_Players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto394B4064_g, lv_player);
        if (lv_player < 0) { break; }
        libGHLo_gv_chronoBoost[lv_player].lv_boosted = UnitGroupEmpty();
        lv_slot = 0;
        for ( ; ( (autoD07B238D_ai >= 0 && lv_slot <= autoD07B238D_ae) || (autoD07B238D_ai < 0 && lv_slot >= autoD07B238D_ae) ) ; lv_slot += autoD07B238D_ai ) {
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/LeaderPanel/ProductionFrame2/Player" + IntToString(lv_player) + "/ProdFrame/ChronoBoostInput/s" + IntToString(lv_slot)));
            libGHLo_gv_chronoBoost[lv_player].lv_slots[lv_slot] = DialogControlLastCreated();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ChronoBoostInit_Init () {
    libGHLo_gt_ChronoBoostInit = TriggerCreate("libGHLo_gt_ChronoBoostInit_Func");
    TriggerAddEventMapInit(libGHLo_gt_ChronoBoostInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChronoBoost - Activates
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ChronoBoostActivates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    unit lv_boostedStructure;
    string lv_upgrade;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_boostedStructure = EventUnit();
    lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lv_boostedStructure, 1, 1);
    lv_player = UnitGetOwner(lv_boostedStructure);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGHLo_gv_chronoBoost[lv_player].lv_boosted, lv_boostedStructure);
    if ((lv_upgrade != null)) {
        libGHLo_gf_ChronoBoostregisterboosteditem(lv_player, (lv_upgrade));
    }
    else {
        lv_unitType = libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_boostedStructure, 1, 1);
        if ((lv_unitType != null)) {
            libGHLo_gf_ChronoBoostregisterboosteditem(lv_player, (lv_unitType));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ChronoBoostActivates_Init () {
    libGHLo_gt_ChronoBoostActivates = TriggerCreate("libGHLo_gt_ChronoBoostActivates_Func");
    TriggerAddEventUnitBehaviorChange(libGHLo_gt_ChronoBoostActivates, null, "ChronoBoostEnergyCost", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChronoBoost - Deactivates
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ChronoBoostDeactivates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    unit lv_boostedStructure;
    string lv_upgrade;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_boostedStructure = EventUnit();
    lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(lv_boostedStructure, 1, 1);
    lv_player = UnitGetOwner(lv_boostedStructure);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libGHLo_gv_chronoBoost[lv_player].lv_boosted, lv_boostedStructure);
    if ((lv_upgrade != null)) {
        libGHLo_gf_ChronoBoostremoveboosteditem(lv_player, (lv_upgrade));
    }
    else {
        lv_unitType = libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_boostedStructure, 1, 1);
        if ((lv_unitType != null)) {
            libGHLo_gf_ChronoBoostremoveboosteditem(lv_player, (lv_unitType));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ChronoBoostDeactivates_Init () {
    libGHLo_gt_ChronoBoostDeactivates = TriggerCreate("libGHLo_gt_ChronoBoostDeactivates_Func");
    TriggerAddEventUnitBehaviorChange(libGHLo_gt_ChronoBoostDeactivates, null, "ChronoBoostEnergyCost", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChronoBoost - Training Started
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ChronoBoostTrainingStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();
    lv_player = UnitGetOwner(lv_producer);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libGHLo_gv_chronoBoost[lv_player].lv_boosted, lv_producer) == true)) {
        libGHLo_gf_ChronoBoostregisterboosteditem(lv_player, (libNtve_gf_TriggeringProgressUnitType()));
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ChronoBoostTrainingStarted_Init () {
    libGHLo_gt_ChronoBoostTrainingStarted = TriggerCreate("libGHLo_gt_ChronoBoostTrainingStarted_Func");
    TriggerAddEventUnitTrainProgress(libGHLo_gt_ChronoBoostTrainingStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChronoBoost - Training Stopped
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ChronoBoostTrainingStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();
    lv_player = UnitGetOwner(lv_producer);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libGHLo_gv_chronoBoost[lv_player].lv_boosted, lv_producer) == true)) {
        libGHLo_gf_ChronoBoostremoveboosteditem(lv_player, (libNtve_gf_TriggeringProgressUnitType()));
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ChronoBoostTrainingStopped_Init () {
    libGHLo_gt_ChronoBoostTrainingStopped = TriggerCreate("libGHLo_gt_ChronoBoostTrainingStopped_Func");
    TriggerAddEventUnitTrainProgress(libGHLo_gt_ChronoBoostTrainingStopped, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(libGHLo_gt_ChronoBoostTrainingStopped, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChronoBoost - Research Started
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ChronoBoostResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();
    lv_player = UnitGetOwner(lv_producer);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libGHLo_gv_chronoBoost[lv_player].lv_boosted, lv_producer) == true)) {
        libGHLo_gf_ChronoBoostregisterboosteditem(lv_player, (libNtve_gf_TriggeringProgressUpgrade()));
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ChronoBoostResearchStarted_Init () {
    libGHLo_gt_ChronoBoostResearchStarted = TriggerCreate("libGHLo_gt_ChronoBoostResearchStarted_Func");
    TriggerAddEventUnitResearchProgress(libGHLo_gt_ChronoBoostResearchStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChronoBoost - Research Stopped
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ChronoBoostResearchStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_producer;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_producer = EventUnit();
    lv_player = UnitGetOwner(lv_producer);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libGHLo_gv_chronoBoost[lv_player].lv_boosted, lv_producer) == true)) {
        libGHLo_gf_ChronoBoostremoveboosteditem(lv_player, (libNtve_gf_TriggeringProgressUpgrade()));
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ChronoBoostResearchStopped_Init () {
    libGHLo_gt_ChronoBoostResearchStopped = TriggerCreate("libGHLo_gt_ChronoBoostResearchStopped_Func");
    TriggerAddEventUnitResearchProgress(libGHLo_gt_ChronoBoostResearchStopped, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(libGHLo_gt_ChronoBoostResearchStopped, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ObserverUiAssistInitialization_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_player;
    int lv_team;
    playergroup[3] lv_playersOnTeam;
    fixed lv_xCoord;
    fixed[3] lv_mostleftTeamStartPosX;
    int[3] lv_mostleftTeamStartPlayerId;
    int[3] lv_teamsVersusModeScoreValue;
    bool lv_team1IsLeft;

    // Automatic Variable Declarations
    const int auto41403137_ae = 2;
    const int auto41403137_ai = 1;
    playergroup auto6857D5A5_g;
    const int auto564D10B3_ae = 2;
    const int auto564D10B3_ai = 1;
    playergroup auto74DCA28D_g;
    const int auto6646F1A7_ae = 2;
    const int auto6646F1A7_ai = 1;
    playergroup auto196BFCB7_g;
    playergroup autoB00B28D1_g;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_mostleftTeamStartPosX[init_i] = 524287.0;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_mostleftTeamStartPlayerId[init_i] = 16;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_teamsVersusModeScoreValue[init_i] = 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playersOnTeam[1] = GameAttributePlayersForTeam(1);
    lv_playersOnTeam[2] = GameAttributePlayersForTeam(2);
    if (((PlayerGroupCount(lv_playersOnTeam[1]) + PlayerGroupCount(lv_playersOnTeam[2])) == PlayerGroupCount(libGHLo_gv_initial_Active_Players)) && (PlayerGroupCount(lv_playersOnTeam[1]) > 0) && (PlayerGroupCount(lv_playersOnTeam[2]) > 0)) {
        if ((PlayerGroupCount(lv_playersOnTeam[1]) != 1)) {
            lv_team = 1;
            for ( ; ( (auto6646F1A7_ai >= 0 && lv_team <= auto6646F1A7_ae) || (auto6646F1A7_ai < 0 && lv_team >= auto6646F1A7_ae) ) ; lv_team += auto6646F1A7_ai ) {
                auto196BFCB7_g = lv_playersOnTeam[lv_team];
                lv_player = -1;
                while (true) {
                    lv_player = PlayerGroupNextPlayer(auto196BFCB7_g, lv_player);
                    if (lv_player < 0) { break; }
                    PlayerScoreValueSetFromInt(lv_player, "VersusModePlayerSide", lv_team);
                }
            }
        }
        else {
            lv_team = 1;
            for ( ; ( (auto41403137_ai >= 0 && lv_team <= auto41403137_ae) || (auto41403137_ai < 0 && lv_team >= auto41403137_ae) ) ; lv_team += auto41403137_ai ) {
                auto6857D5A5_g = lv_playersOnTeam[lv_team];
                lv_player = -1;
                while (true) {
                    lv_player = PlayerGroupNextPlayer(auto6857D5A5_g, lv_player);
                    if (lv_player < 0) { break; }
                    lv_xCoord = PointGetX(PlayerStartLocation(lv_player));
                    if ((lv_xCoord < lv_mostleftTeamStartPosX[lv_team])) {
                        lv_mostleftTeamStartPosX[lv_team] = lv_xCoord;
                        lv_mostleftTeamStartPlayerId[lv_team] = lv_player;
                    }

                }
            }
            if (((lv_mostleftTeamStartPosX[1] < lv_mostleftTeamStartPosX[2]) || ((lv_mostleftTeamStartPosX[1] == lv_mostleftTeamStartPosX[2]) && (lv_mostleftTeamStartPlayerId[1] < lv_mostleftTeamStartPlayerId[2])))) {
                lv_team1IsLeft = true;
            }

            if ((lv_team1IsLeft == true)) {
                lv_teamsVersusModeScoreValue[2] = 2;
            }
            else {
                lv_teamsVersusModeScoreValue[1] = 2;
            }
            lv_team = 1;
            for ( ; ( (auto564D10B3_ai >= 0 && lv_team <= auto564D10B3_ae) || (auto564D10B3_ai < 0 && lv_team >= auto564D10B3_ae) ) ; lv_team += auto564D10B3_ai ) {
                auto74DCA28D_g = lv_playersOnTeam[lv_team];
                lv_player = -1;
                while (true) {
                    lv_player = PlayerGroupNextPlayer(auto74DCA28D_g, lv_player);
                    if (lv_player < 0) { break; }
                    PlayerScoreValueSetFromInt(lv_player, "VersusModePlayerSide", lv_teamsVersusModeScoreValue[lv_team]);
                }
            }
        }
    }

    autoB00B28D1_g = libGHLo_gv_initial_Active_Players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB00B28D1_g, lv_player);
        if (lv_player < 0) { break; }
        libGHLo_gf_ObserverUiAssistSetPlayerIdScore(lv_player);
        if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
            libGHLo_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libGHLo_ge_PlayerStatusScoreValue_Playing);
        }
        else {
            if ((PlayerStatus(lv_player) == c_playerStatusLeft) && (PlayerScoreValueGetAsInt(lv_player, "PlayerStatus") == 0)) {
                libGHLo_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libGHLo_ge_PlayerStatusScoreValue_DroppedbeforeMapInitialization);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ObserverUiAssistInitialization_Init () {
    libGHLo_gt_ObserverUiAssistInitialization = TriggerCreate("libGHLo_gt_ObserverUiAssistInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_ObserverUiAssistInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - PlayerLeavesGameDefeat
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ObserverUiAssistPlayerLeavesGameDefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoED37B730_g;
    int autoED37B730_u;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libGHLo_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libGHLo_ge_PlayerStatusScoreValue_LeftGameinDefeat);
    autoED37B730_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0);
    autoED37B730_u = UnitGroupCount(autoED37B730_g, c_unitCountAll);
    for (;; autoED37B730_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoED37B730_g, autoED37B730_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAddPlayer(lv_unit, "AHLI_Reveal", libGHLo_gv_obsID, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ObserverUiAssistPlayerLeavesGameDefeat_Init () {
    libGHLo_gt_ObserverUiAssistPlayerLeavesGameDefeat = TriggerCreate("libGHLo_gt_ObserverUiAssistPlayerLeavesGameDefeat_Func");
    TriggerAddEventPlayerLeft(libGHLo_gt_ObserverUiAssistPlayerLeavesGameDefeat, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - PlayerLeavesGameTie
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ObserverUiAssistPlayerLeavesGameTie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto4C1668FC_g;
    int auto4C1668FC_u;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libGHLo_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libGHLo_ge_PlayerStatusScoreValue_LeftGameinTie);
    auto4C1668FC_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4C1668FC_u = UnitGroupCount(auto4C1668FC_g, c_unitCountAll);
    for (;; auto4C1668FC_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto4C1668FC_g, auto4C1668FC_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAddPlayer(lv_unit, "AHLI_Reveal", libGHLo_gv_obsID, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ObserverUiAssistPlayerLeavesGameTie_Init () {
    libGHLo_gt_ObserverUiAssistPlayerLeavesGameTie = TriggerCreate("libGHLo_gt_ObserverUiAssistPlayerLeavesGameTie_Func");
    TriggerAddEventPlayerLeft(libGHLo_gt_ObserverUiAssistPlayerLeavesGameTie, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObserverUiAssist - PlayerLeavesGameVictory
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ObserverUiAssistPlayerLeavesGameVictory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoC9465B8D_g;
    int autoC9465B8D_u;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libGHLo_gf_ObserverUiAssistSetPlayerStatusScore(lv_player, libGHLo_ge_PlayerStatusScoreValue_LeftGameinVictory);
    autoC9465B8D_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC9465B8D_u = UnitGroupCount(autoC9465B8D_g, c_unitCountAll);
    for (;; autoC9465B8D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC9465B8D_g, autoC9465B8D_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAddPlayer(lv_unit, "AHLI_Reveal", libGHLo_gv_obsID, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ObserverUiAssistPlayerLeavesGameVictory_Init () {
    libGHLo_gt_ObserverUiAssistPlayerLeavesGameVictory = TriggerCreate("libGHLo_gt_ObserverUiAssistPlayerLeavesGameVictory_Func");
    TriggerAddEventPlayerLeft(libGHLo_gt_ObserverUiAssistPlayerLeavesGameVictory, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArchonMergeSaveResourceOffset
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ArchonMergeSaveResourceOffset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unitSurvivor;

    // Automatic Variable Declarations
    unitgroup auto20B24E7C_g;
    int auto20B24E7C_u;
    unitgroup auto90AFA8AE_g;
    int auto90AFA8AE_u;

    // Variable Initialization
    lv_unitSurvivor = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitTargetUnit()) == "HighTemplar")) {
        if ((UnitGetType(lv_unitSurvivor) == "HighTemplar")) {
            Wait(0.0, c_timeGame);
            auto90AFA8AE_g = UnitGroupSearch("Archon", EventPlayer(), UnitGetPosition(EventUnitTargetUnit()), 0.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto90AFA8AE_u = UnitGroupCount(auto90AFA8AE_g, c_unitCountAll);
            for (;; auto90AFA8AE_u -= 1) {
                lv_unitSurvivor = UnitGroupUnitFromEnd(auto90AFA8AE_g, auto90AFA8AE_u);
                if (lv_unitSurvivor == null) { break; }
                if ((UnitHasBehavior2(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonHTHT") == false) && (UnitHasBehavior2(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonDTDT") == false)) {
                    UnitBehaviorAdd(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonHTHT", lv_unitSurvivor, 1);
                    return true;
                }

            }
        }

    }
    else {
        if ((UnitGetType(lv_unitSurvivor) == "DarkTemplar")) {
            Wait(0.0, c_timeGame);
            auto20B24E7C_g = UnitGroupSearch("Archon", EventPlayer(), UnitGetPosition(EventUnitTargetUnit()), 0.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto20B24E7C_u = UnitGroupCount(auto20B24E7C_g, c_unitCountAll);
            for (;; auto20B24E7C_u -= 1) {
                lv_unitSurvivor = UnitGroupUnitFromEnd(auto20B24E7C_g, auto20B24E7C_u);
                if (lv_unitSurvivor == null) { break; }
                if ((UnitHasBehavior2(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonHTHT") == false) && (UnitHasBehavior2(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonDTDT") == false)) {
                    UnitBehaviorAdd(lv_unitSurvivor, "AHLI_fixUnitLostResourcesOfArchonDTDT", lv_unitSurvivor, 1);
                    return true;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ArchonMergeSaveResourceOffset_Init () {
    libGHLo_gt_ArchonMergeSaveResourceOffset = TriggerCreate("libGHLo_gt_ArchonMergeSaveResourceOffset_Func");
    TriggerAddEventUnitAbility(libGHLo_gt_ArchonMergeSaveResourceOffset, null, AbilityCommand("ArchonWarp", 1), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArchonDuplicatedTemplarsDied
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_ArchonDuplicatedTemplarsDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitOwner;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitOwner = EventPlayerEffectUsedUnitOwner(c_effectPlayerSource);
    lv_unitType = "HighTemplar";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "AHLI_ArchonDTDTDies")) {
        lv_unitType = "DarkTemplar";
    }

    PlayerScoreValueSetFromInt(lv_unitOwner, "MineralsLostArmy", (PlayerScoreValueGetAsInt(lv_unitOwner, "MineralsLostArmy") + ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "CostResource[" + IntToString(0) + "]", lv_unitOwner) * 2) - CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Archon", "CostResource[" + IntToString(0) + "]", lv_unitOwner))));
    PlayerScoreValueSetFromInt(lv_unitOwner, "VespeneLostArmy", (PlayerScoreValueGetAsInt(lv_unitOwner, "VespeneLostArmy") + ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "CostResource[" + IntToString(1) + "]", lv_unitOwner) * 2) - CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Archon", "CostResource[" + IntToString(1) + "]", lv_unitOwner))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_ArchonDuplicatedTemplarsDied_Init () {
    libGHLo_gt_ArchonDuplicatedTemplarsDied = TriggerCreate("libGHLo_gt_ArchonDuplicatedTemplarsDied_Func");
    TriggerAddEventPlayerEffectUsed(libGHLo_gt_ArchonDuplicatedTemplarsDied, c_playerAny, "AHLI_ArchonHTHTDies");
    TriggerAddEventPlayerEffectUsed(libGHLo_gt_ArchonDuplicatedTemplarsDied, c_playerAny, "AHLI_ArchonDTDTDies");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OverlordTransportMorphCompleted
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_OverlordTransportMorphCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "AHLI_fixUnitLostResourcesOfOverlordTransport", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_OverlordTransportMorphCompleted_Init () {
    libGHLo_gt_OverlordTransportMorphCompleted = TriggerCreate("libGHLo_gt_OverlordTransportMorphCompleted_Func");
    TriggerAddEventUnitAbility(libGHLo_gt_OverlordTransportMorphCompleted, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OverseerFromOverlordTransportDied
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_OverseerFromOverlordTransportDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitOwner = EventPlayerEffectUsedUnitOwner(c_effectPlayerSource);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(lv_unitOwner, "MineralsLostArmy", (PlayerScoreValueGetAsInt(lv_unitOwner, "MineralsLostArmy") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MorphToTransportOverlord", "Cost.Resource[" + IntToString(0) + "]", lv_unitOwner)));
    PlayerScoreValueSetFromInt(lv_unitOwner, "VespeneLostArmy", (PlayerScoreValueGetAsInt(lv_unitOwner, "VespeneLostArmy") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MorphToTransportOverlord", "Cost.Resource[" + IntToString(1) + "]", lv_unitOwner)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_OverseerFromOverlordTransportDied_Init () {
    libGHLo_gt_OverseerFromOverlordTransportDied = TriggerCreate("libGHLo_gt_OverseerFromOverlordTransportDied_Func");
    TriggerAddEventPlayerEffectUsed(libGHLo_gt_OverseerFromOverlordTransportDied, c_playerAny, "AHLI_OverlordTransportDies");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Graphs - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_GraphsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerfromTeam1;
    int lv_playerfromTeam2;
    fixed lv_xofStartLocationTeam1;
    fixed lv_xofStartLocationTeam2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(libGHLo_gv_initial_Active_Players) == 2) && (PlayerGroupCount(GameAttributePlayersForTeam(1)) == 1) && (PlayerGroupCount(GameAttributePlayersForTeam(2)) == 1)) {
        libGHLo_gv_graphsGeneral.lv_active = true;
        libGHLo_gf_RegisterPeriodicEvent(libGHLo_gt_GraphsTimer, 1.0, c_timeReal);
        lv_playerfromTeam1 = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
        lv_playerfromTeam2 = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
        lv_xofStartLocationTeam1 = PointGetX(PlayerStartLocation(lv_playerfromTeam1));
        lv_xofStartLocationTeam2 = PointGetX(PlayerStartLocation(lv_playerfromTeam2));
        if ((lv_xofStartLocationTeam1 < lv_xofStartLocationTeam2)) {
            libGHLo_gv_graphsGeneral.lv_playerLeft = lv_playerfromTeam1;
            libGHLo_gv_graphsGeneral.lv_teamLeft = 1;
            libGHLo_gv_graphsGeneral.lv_playerRight = lv_playerfromTeam2;
            libGHLo_gv_graphsGeneral.lv_teamRight = 2;
        }
        else if ((lv_xofStartLocationTeam1 > lv_xofStartLocationTeam2)) {
            libGHLo_gv_graphsGeneral.lv_playerLeft = lv_playerfromTeam2;
            libGHLo_gv_graphsGeneral.lv_teamLeft = 2;
            libGHLo_gv_graphsGeneral.lv_playerRight = lv_playerfromTeam1;
            libGHLo_gv_graphsGeneral.lv_teamRight = 1;
        }
        else if ((lv_playerfromTeam1 < lv_playerfromTeam2)) {
            libGHLo_gv_graphsGeneral.lv_playerLeft = lv_playerfromTeam1;
            libGHLo_gv_graphsGeneral.lv_teamLeft = 1;
            libGHLo_gv_graphsGeneral.lv_playerRight = lv_playerfromTeam2;
            libGHLo_gv_graphsGeneral.lv_teamRight = 2;
        }
        else if ((lv_playerfromTeam1 > lv_playerfromTeam2)) {
            libGHLo_gv_graphsGeneral.lv_playerLeft = lv_playerfromTeam2;
            libGHLo_gv_graphsGeneral.lv_teamLeft = 2;
            libGHLo_gv_graphsGeneral.lv_playerRight = lv_playerfromTeam1;
            libGHLo_gv_graphsGeneral.lv_teamRight = 1;
        }
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GraphContainer");
        libGHLo_gv_graphsGeneral.lv_container = DialogControlLastCreated();
        libGHLo_gf_GraphsDefineGraph(1, StringExternal("Param/Value/lib_GHLo_8058A929"), "IncomeGraph", "ResourceCollectionRate", libGHLo_ge_GraphStyle_Differential, 350.0, 400.0, 200.0);
        libGHLo_gf_GraphsDefineGraph(2, StringExternal("Param/Value/lib_GHLo_31D21183"), "ArmySizeGraph", "FoodUsedArmy", libGHLo_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
        libGHLo_gf_GraphsDefineGraph(3, StringExternal("Param/Value/lib_GHLo_0DD54D0A"), "ResourcesLostDiffGraph", "ResourcesLostUnits", libGHLo_ge_GraphStyle_Differential, 400.0, 500.0, 500.0);
        libGHLo_gf_GraphsDefineGraph(4, StringExternal("Param/Value/lib_GHLo_572C86BD"), "ResourcesGatheredGraph", "ResourcesGathered", libGHLo_ge_GraphStyle_Comparative, 7500.0, 10000.0, 10000.0);
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_GraphsInitialization_Init () {
    libGHLo_gt_GraphsInitialization = TriggerCreate("libGHLo_gt_GraphsInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_GraphsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Graphs - Timer
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_GraphsTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_graph;
    int lv_count;

    // Automatic Variable Declarations
    int auto2CE2B256_ae;
    const int auto2CE2B256_ai = 1;
    int auto117DB1DE_val;
    int auto6CD4D55A_ae;
    const int auto6CD4D55A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGHLo_gv_graphsGeneral.lv_currentInterval += 1;
    if ((libGHLo_gv_graphsGeneral.lv_currentInterval == libGHLo_gv_graphsGeneral.lv_intervals)) {
        libGHLo_gv_graphsGeneral.lv_currentNode += 1;
    }

    auto2CE2B256_ae = libGHLo_gv_graphsGeneral.lv_totalGraphs;
    lv_graph = 1;
    for ( ; ( (auto2CE2B256_ai >= 0 && lv_graph <= auto2CE2B256_ae) || (auto2CE2B256_ai < 0 && lv_graph >= auto2CE2B256_ae) ) ; lv_graph += auto2CE2B256_ai ) {
        libGHLo_gv_graphsData[lv_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamLeft][libGHLo_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libGHLo_gv_graphsGeneral.lv_playerLeft, libGHLo_gv_graphsData[lv_graph].lv_scoreType);
        libGHLo_gv_graphsData[lv_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamRight][libGHLo_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libGHLo_gv_graphsGeneral.lv_playerRight, libGHLo_gv_graphsData[lv_graph].lv_scoreType);
        if ((libGHLo_gv_graphsGeneral.lv_currentInterval == libGHLo_gv_graphsGeneral.lv_intervals)) {
            auto117DB1DE_val = libGHLo_gv_graphsData[lv_graph].lv_style;
            if (auto117DB1DE_val == libGHLo_ge_GraphStyle_Comparative) {
                libGHLo_gf_GraphsUpdateDataComparative(lv_graph);
            }
            else if (auto117DB1DE_val == libGHLo_ge_GraphStyle_Differential) {
                libGHLo_gf_GraphsUpdateDataDifferential(lv_graph);
            }
            else {
            }
            auto6CD4D55A_ae = libGHLo_gv_graphsGeneral.lv_intervals;
            lv_count = 1;
            for ( ; ( (auto6CD4D55A_ai >= 0 && lv_count <= auto6CD4D55A_ae) || (auto6CD4D55A_ai < 0 && lv_count >= auto6CD4D55A_ae) ) ; lv_count += auto6CD4D55A_ai ) {
                libGHLo_gv_graphsData[lv_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamLeft][lv_count] = 0;
                libGHLo_gv_graphsData[lv_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamRight][lv_count] = 0;
            }
        }

    }
    if ((libGHLo_gv_graphsGeneral.lv_currentInterval == libGHLo_gv_graphsGeneral.lv_intervals)) {
        libGHLo_gv_graphsGeneral.lv_currentInterval = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_GraphsTimer_Init () {
    libGHLo_gt_GraphsTimer = TriggerCreate("libGHLo_gt_GraphsTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_labelUnitsEnabled;
    bool lv_labelResearchEnabled;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_labelUnitsEnabled = (UserDataGetInt("GameHeartSettings", "Labels (Units)", "Value", 1) == 1);
    lv_labelResearchEnabled = (UserDataGetInt("GameHeartSettings", "Labels (Research)", "Value", 1) == 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_labelUnitsEnabled == true) || (lv_labelResearchEnabled == true))) {
        libGHLo_gv_labels.lv_active = true;
        libGHLo_gf_RegisterUnitCreatedEvent(libGHLo_gt_LabelsUnitCreated, null, null, null);
        if ((lv_labelUnitsEnabled == true)) {
            libGHLo_gf_RegisterUnitTrainingProgressEvent(libGHLo_gt_LabelsUnitTrainingStarted, null, c_unitProgressStageStart);
            libGHLo_gf_RegisterUnitArmingProgressEvent(libGHLo_gt_LabelsUnitTrainingStarted, null, c_unitProgressStageStart);
            libGHLo_gf_RegisterUnitTrainingProgressEvent(libGHLo_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageComplete);
            libGHLo_gf_RegisterUnitTrainingProgressEvent(libGHLo_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageCancel);
            libGHLo_gf_RegisterUnitArmingProgressEvent(libGHLo_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageComplete);
            libGHLo_gf_RegisterUnitArmingProgressEvent(libGHLo_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageCancel);
            libGHLo_gf_RegisterUnitDiesEvent(libGHLo_gt_LabelsReactorDestroyed, null);
        }

        if ((lv_labelResearchEnabled == true)) {
            libGHLo_gf_RegisterUnitResearchProgressEvent(libGHLo_gt_LabelsResearchStarted, null, c_unitProgressStageStart);
            libGHLo_gf_RegisterUnitResearchProgressEvent(libGHLo_gt_LabelsResearchStopped, null, c_unitProgressStageComplete);
            libGHLo_gf_RegisterUnitResearchProgressEvent(libGHLo_gt_LabelsResearchStopped, null, c_unitProgressStageCancel);
        }

    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsInitialization_Init () {
    libGHLo_gt_LabelsInitialization = TriggerCreate("libGHLo_gt_LabelsInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_LabelsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Created
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;
    string lv_unitType;
    unit lv_unit;
    int lv_dialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_dialogItem = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_unit, UnitGetOwner(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0)) == true)) {
        lv_unitType = UnitGetType(lv_unit);
        if ((libGHLo_gf_LabelsUnitUsesCustomStatusBar(lv_unitType) == true)) {
            lv_unitTagString = IntToString(UnitGetTag(lv_unit));
            DataTableSetString(true, (lv_unitTagString + libGHLo_gv_labelsSlot1), "");
            DataTableSetString(true, (lv_unitTagString + libGHLo_gv_labelsSlot2), "");
            DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\IconBG", lv_unit);
            lv_dialogItem = DialogControlLastCreated();
            DialogControlSetObservedType(lv_dialogItem, c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlSetVisible(lv_dialogItem, libGHLo_gv_all_Players, false);
            libNtve_gf_SaveDataTableValueDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString), lv_dialogItem);
            DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\Icon", lv_unit);
            lv_dialogItem = DialogControlLastCreated();
            libNtve_gf_SetDialogItemImage(lv_dialogItem, "Assets\\Textures\\blank.dds", libGHLo_gv_all_Players);
            DialogControlSetObservedType(lv_dialogItem, c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlSetVisible(lv_dialogItem, libGHLo_gv_all_Players, false);
            libNtve_gf_SaveDataTableValueDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString), lv_dialogItem);
            if (((lv_unitType == "Barracks") || (lv_unitType == "Factory") || (lv_unitType == "Starport"))) {
                DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\IconBG", lv_unit);
                lv_dialogItem = DialogControlLastCreated();
                DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
                DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
                libNtve_gf_SaveDataTableValueDialogItem(true, (libGHLo_gv_labelsIconBG2 + lv_unitTagString), DialogControlLastCreated());
                DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\Icon", lv_unit);
                lv_dialogItem = DialogControlLastCreated();
                libNtve_gf_SetDialogItemImage(lv_dialogItem, "Assets\\Textures\\blank.dds", libGHLo_gv_all_Players);
                DialogControlSetObservedType(lv_dialogItem, c_triggerObservedTypeDefaultObservedPlayerId);
                DialogControlSetVisible(lv_dialogItem, libGHLo_gv_all_Players, false);
                libNtve_gf_SaveDataTableValueDialogItem(true, (libGHLo_gv_labelsIcon2 + lv_unitTagString), lv_dialogItem);
                DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\IconBG", lv_unit);
                lv_dialogItem = DialogControlLastCreated();
                DialogControlSetObservedType(lv_dialogItem, c_triggerObservedTypeDefaultObservedPlayerId);
                DialogControlSetVisible(lv_dialogItem, libGHLo_gv_all_Players, false);
                libNtve_gf_SaveDataTableValueDialogItem(true, (libGHLo_gv_labelsIconBG3 + lv_unitTagString), lv_dialogItem);
                DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\Icon", lv_unit);
                lv_dialogItem = DialogControlLastCreated();
                libNtve_gf_SetDialogItemImage(lv_dialogItem, "Assets\\Textures\\blank.dds", libGHLo_gv_all_Players);
                DialogControlSetObservedType(lv_dialogItem, c_triggerObservedTypeDefaultObservedPlayerId);
                DialogControlSetVisible(lv_dialogItem, libGHLo_gv_all_Players, false);
                libNtve_gf_SaveDataTableValueDialogItem(true, (libGHLo_gv_labelsIcon3 + lv_unitTagString), lv_dialogItem);
            }

        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsUnitCreated_Init () {
    libGHLo_gt_LabelsUnitCreated = TriggerCreate("libGHLo_gt_LabelsUnitCreated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Training Started
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsUnitTrainingStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_unitTagString;
    string lv_unitTagStringSlot1;
    string lv_unitTagStringSlot2;
    int lv_activeTags;
    int lv_dialogItem;
    string lv_savedTypeSlot1;
    string lv_savedTypeSlot2;
    string lv_traineeType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_traineeType != "Broodling") && (lv_traineeType != "BroodlingEscort") && (lv_traineeType != "Interceptor") && (lv_traineeType != "Baneling")) {
        lv_unit = EventUnit();
        lv_unitTagString = IntToString(UnitGetTag(lv_unit));
        lv_unitTagStringSlot1 = (lv_unitTagString + libGHLo_gv_labelsSlot1);
        lv_unitTagStringSlot2 = (lv_unitTagString + libGHLo_gv_labelsSlot2);
        lv_savedTypeSlot1 = DataTableGetString(true, lv_unitTagStringSlot1);
        if ((lv_savedTypeSlot1 == "")) {
            DataTableSetString(true, lv_unitTagStringSlot1, (lv_traineeType));
            lv_savedTypeSlot1 = (lv_traineeType);
            lv_savedTypeSlot2 = DataTableGetString(true, lv_unitTagStringSlot2);
            if ((lv_savedTypeSlot2 == "")) {
                lv_activeTags = 1;
            }
            else {
                lv_activeTags = 2;
            }
        }
        else {
            if ((lv_traineeType == "Zergling") && (lv_savedTypeSlot1 == (lv_traineeType))) {
                return false;
            }

            DataTableSetString(true, lv_unitTagStringSlot2, (lv_traineeType));
            lv_savedTypeSlot2 = (lv_traineeType);
            lv_activeTags = 2;
        }
        if ((lv_activeTags == 2)) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG2 + lv_unitTagString)), libGHLo_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon2 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot1), "UnitIcon", c_playerAny)), libGHLo_gv_all_Players);
            DialogControlSetVisible(lv_dialogItem, libGHLo_gv_obs, true);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG3 + lv_unitTagString)), libGHLo_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon3 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot2), "UnitIcon", c_playerAny)), libGHLo_gv_all_Players);
            DialogControlSetVisible(lv_dialogItem, libGHLo_gv_obs, true);
        }
        else {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot1), "UnitIcon", c_playerAny)), libGHLo_gv_all_Players);
            DialogControlSetVisible(lv_dialogItem, libGHLo_gv_obs, true);
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsUnitTrainingStarted_Init () {
    libGHLo_gt_LabelsUnitTrainingStarted = TriggerCreate("libGHLo_gt_LabelsUnitTrainingStarted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Research Started
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;
    string lv_research;
    string lv_unitTagString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_research = libNtve_gf_TriggeringProgressUpgrade();
    lv_unitTagString = IntToString(UnitGetTag(EventUnit()));

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, true);
    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString));
    libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_research, "Icon", c_playerAny)), libGHLo_gv_all_Players);
    DialogControlSetVisible(lv_dialogItem, libGHLo_gv_obs, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsResearchStarted_Init () {
    libGHLo_gt_LabelsResearchStarted = TriggerCreate("libGHLo_gt_LabelsResearchStarted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Training Stopped
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsUnitTrainingStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;
    string lv_savedTypeSlot1;
    string lv_savedTypeSlot2;
    string lv_unitTagStringSlot1;
    string lv_unitTagStringSlot2;
    int lv_dialogItem;
    string lv_traineeType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_traineeType != "Baneling") && (lv_traineeType != "Interceptor") && (lv_traineeType != "BroodlingEscort") && (lv_traineeType != "Broodling")) {
        lv_unitTagString = IntToString(UnitGetTag(EventUnit()));
        lv_unitTagStringSlot1 = (lv_unitTagString + libGHLo_gv_labelsSlot1);
        lv_unitTagStringSlot2 = (lv_unitTagString + libGHLo_gv_labelsSlot2);
        lv_savedTypeSlot1 = DataTableGetString(true, lv_unitTagStringSlot1);
        lv_savedTypeSlot2 = DataTableGetString(true, lv_unitTagStringSlot2);
        if ((lv_savedTypeSlot1 == (lv_traineeType)) && (lv_savedTypeSlot2 == "")) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString)), libGHLo_gv_obs, false);
            DataTableSetString(true, lv_unitTagStringSlot1, "");
        }
        else if ((lv_savedTypeSlot2 == (lv_traineeType)) && (lv_savedTypeSlot1 == "")) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG2 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon2 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG3 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon3 + lv_unitTagString)), libGHLo_gv_obs, false);
            DataTableSetString(true, lv_unitTagStringSlot2, "");
        }
        else if ((lv_savedTypeSlot1 == (lv_traineeType)) && (lv_savedTypeSlot2 != "")) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG2 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon2 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG3 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon3 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot2), "UnitIcon", c_playerAny)), libGHLo_gv_all_Players);
            DialogControlSetVisible(lv_dialogItem, libGHLo_gv_obs, true);
            DataTableSetString(true, lv_unitTagStringSlot1, lv_savedTypeSlot2);
            DataTableSetString(true, lv_unitTagStringSlot2, "");
        }
        else if ((lv_savedTypeSlot2 == (lv_traineeType)) && (lv_savedTypeSlot1 != "")) {
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG2 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon2 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG3 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon3 + lv_unitTagString)), libGHLo_gv_obs, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, true);
            lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString));
            libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_savedTypeSlot1), "UnitIcon", c_playerAny)), libGHLo_gv_all_Players);
            DialogControlSetVisible(lv_dialogItem, libGHLo_gv_obs, true);
            DataTableSetString(true, lv_unitTagStringSlot2, "");
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsUnitTrainingStopped_Init () {
    libGHLo_gt_LabelsUnitTrainingStopped = TriggerCreate("libGHLo_gt_LabelsUnitTrainingStopped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Research Stopped
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsResearchStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTagString = IntToString(UnitGetTag(EventUnit()));

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString)), libGHLo_gv_obs, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsResearchStopped_Init () {
    libGHLo_gt_LabelsResearchStopped = TriggerCreate("libGHLo_gt_LabelsResearchStopped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Reactor Destroyed
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsReactorDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTagString;
    string lv_slot1unitType;
    int lv_dialogItem;
    unit lv_unit;
    string lv_unitType;

    // Automatic Variable Declarations
    unitgroup auto00CB1734_g;
    int auto00CB1734_u;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_unitType == "BarracksReactor") || (lv_unitType == "FactoryReactor") || (lv_unitType == "StarportReactor"))) {
        auto00CB1734_g = UnitGroup(null, UnitGetOwner(lv_unit), RegionCircle(PointWithOffset(UnitGetPosition(lv_unit), -2.5, 0.5), 0.1), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        auto00CB1734_u = UnitGroupCount(auto00CB1734_g, c_unitCountAll);
        for (;; auto00CB1734_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto00CB1734_g, auto00CB1734_u);
            if (lv_unit == null) { break; }
            lv_unitType = UnitGetType(lv_unit);
            if (((lv_unitType == "Barracks") || (lv_unitType == "Factory") || (lv_unitType == "Starport")) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_unit, 1, 1) != "")) {
                lv_unitTagString = IntToString(UnitGetTag(lv_unit));
                lv_slot1unitType = DataTableGetString(true, (lv_unitTagString + libGHLo_gv_labelsSlot1));
                if ((lv_slot1unitType != "")) {
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG2 + lv_unitTagString)), libGHLo_gv_obs, false);
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon2 + lv_unitTagString)), libGHLo_gv_obs, false);
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG3 + lv_unitTagString)), libGHLo_gv_obs, false);
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon3 + lv_unitTagString)), libGHLo_gv_obs, false);
                    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIconBG1 + lv_unitTagString)), libGHLo_gv_obs, true);
                    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (libGHLo_gv_labelsIcon1 + lv_unitTagString));
                    libNtve_gf_SetDialogItemImage(lv_dialogItem, (CatalogFieldValueGet(c_gameCatalogActor, (lv_slot1unitType), "UnitIcon", c_playerAny)), libGHLo_gv_all_Players);
                    DialogControlSetVisible(lv_dialogItem, libGHLo_gv_obs, true);
                }

            }

        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsReactorDestroyed_Init () {
    libGHLo_gt_LabelsReactorDestroyed = TriggerCreate("libGHLo_gt_LabelsReactorDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    string lv_slotStr;
    int lv_players;

    // Automatic Variable Declarations
    const int auto69B01FF3_ae = libGHLo_gv_upgradeNotificationsMaxUISlots;
    const int auto69B01FF3_ai = 1;

    // Variable Initialization
    lv_players = PlayerGroupCount(libGHLo_gv_initial_Active_Players);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_players >= 1) && (lv_players <= 4)) && (UserDataGetInt("GameHeartSettings", "Notifications (Upgrades)", "Value", 1) == 1)) {
        libGHLo_gv_upgradeNotifications.lv_active = true;
        libGHLo_gf_RegisterTimerRunsOutEvent(libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut, null);
        libGHLo_gf_RegisterUnitResearchProgressEvent(libGHLo_gt_UpgradeNotificationsResearchCancelled, null, c_unitProgressStageCancel);
        libGHLo_gf_RegisterUnitResearchProgressEvent(libGHLo_gt_UpgradeNotificationsResearchCompleted, null, c_unitProgressStageComplete);
        libGHLo_gf_RegisterUnitResearchProgressEvent(libGHLo_gt_UpgradeNotificationsResearchStarted, null, c_unitProgressStageStart);
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TimerNotificationPanel");
        DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
        DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        lv_slot = 0;
        for ( ; ( (auto69B01FF3_ai >= 0 && lv_slot <= auto69B01FF3_ae) || (auto69B01FF3_ai < 0 && lv_slot >= auto69B01FF3_ae) ) ; lv_slot += auto69B01FF3_ai ) {
            lv_slotStr = IntToString(lv_slot);
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + lv_slotStr));
            libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/PlayerFrame/PlayerIdLabel")));
            libGHLo_gv_upgradeNotifications.lv_itemPlayerIdLabel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerStatus")));
            libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerBar")));
            libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libGHLo_gv_upgradeNotificationsVisibleTime, libGHLo_gv_obs);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerCountdown")));
            libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), libGHLo_gv_obs);
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerIcon")));
            libGHLo_gv_upgradeNotifications.lv_itemIcon[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", libGHLo_gv_obs);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (lv_slotStr + "/TimerWindow/TimerType")));
            libGHLo_gv_upgradeNotifications.lv_itemName[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), libGHLo_gv_obs);
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsInitialization_Init () {
    libGHLo_gt_UpgradeNotificationsInitialization = TriggerCreate("libGHLo_gt_UpgradeNotificationsInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_UpgradeNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Destruction Timer Runs Out
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    timer lv_timer;

    // Automatic Variable Declarations
    int autoB0493DF3_ae;
    const int autoB0493DF3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timer = EventTimer();
    autoB0493DF3_ae = MinI(libGHLo_gv_upgradeNotifications.lv_slotLastUsed, libGHLo_gv_upgradeNotificationsMaxUISlots);
    lv_slot = 0;
    for ( ; ( (autoB0493DF3_ai >= 0 && lv_slot <= autoB0493DF3_ae) || (autoB0493DF3_ai < 0 && lv_slot >= autoB0493DF3_ae) ) ; lv_slot += autoB0493DF3_ai ) {
        if ((lv_timer == libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_slot])) {
            libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot);
            if ((libGHLo_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread >= 0)) {
                libGHLo_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread = MinI(libGHLo_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread, lv_slot);
            }
            else {
                libGHLo_gv_upgradeNotifications.lv_slotLastClearedInputForUpdateThread = lv_slot;
            }
            return true;
        }

    }
    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut_Init () {
    libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut = TriggerCreate("libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Cancelled
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsResearchCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libGHLo_gf_UpgradeNotificationsSearchFacilitySlot(lv_facility);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_slot >= 0)) {
        if ((lv_slot <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
            libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
            TimerStart(libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_slot], 5.0, false, c_timeGame);
            if ((UnitIsAlive(lv_facility) == false)) {
                libGHLo_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_GHLo_9266D633"));
            }
            else {
                libGHLo_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_GHLo_DFAF5FF3"));
            }
        }
        else {
            libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot);
        }
        return true;
    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsResearchCancelled_Init () {
    libGHLo_gt_UpgradeNotificationsResearchCancelled = TriggerCreate("libGHLo_gt_UpgradeNotificationsResearchCancelled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Completed
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsResearchCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libGHLo_gf_UpgradeNotificationsSearchFacilitySlot(lv_facility);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_slot >= 0)) {
        if ((lv_slot <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
            libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
            libGHLo_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_GHLo_76FE8CD8"));
            libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], libGHLo_gv_upgradeNotificationsVisibleTime, libGHLo_gv_obs);
            TimerStart(libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_slot], 5.0, false, c_timeGame);
        }
        else {
            libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot);
        }
        return true;
    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsResearchCompleted_Init () {
    libGHLo_gt_UpgradeNotificationsResearchCompleted = TriggerCreate("libGHLo_gt_UpgradeNotificationsResearchCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Started
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    string lv_upgrade;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_slot = libGHLo_gv_upgradeNotifications.lv_slotLastUsed;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_slot < libGHLo_gv_upgradeNotificationsMaxFacilitySlots)) {
        lv_facility = EventUnit();
        if ((UnitIsAlive(lv_facility) == true)) {
            lv_slot += 1;
            libGHLo_gv_upgradeNotifications.lv_slotLastUsed = lv_slot;
            libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_slot] = lv_facility;
            if ((lv_slot <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
                lv_upgrade = libNtve_gf_TriggeringProgressUpgrade();
                libGHLo_gf_UpgradeNotificationsSetSlotData(lv_slot, libGHLo_gf_UpgradeNotificationsUpgradeName(lv_upgrade), libGHLo_gf_UpgradeNotificationsUpgradeImage(lv_upgrade), EventPlayer(), false);
                if ((libGHLo_gv_upgradeNotifications.lv_updateThreadRunning == false)) {
                    libGHLo_gv_upgradeNotifications.lv_updateThreadRunning = true;
                    libGHLo_gf_UpgradeNotificationsUpdateThread();
                }

                libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], StringToText(""), libGHLo_gv_obs);
                DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot], libGHLo_gv_obs, true);
                DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], libGHLo_gv_obs, false);
                libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
                libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], 0.0, libGHLo_gv_obs);
                return true;
            }

        }

    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsResearchStarted_Init () {
    libGHLo_gt_UpgradeNotificationsResearchStarted = TriggerCreate("libGHLo_gt_UpgradeNotificationsResearchStarted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_WorkersKilledNotificationsInitialization_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_slot;
    int lv_count;
    int[4] lv_panel;
    int[4] lv_timeLabel;
    int[4] lv_icon;
    int[4] lv_workerColor;
    int[4] lv_background;
    string lv_slotStr;

    // Automatic Variable Declarations
    const int autoE2BFA55A_ae = 3;
    const int autoE2BFA55A_ai = 1;
    playergroup autoA9BD4D01_g;
    int autoA9BD4D01_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_panel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_timeLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_icon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_workerColor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_background[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataGetInt("GameHeartSettings", "Notifications (Workers Killed)", "Value", 1) == 1)) {
        lv_count = PlayerGroupCount(libGHLo_gv_initial_Active_Players);
        if (((lv_count >= 1) && (lv_count <= 4))) {
            libGHLo_gv_workersKilledNotifications.lv_active = true;
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/WorkerNotificationPanel");
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            lv_slot = 0;
            for ( ; ( (autoE2BFA55A_ai >= 0 && lv_slot <= autoE2BFA55A_ae) || (autoE2BFA55A_ai < 0 && lv_slot >= autoE2BFA55A_ae) ) ; lv_slot += autoE2BFA55A_ai ) {
                lv_slotStr = IntToString(lv_slot);
                DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + lv_slotStr));
                lv_panel[lv_slot] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
                DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
                DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (lv_slotStr + "/WorkerCount")));
                lv_timeLabel[lv_slot] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
                DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
                DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), libGHLo_gv_obs);
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (lv_slotStr + "/WorkerType")));
                lv_icon[lv_slot] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
                DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_obs, true);
                DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
                DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (lv_slotStr + "/WorkerColor/PlayerFrame/PlayerIdLabel")));
                lv_workerColor[lv_slot] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
                DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
                DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (lv_slotStr + "/WorkerBackground/PlayerFrame/PlayerIdLabel")));
                lv_background[lv_slot] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_all_Players, false);
                DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            }
            lv_count = 0;
            autoA9BD4D01_g = libGHLo_gv_initial_Active_Players;
            autoA9BD4D01_var = -1;
            while (true) {
                autoA9BD4D01_var = PlayerGroupNextPlayer(autoA9BD4D01_g, autoA9BD4D01_var);
                if (autoA9BD4D01_var < 0) { break; }
                libGHLo_gv_workersKilledNotifications.lv_itemPanel[autoA9BD4D01_var] = lv_panel[lv_count];
                libGHLo_gv_workersKilledNotifications.lv_itemCountLabel[autoA9BD4D01_var] = lv_timeLabel[lv_count];
                libGHLo_gv_workersKilledNotifications.lv_itemIcon[autoA9BD4D01_var] = lv_icon[lv_count];
                libGHLo_gv_workersKilledNotifications.lv_itemWorkerPlayerIdLabel[autoA9BD4D01_var] = lv_workerColor[lv_count];
                libGHLo_gv_workersKilledNotifications.lv_itemKillerPlayerIdLabel[autoA9BD4D01_var] = lv_background[lv_count];
                lv_count += 1;
            }
            libGHLo_gf_RegisterTimerRunsOutEvent(libGHLo_gt_WorkersKilledNotificationsTimerRunsOut, null);
            libGHLo_gf_RegisterUnitDiesEvent(libGHLo_gt_WorkersKilledNotificationsWorkerKilled, null);
            return true;
        }

    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_WorkersKilledNotificationsInitialization_Init () {
    libGHLo_gt_WorkersKilledNotificationsInitialization = TriggerCreate("libGHLo_gt_WorkersKilledNotificationsInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_WorkersKilledNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Timer Runs Out
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_WorkersKilledNotificationsTimerRunsOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    timer lv_timer;

    // Automatic Variable Declarations
    const int autoA8D51FBB_ae = libGHLo_gv_workersKilledNotificationsMaxUISlots;
    const int autoA8D51FBB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGHLo_gv_workersKilledNotifications.lv_active == true)) {
        lv_timer = EventTimer();
        lv_slot = 0;
        for ( ; ( (autoA8D51FBB_ai >= 0 && lv_slot <= autoA8D51FBB_ae) || (autoA8D51FBB_ai < 0 && lv_slot >= autoA8D51FBB_ae) ) ; lv_slot += autoA8D51FBB_ai ) {
            if ((lv_timer == libGHLo_gv_workersKilledNotifications.lv_timerDestruction[lv_slot])) {
                libGHLo_gv_workersKilledNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_WorkersKilledNotificationsSlotStatus_Hidden;
                DialogControlSetVisible(libGHLo_gv_workersKilledNotifications.lv_itemPanel[lv_slot], libGHLo_gv_obs, false);
                return true;
            }

        }
    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_WorkersKilledNotificationsTimerRunsOut_Init () {
    libGHLo_gt_WorkersKilledNotificationsTimerRunsOut = TriggerCreate("libGHLo_gt_WorkersKilledNotificationsTimerRunsOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Worker Killed
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_WorkersKilledNotificationsWorkerKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadUnitOwner;
    unit lv_deadUnit;
    unit lv_killingUnit;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGHLo_gv_workersKilledNotifications.lv_active == true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) == false)) {
        lv_deadUnit = EventUnit();
        if ((UnitTestState(lv_deadUnit, c_unitStateHallucination) == false)) {
            lv_unitType = UnitGetType(lv_deadUnit);
            lv_deadUnitOwner = UnitGetOwner(lv_deadUnit);
            lv_killingUnit = libNtve_gf_KillingUnit();
            if (((lv_unitType == "Drone") || (lv_unitType == "Probe") || (lv_unitType == "SCV") || (lv_unitType == "DroneBurrowed")) && (libGHLo_gv_workersKilledNotifications.lv_itemPanel[lv_deadUnitOwner] != c_invalidDialogControlId)) {
                if ((libGHLo_gv_workersKilledNotifications.lv_slotStatus[lv_deadUnitOwner] == libGHLo_ge_WorkersKilledNotificationsSlotStatus_Visible)) {
                    libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner] = (libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner] + 1);
                }
                else {
                    libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner] = 1;
                }
                libNtve_gf_SetDialogItemText(libGHLo_gv_workersKilledNotifications.lv_itemCountLabel[lv_deadUnitOwner], IntToText(libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner]), libGHLo_gv_obs);
                libNtve_gf_SetDialogItemImage(libGHLo_gv_workersKilledNotifications.lv_itemIcon[lv_deadUnitOwner], (CatalogFieldValueGet(c_gameCatalogActor, lv_unitType, "UnitIcon", c_playerAny)), libGHLo_gv_obs);
                if ((UnitIsValid(libNtve_gf_KillingUnit()) == true)) {
                    libNtve_gf_SetDialogItemText(libGHLo_gv_workersKilledNotifications.lv_itemKillerPlayerIdLabel[lv_deadUnitOwner], IntToText(UnitGetOwner(lv_killingUnit)), libGHLo_gv_obs);
                }

                libNtve_gf_SetDialogItemText(libGHLo_gv_workersKilledNotifications.lv_itemWorkerPlayerIdLabel[lv_deadUnitOwner], IntToText(lv_deadUnitOwner), libGHLo_gv_obs);
                libGHLo_gv_workersKilledNotifications.lv_slotStatus[lv_deadUnitOwner] = libGHLo_ge_WorkersKilledNotificationsSlotStatus_Visible;
                if ((libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_deadUnitOwner] > 1)) {
                    DialogControlSetVisible(libGHLo_gv_workersKilledNotifications.lv_itemPanel[lv_deadUnitOwner], libGHLo_gv_obs, true);
                    DialogControlSendAnimationEvent(libGHLo_gv_workersKilledNotifications.lv_itemCountLabel[lv_deadUnitOwner], libGHLo_gv_obs, "textUpdated");
                }

                TimerStart(libGHLo_gv_workersKilledNotifications.lv_timerDestruction[lv_deadUnitOwner], libGHLo_gv_workersKilledNotificationsVisibleTime, false, c_timeReal);
                return true;
            }

        }

    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_WorkersKilledNotificationsWorkerKilled_Init () {
    libGHLo_gt_WorkersKilledNotificationsWorkerKilled = TriggerCreate("libGHLo_gt_WorkersKilledNotificationsWorkerKilled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Notifications - Drop
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_MapNotificationsDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCargoValue(lv_unit, c_unitCargoSpaceUsed) == UnitCargoValue(lv_unit, c_unitCargoSpaceTotal)) && (UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeStructure) == false) && (libGHLo_gf_MapNotificationsCheckFullHealth(lv_unit) == true)) {
        lv_position = UnitGetPosition(lv_unit);
        if (((libGHLo_gv_mapNotifications.lv_mostRecentPingLocation == null) || (TimerGetElapsed(libGHLo_gv_mapNotifications.lv_mostRecentTimer) >= libGHLo_gv_mapNotifications.lv_pingDuration) || (DistanceBetweenPoints(libGHLo_gv_mapNotifications.lv_mostRecentPingLocation, lv_position) > libGHLo_gv_mapNotifications.lv_minimumPickupSpacing))) {
            libNtve_gf_CreatePingFacingAngle(libGHLo_gv_obs, "PingBonus", UnitGetPosition(lv_unit), Color(100.00, 100.00, 0.00), libGHLo_gv_mapNotifications.lv_pingDuration, -90.0);
            PingSetObserver(PingLastCreated(), true);
            PingSetUnit(PingLastCreated(), lv_unit);
            libGHLo_gv_mapNotifications.lv_mostRecentPingLocation = PingGetPosition(PingLastCreated());
            TimerStart(libGHLo_gv_mapNotifications.lv_mostRecentTimer, libGHLo_gv_mapNotifications.lv_pingDuration, false, c_timeGame);
            return true;
        }

    }

    return false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_MapNotificationsDrop_Init () {
    libGHLo_gt_MapNotificationsDrop = TriggerCreate("libGHLo_gt_MapNotificationsDrop_Func");
    TriggerAddEventUnitCargo(libGHLo_gt_MapNotificationsDrop, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Notifications - Scanner Sweep
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_MapNotificationsScannerSweep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(libGHLo_gv_obs, "ScannerSweepModel", EventUnitTargetPoint(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)), libGHLo_gv_mapNotifications.lv_scannerSweepDuration, 0.0);
    PingSetObserver(PingLastCreated(), true);
    PingSetScale(PingLastCreated(), 0.035);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_MapNotificationsScannerSweep_Init () {
    libGHLo_gt_MapNotificationsScannerSweep = TriggerCreate("libGHLo_gt_MapNotificationsScannerSweep_Func");
    TriggerAddEventUnitAbility(libGHLo_gt_MapNotificationsScannerSweep, null, AbilityCommand("ScannerSweep", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minimap Frustum - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_MinimapFrustumInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_baseScale = 0.5;
    const fixed lv_baseMapSize = 108.0;
    fixed lv_mapScale;
    bool lv_isActive;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataGetInt("GameHeartSettings", "Minimap Frustum", "Value", 1) == 1) && (PlayerGroupCount(PlayerGroupActive()) == 2) && (PlayerGroupCount(GameAttributePlayersForTeam(1)) == 1) && (PlayerGroupCount(GameAttributePlayersForTeam(2)) == 1)) {
        libGHLo_gv_minimapFrustum.lv_playerOne = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
        libGHLo_gv_minimapFrustum.lv_playerTwo = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
        lv_mapScale = (lv_baseMapSize / MaxF(libNtve_gf_WidthOfRegion(RegionPlayableMap()), libNtve_gf_HeightOfRegion(RegionPlayableMap())));
        lv_mapScale = (lv_mapScale * lv_baseScale);
        if ((PlayerType(libGHLo_gv_minimapFrustum.lv_playerOne) == c_playerTypeUser)) {
            lv_isActive = true;
            libNtve_gf_CreatePingFacingAngle(libGHLo_gv_obs, "GameHeartPlayerCameraModel", CameraGetTarget(libGHLo_gv_minimapFrustum.lv_playerOne), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libGHLo_gv_minimapFrustum.lv_playerOne, false)), 0.0, 270.0);
            PingSetScale(PingLastCreated(), lv_mapScale);
            libGHLo_gv_minimapFrustum.lv_ping[0] = PingLastCreated();
            libGHLo_gf_RegisterCameraMoveEvent(libGHLo_gt_MinimapFrustumPlayerCameraMoved, libGHLo_gv_minimapFrustum.lv_playerOne, c_cameraMoveReasonAny);
        }

        if ((PlayerType(libGHLo_gv_minimapFrustum.lv_playerTwo) == c_playerTypeUser)) {
            lv_isActive = true;
            libNtve_gf_CreatePingFacingAngle(libGHLo_gv_obs, "GameHeartPlayerCameraModel", CameraGetTarget(libGHLo_gv_minimapFrustum.lv_playerTwo), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libGHLo_gv_minimapFrustum.lv_playerTwo, false)), 0.0, 270.0);
            PingSetScale(PingLastCreated(), lv_mapScale);
            libGHLo_gv_minimapFrustum.lv_ping[1] = PingLastCreated();
            libGHLo_gf_RegisterCameraMoveEvent(libGHLo_gt_MinimapFrustumPlayerCameraMoved, libGHLo_gv_minimapFrustum.lv_playerTwo, c_cameraMoveReasonAny);
        }

        libGHLo_gv_minimapFrustum.lv_active = lv_isActive;
        if ((lv_isActive == false)) {
            return false;
        }
        else {
            libGHLo_gf_RegisterPlayerLeavesEvent(libGHLo_gt_MinimapFrustumPlayerLeaves, c_playerAny, c_gameResultUndecided);
        }
    }
    else {
        return false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_MinimapFrustumInitialization_Init () {
    libGHLo_gt_MinimapFrustumInitialization = TriggerCreate("libGHLo_gt_MinimapFrustumInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_MinimapFrustumInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minimap Frustum - Player Camera Moved
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_MinimapFrustumPlayerCameraMoved_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == libGHLo_gv_minimapFrustum.lv_playerOne)) {
        PingSetPosition(libGHLo_gv_minimapFrustum.lv_ping[0], CameraGetTarget(libGHLo_gv_minimapFrustum.lv_playerOne));
    }
    else {
        PingSetPosition(libGHLo_gv_minimapFrustum.lv_ping[1], CameraGetTarget(libGHLo_gv_minimapFrustum.lv_playerTwo));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_MinimapFrustumPlayerCameraMoved_Init () {
    libGHLo_gt_MinimapFrustumPlayerCameraMoved = TriggerCreate("libGHLo_gt_MinimapFrustumPlayerCameraMoved_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minimap Frustum - Player Leaves
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_MinimapFrustumPlayerLeaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGHLo_gv_minimapFrustum.lv_playerOne == lv_player)) {
        if ((libGHLo_gv_minimapFrustum.lv_ping[0] != c_invalidPingId)) {
            PingDestroy(libGHLo_gv_minimapFrustum.lv_ping[0]);
        }

    }
    else {
        if ((libGHLo_gv_minimapFrustum.lv_playerTwo == lv_player)) {
            if ((libGHLo_gv_minimapFrustum.lv_ping[1] != c_invalidPingId)) {
                PingDestroy(libGHLo_gv_minimapFrustum.lv_ping[1]);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_MinimapFrustumPlayerLeaves_Init () {
    libGHLo_gt_MinimapFrustumPlayerLeaves = TriggerCreate("libGHLo_gt_MinimapFrustumPlayerLeaves_Func");
}

void libGHLo_InitTriggers () {
    libGHLo_gt_GameHeartInitialization_Init();
    libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers_Init();
    libGHLo_gt_ChronoBoostInit_Init();
    libGHLo_gt_ChronoBoostActivates_Init();
    libGHLo_gt_ChronoBoostDeactivates_Init();
    libGHLo_gt_ChronoBoostTrainingStarted_Init();
    libGHLo_gt_ChronoBoostTrainingStopped_Init();
    libGHLo_gt_ChronoBoostResearchStarted_Init();
    libGHLo_gt_ChronoBoostResearchStopped_Init();
    libGHLo_gt_ObserverUiAssistInitialization_Init();
    libGHLo_gt_ObserverUiAssistPlayerLeavesGameDefeat_Init();
    libGHLo_gt_ObserverUiAssistPlayerLeavesGameTie_Init();
    libGHLo_gt_ObserverUiAssistPlayerLeavesGameVictory_Init();
    libGHLo_gt_ArchonMergeSaveResourceOffset_Init();
    libGHLo_gt_ArchonDuplicatedTemplarsDied_Init();
    libGHLo_gt_OverlordTransportMorphCompleted_Init();
    libGHLo_gt_OverseerFromOverlordTransportDied_Init();
    libGHLo_gt_GraphsInitialization_Init();
    libGHLo_gt_GraphsTimer_Init();
    libGHLo_gt_LabelsInitialization_Init();
    libGHLo_gt_LabelsUnitCreated_Init();
    libGHLo_gt_LabelsUnitTrainingStarted_Init();
    libGHLo_gt_LabelsResearchStarted_Init();
    libGHLo_gt_LabelsUnitTrainingStopped_Init();
    libGHLo_gt_LabelsResearchStopped_Init();
    libGHLo_gt_LabelsReactorDestroyed_Init();
    libGHLo_gt_UpgradeNotificationsInitialization_Init();
    libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut_Init();
    libGHLo_gt_UpgradeNotificationsResearchCancelled_Init();
    libGHLo_gt_UpgradeNotificationsResearchCompleted_Init();
    libGHLo_gt_UpgradeNotificationsResearchStarted_Init();
    libGHLo_gt_WorkersKilledNotificationsInitialization_Init();
    libGHLo_gt_WorkersKilledNotificationsTimerRunsOut_Init();
    libGHLo_gt_WorkersKilledNotificationsWorkerKilled_Init();
    libGHLo_gt_MapNotificationsDrop_Init();
    libGHLo_gt_MapNotificationsScannerSweep_Init();
    libGHLo_gt_MinimapFrustumInitialization_Init();
    libGHLo_gt_MinimapFrustumPlayerCameraMoved_Init();
    libGHLo_gt_MinimapFrustumPlayerLeaves_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_InitLib_completed = false;

void libGHLo_InitLib () {
    if (libGHLo_InitLib_completed) {
        return;
    }

    libGHLo_InitLib_completed = true;

    libGHLo_InitLibraries();
    libGHLo_InitVariables();
    libGHLo_InitTriggers();
}

