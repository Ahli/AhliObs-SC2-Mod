include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: WCS GameHeart Fix
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libGHLo_ge_ProductionTabCategory_Structure = 0;
const int libGHLo_ge_ProductionTabCategory_Unit = 1;
const int libGHLo_ge_ProductionTabCategory_Upgrade = 2;
const int libGHLo_ge_PlayerStatusScoreValue_UnusedNotPlaying = 0;
const int libGHLo_ge_PlayerStatusScoreValue_Playing = 1;
const int libGHLo_ge_PlayerStatusScoreValue_LeftGameinVictory = 2;
const int libGHLo_ge_PlayerStatusScoreValue_LeftGameinTie = 3;
const int libGHLo_ge_PlayerStatusScoreValue_LeftGameinDefeat = 4;
const int libGHLo_ge_PlayerStatusScoreValue_DroppedbeforeMapInitialization = 5;
const int libGHLo_ge_GraphStyle_Comparative = 0;
const int libGHLo_ge_GraphStyle_Differential = 1;
const int libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade = 0;
const int libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade = 1;
const int libGHLo_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade = 2;
const int libGHLo_ge_UpgradeNotificationsSlotStatus_NoUpgrade = 3;
const int libGHLo_ge_WorkersKilledNotificationsSlotStatus_Hidden = 0;
const int libGHLo_ge_WorkersKilledNotificationsSlotStatus_Visible = 1;

// Constants
const int libGHLo_gv_productionTabMAX_VISIBLE_SLOTS = 17;
const int libGHLo_gv_productionTabMAX_SLOTS = 30;
const int libGHLo_gv_graphsMaxNode = 100;
const int libGHLo_gv_graphsMaxGraphId = 3;
const int libGHLo_gv_graphsIntervalLength = 6;
const string libGHLo_gv_labelsSlot1 = "-slot1";
const string libGHLo_gv_labelsSlot2 = "-slot2";
const string libGHLo_gv_labelsIconBG1 = "IconBG1-";
const string libGHLo_gv_labelsIconBG2 = "IconBG2-";
const string libGHLo_gv_labelsIconBG3 = "IconBG3-";
const string libGHLo_gv_labelsIcon1 = "Icon1-";
const string libGHLo_gv_labelsIcon2 = "Icon2-";
const string libGHLo_gv_labelsIcon3 = "Icon3-";
const int libGHLo_gv_upgradeNotificationsMaxUISlots = 50;
const int libGHLo_gv_upgradeNotificationsMaxFacilitySlots = 100;
const fixed libGHLo_gv_upgradeNotificationsVisibleTime = 15.0;
const int libGHLo_gv_workersKilledNotificationsMaxUISlots = 15;
const fixed libGHLo_gv_battleReportBattleEndingTimerGameTimeDuration = 12.0;
const fixed libGHLo_gv_battleReportAfterBattleEndedNoUiUpdateTimerGameTimeDuration = 25.0;
const int libGHLo_gv_battleReportMaxAbilitySlot = 11;
const int libGHLo_gv_battleReportMaxKilledUnitTypeSlot = 17;

// Structures
struct libGHLo_gs_ProductionTabGeneral {
    int lv_selectionIndexRaw;
    int lv_selectionIndexTimed;
};

struct libGHLo_gs_ProductionTabPlayer {
    int[libGHLo_gv_productionTabMAX_VISIBLE_SLOTS + 1] lv_slotImage;
    int[libGHLo_gv_productionTabMAX_VISIBLE_SLOTS + 1] lv_slotCountLabel;
    int[libGHLo_gv_productionTabMAX_VISIBLE_SLOTS + 1] lv_slotProgressBar;
    int[libGHLo_gv_productionTabMAX_VISIBLE_SLOTS + 1] lv_slotUnitTargetFrame;
    int[libGHLo_gv_productionTabMAX_VISIBLE_SLOTS + 1] lv_slotPanel;
    int[libGHLo_gv_productionTabMAX_VISIBLE_SLOTS + 1] lv_slotChronoBoosted;
    int[libGHLo_gv_productionTabMAX_VISIBLE_SLOTS + 1] lv_slotContaminated;
    int lv_moreSlotsLabel;
    string[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotContent;
    string[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotIconFile;
    int[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotCount;
    text[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotName;
    unitgroup[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotSelection;
    bool[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotIsMorphOrUnitWarpOrMerge;
    int[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotCategory;
    int[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotBuildDurationMax;
    int[libGHLo_gv_productionTabMAX_SLOTS + 1] lv_slotBuildQueueIndex;
    int lv_lastUsedSlot;
    unitgroup lv_contanimated;
    unitgroup lv_chronoBoosted;
};

struct libGHLo_gs_GraphsGeneral {
    bool lv_active;
    int lv_playerLeft;
    int lv_playerRight;
    int lv_teamLeft;
    int lv_teamRight;
    int lv_currentInterval;
    int lv_container;
    int lv_currentNode;
};

struct libGHLo_gs_GraphsData {
    int lv_graph;
    int lv_title;
    string lv_scoreType;
    int lv_style;
    fixed lv_minimumValue;
    fixed lv_rangeBase;
    fixed lv_rangeIncrement;
    int lv_maxValue;
    int[3][libGHLo_gv_graphsIntervalLength + 1] lv_tempValues;
    int[3] lv_value;
    int lv_team;
    bool lv_averageValues;
};

struct libGHLo_gs_Labels {
    bool lv_active;
};

struct libGHLo_gs_UpgradeNotifications {
    bool lv_active;
    bool lv_updateThreadRunning;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemIcon;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemName;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemPanel;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemPlayerIdLabel;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemProgressBar;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemTimerStatus;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemTimerLabel;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemUnitTargetFrame;
    timer[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_timerDestruction;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_slotStatus;
    unit[libGHLo_gv_upgradeNotificationsMaxFacilitySlots + 1] lv_slotFacility;
    int lv_slotLastUsed;
    int lv_slotLastClearedInputForUpdateThread;
};

struct libGHLo_gs_WorkersKilledNotifications {
    bool lv_active;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_slotStatus;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_intKilledAmount;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemPanel;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemKillerPlayerIdLabel;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemWorkerPlayerIdLabel;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemIcon;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemCountLabel;
    timer[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_timerDestruction;
    int lv_slotLastUsed;
};

struct libGHLo_gs_MapNotifications {
    fixed lv_minimumPickupSpacing;
    fixed lv_scannerSweepDuration;
    fixed lv_pingDuration;
    point lv_mostRecentPingLocation;
    timer lv_mostRecentTimer;
};

struct libGHLo_gs_MinimapFrustum {
    int[3] lv_ping;
    bool lv_active;
    int lv_playerOne;
    int lv_playerTwo;
};

struct libGHLo_gs_BattleReport {
    bool lv_active;
    bool lv_battleActive;
    int lv_battleNr;
    fixed lv_battleGameTimeDuration;
    timer lv_battleEndingTimer;
    int[2] lv_playerIdSide;
    bool lv_updateDueToDamage;
    bool lv_updateDueToDeathAll;
    bool lv_updateDueToDeathOnlyLabels;
    bool lv_updateDueToDeathResources;
    bool lv_updateDueToAbilityAll;
    bool lv_updateDueToAbilityOnlyLabels;
    bool lv_resetBattleEndingTimer;
    bool lv_resetUnusedSlots;
    int lv_uiBattleDurationLabel;
    int lv_uiBattleActiveIndicator;
    timer lv_noUiUpdateTimer;
    bool lv_noUiUpdates;
};

struct libGHLo_gs_BattleReportSide {
    int lv_killedUnitTypeLastUsedSlot;
    string[libGHLo_gv_battleReportMaxKilledUnitTypeSlot + 1] lv_killedUnitType;
    int[libGHLo_gv_battleReportMaxKilledUnitTypeSlot + 1] lv_killedUnitTypeCount;
    string[libGHLo_gv_battleReportMaxKilledUnitTypeSlot + 1] lv_killedUnitTypeIcon;
    text[libGHLo_gv_battleReportMaxKilledUnitTypeSlot + 1] lv_killedUnitTypeName;
    int lv_abilitiesCastedLastUsedSlot;
    abilcmd[libGHLo_gv_battleReportMaxAbilitySlot + 1] lv_abilitiesCasted;
    int[libGHLo_gv_battleReportMaxAbilitySlot + 1] lv_abilitiesCastedCount;
    string[libGHLo_gv_battleReportMaxAbilitySlot + 1] lv_abilitiesCastedIcon;
    text[libGHLo_gv_battleReportMaxAbilitySlot + 1] lv_abilitiesCastedName;
    fixed lv_damageDealt;
    int[2] lv_resourcesDestroyed;
    int[libGHLo_gv_battleReportMaxKilledUnitTypeSlot + 1] lv_uiUnitTypeButton;
    int[libGHLo_gv_battleReportMaxAbilitySlot + 1] lv_uiAbilityButton;
    int lv_uiDamageLabel;
    int lv_uiMineralsLabel;
    int lv_uiVespeneLabel;
};

// Variable Declarations
playergroup libGHLo_gv_all_Players;
playergroup libGHLo_gv_initial_Active_Players;
int libGHLo_gv_obsID;
playergroup libGHLo_gv_obs;
fixed libGHLo_gv_gameSpeedFactor;
libGHLo_gs_ProductionTabGeneral libGHLo_gv_productionTabGeneral;
libGHLo_gs_ProductionTabPlayer[16] libGHLo_gv_productionTabPlayer;
int libGHLo_gv_productionTabMAX_VISIBLE_SLOTS__1;
libGHLo_gs_GraphsGeneral libGHLo_gv_graphsGeneral;
libGHLo_gs_GraphsData[libGHLo_gv_graphsMaxGraphId + 1] libGHLo_gv_graphsData;
libGHLo_gs_Labels libGHLo_gv_labels;
libGHLo_gs_UpgradeNotifications libGHLo_gv_upgradeNotifications;
libGHLo_gs_WorkersKilledNotifications libGHLo_gv_workersKilledNotifications;
fixed libGHLo_gv_workersKilledNotificationsVisibleGameTime;
libGHLo_gs_MapNotifications libGHLo_gv_mapNotifications;
libGHLo_gs_MinimapFrustum libGHLo_gv_minimapFrustum;
libGHLo_gs_BattleReport libGHLo_gv_battleReport;
libGHLo_gs_BattleReportSide[2] libGHLo_gv_battleReportSideData;

// Function Declarations
string libGHLo_gf_IconofProduction (string lp_item, bool lp_isUnit);
string libGHLo_gf_IconofUnit (string lp_unitType);
string libGHLo_gf_IconofUpgrade (string lp_upgrade);
text libGHLo_gf_NameofProduction (string lp_item, bool lp_isUnit);
void libGHLo_gf_ApplySkinSet (string lp_skinSet, int lp_player);
string libGHLo_gf_PlayerSkinSet (int lp_player);
void libGHLo_gf_RegisterCameraMoveEvent (trigger lp_trigger, int lp_playerId, int lp_cameraMoveReason);
void libGHLo_gf_RegisterPeriodicEvent (trigger lp_trigger, fixed lp_interval, int lp_time);
void libGHLo_gf_RegisterTimerRunsOutEvent (trigger lp_trigger, timer lp_timer);
void libGHLo_gf_RegisterUnitCreatedEvent (trigger lp_trigger, unit lp_unit, string lp_ability, string lp_behavior);
void libGHLo_gf_RegisterUnitTrainingProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage);
void libGHLo_gf_RegisterUnitArmingProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage);
void libGHLo_gf_RegisterUnitResearchProgressEvent (trigger lp_trigger, unit lp_unit, int lp_progressStage);
void libGHLo_gf_RegisterUnitDiesEvent (trigger lp_trigger, unit lp_unit);
void libGHLo_gf_RegisterPlayerLeavesEvent (trigger lp_trigger, int lp_player, int lp_gameResult);
void libGHLo_gf_RegisterAbilityUsedEvent (trigger lp_trigger, unit lp_unit, abilcmd lp_abilityCommand, int lp_stage, bool lp_includeSharedAbilities);
void libGHLo_gf_RegisterUnitTakesDamageEvent (trigger lp_trigger, unit lp_unit, int lp_damageType, int lp_fatal, string lp_effect);
void libGHLo_gf_RegisterTimerExpiresEvent (trigger lp_trigger, timer lp_timer);
void libGHLo_gf_ProductionTabRegisterProduction (int lp_player, string lp_item, int lp_productionCategory, unit lp_relatedUnit, bool lp_isMorphOrUnitWarpOrMerge, int lp_buildQueueIndex);
void libGHLo_gf_ProductionTabRemoveProduction (int lp_player, string lp_item, int lp_productionType, unit lp_relatedUnit);
void libGHLo_gf_ProductionTabSwapSlots (int lp_player, int lp_slotA, int lp_slotB);
fixed libGHLo_gf_ProductionTabGetCurrentProgressPercent (unitgroup lp_units, bool lp_isMorphOrUnitWarpInOrMerge, int lp_productionSlot);
void libGHLo_gf_ProductionTabUpdateUIprogressselectionthreadedinfinite ();
void libGHLo_gf_ObserverUiAssistSetPlayerIdScore (int lp_player);
void libGHLo_gf_ObserverUiAssistSetPlayerStatusScore (int lp_player, int lp_status);
int libGHLo_gf_GetFixedUnitResourceCost (unit lp_unit, int lp_resource, int lp_player);
void libGHLo_gf_GraphsDefineGraph (int lp_id, text lp_title, string lp_frameName, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement, bool lp_averageValues);
void libGHLo_gf_GraphsUpdateDataDifferential (int lp_graphIndex);
void libGHLo_gf_GraphsUpdateDataComparative (int lp_graphIndex);
bool libGHLo_gf_LabelsUnitUsesCustomStatusBar (string lp_unitType);
void libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade (int lp_slot);
int libGHLo_gf_UpgradeNotificationsSearchFacilitySlot (unit lp_facility);
text libGHLo_gf_UpgradeNotificationsUpgradeName (string lp_upgrade);
bool libGHLo_gf_UpgradeNotificationsUpgradeNeedsToBeVisible (fixed lp_remainingTime);
void libGHLo_gf_UpgradeNotificationsUpdateUIthreaded ();
void libGHLo_gf_UpgradeNotificationsSetStatusLabel (int lp_slot, text lp_status);
void libGHLo_gf_UpgradeNotificationsSetSlotData (int lp_slot, text lp_name, string lp_icon, int lp_player, bool lp_visible, unit lp_facility);
int libGHLo_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne (int lp_minUncheckedSlot, int lp_slot);
void libGHLo_gf_UpgradeNotificationsSwapSlotInformation (int lp_slotA, int lp_slotB);
void libGHLo_gf_UpgradeNotificationsUpdateProgressData (int lp_slot);
bool libGHLo_gf_MapNotificationsCargoUnitshaveFullHealth (unit lp_transportunit);
int libGHLo_gf_BattleReportGetPlayerSideIndex (int lp_player);
int libGHLo_gf_BattleReportGetOpposingPlayerSideIndex (int lp_player);
bool libGHLo_gf_BattleReportHasBattleStarted ();
bool libGHLo_gf_BattleReportIsTrackedUnitType (unit lp_unit, string lp_unitType);
void libGHLo_gf_BattleReportStartBattle ();
void libGHLo_gf_BattleReportStartBattleActiveDurationCounterthreaded (int lp_battleNr);
void libGHLo_gf_BattleReportUpdateUIthreaded (int lp_battleNr);
void libGHLo_gf_BattleReportUpdateUI ();
void libGHLo_gf_BattleReportResetBattleEndingTimer ();
void libGHLo_gf_BattleReportIncrementDamage (int lp_sideIndex, fixed lp_damage);
void libGHLo_gf_BattleReportIncrementAbilityUsage (int lp_sideIndex, abilcmd lp_abilityCommand);
void libGHLo_gf_BattleReportIncrementUnitTypeKill (int lp_sideIndex, string lp_unitType);
void libGHLo_gf_BattleReportIncrementResourceDamage (int lp_sideIndex, int lp_minerals, int lp_vespene);
void libGHLo_gf_BattleReportEndBattle ();
void libGHLo_gf_BattleReportClearBattleData ();

// Trigger Declarations
trigger libGHLo_gt_GameHeartInitialization;
trigger libGHLo_gt_GameHeartRevealDebrisFromDestructubleTowers;
trigger libGHLo_gt_ProductionTabInit;
trigger libGHLo_gt_ProductionTabConstructionUnitWarpStarted;
trigger libGHLo_gt_ProductionTabConstructionUnitWarpEnded;
trigger libGHLo_gt_ProductionTabTrainingStarted;
trigger libGHLo_gt_ProductionTabTrainingEnded;
trigger libGHLo_gt_ProductionTabResearchStarted;
trigger libGHLo_gt_ProductionTabResearchEnded;
trigger libGHLo_gt_ProductionTabArmingStarted;
trigger libGHLo_gt_ProductionTabArmingEnded;
trigger libGHLo_gt_ProductionTabMorphStarted;
trigger libGHLo_gt_ProductionTabMorphFinished;
trigger libGHLo_gt_ProductionTabContaminateActivates;
trigger libGHLo_gt_ProductionTabContaminateDeactivates;
trigger libGHLo_gt_ProductionTabChronoBoostActivates;
trigger libGHLo_gt_ProductionTabChronoBoostDeactivates;
trigger libGHLo_gt_ObserverUiAssistInitialization;
trigger libGHLo_gt_ObserverUiAssistPlayerLeavesGameDefeat;
trigger libGHLo_gt_ObserverUiAssistPlayerLeavesGameTie;
trigger libGHLo_gt_ObserverUiAssistPlayerLeavesGameVictory;
trigger libGHLo_gt_ArchonMergeSaveResourceOffset;
trigger libGHLo_gt_ArchonDuplicatedTemplarsDied;
trigger libGHLo_gt_OverlordTransportMorphCompleted;
trigger libGHLo_gt_OverseerFromOverlordTransportDied;
trigger libGHLo_gt_GraphsInitialization;
trigger libGHLo_gt_GraphsTimer;
trigger libGHLo_gt_LabelsInitialization;
trigger libGHLo_gt_LabelsUnitCreated;
trigger libGHLo_gt_LabelsUnitTrainingStarted;
trigger libGHLo_gt_LabelsResearchStarted;
trigger libGHLo_gt_LabelsUnitTrainingStopped;
trigger libGHLo_gt_LabelsResearchStopped;
trigger libGHLo_gt_LabelsReactorDestroyed;
trigger libGHLo_gt_UpgradeNotificationsInitialization;
trigger libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut;
trigger libGHLo_gt_UpgradeNotificationsResearchCancelled;
trigger libGHLo_gt_UpgradeNotificationsResearchCompleted;
trigger libGHLo_gt_UpgradeNotificationsResearchStarted;
trigger libGHLo_gt_WorkersKilledNotificationsInitialization;
trigger libGHLo_gt_WorkersKilledNotificationsTimerRunsOut;
trigger libGHLo_gt_WorkersKilledNotificationsWorkerKilled;
trigger libGHLo_gt_MapNotificationsDrop;
trigger libGHLo_gt_MapNotificationsScannerSweep;
trigger libGHLo_gt_MinimapFrustumInitialization;
trigger libGHLo_gt_MinimapFrustumPlayerCameraMoved;
trigger libGHLo_gt_MinimapFrustumPlayerLeaves;
trigger libGHLo_gt_BattleReportInitialization;
trigger libGHLo_gt_BattleReportUnitIsDamaged;
trigger libGHLo_gt_BattleReportUnitDies;
trigger libGHLo_gt_BattleReportTrackedAbilityUsedAbattlestarting;
trigger libGHLo_gt_BattleReportTrackedAbilityUsedBnobattlestart;
trigger libGHLo_gt_BattleReportBattleEndingTimerExpires;
trigger libGHLo_gt_BattleReportNoUiUpdateTimerExpires;

// Library Initialization
void libGHLo_InitVariables ();

